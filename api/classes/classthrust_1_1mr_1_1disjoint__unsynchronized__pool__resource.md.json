{
  "abstract": false,
  "anchor": "",
  "baseClasses": [
    {
      "external": false,
      "name": "thrust::mr::memory_resource< Upstream::pointer >",
      "publicFunctions": [
        {
          "abstract": false,
          "anchor": "#function-~memory-resource",
          "argsString": "()=default",
          "category": "functions",
          "const": false,
          "default": true,
          "definition": "virtual thrust::mr::memory_resource< Pointer >::~memory_resource",
          "deleted": false,
          "details": "Virtual destructor, defaulted when possible. ",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::~memory_resource",
          "hasDetails": true,
          "inline": false,
          "kind": "function",
          "language": "cpp",
          "location": {
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 57
          },
          "name": "~memory_resource",
          "override": false,
          "params": [],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::~memory_resource",
          "refid": "classthrust_1_1mr_1_1memory__resource_1a261fd74b7a280f8a694acbe47286d5b0",
          "static": false,
          "strong": false,
          "title": "~memory_resource",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-~memory-resource",
          "virtual": true,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-allocate",
          "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "pointer thrust::mr::memory_resource< Pointer >::allocate",
          "deleted": false,
          "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
          "exceptionsList": [
            {
              "name": "thrust::bad_alloc",
              "text": "when no memory with requested size and alignment can be allocated. "
            }
          ],
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::allocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 70,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 67,
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 67
          },
          "name": "allocate",
          "override": false,
          "paramList": [
            {
              "name": "bytes",
              "text": "size, in bytes, that is requested from this allocation "
            },
            {
              "name": "alignment",
              "text": "alignment that is requested from this allocation "
            }
          ],
          "params": [
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::allocate",
          "refid": "classthrust_1_1mr_1_1memory__resource_1a60e0b2a6bd20537fff92b3a41ec5f2c2",
          "returns": [
            "A pointer to void to the newly allocated memory. "
          ],
          "static": false,
          "strong": false,
          "title": "allocate",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
          "typePlain": "pointer",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-allocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-deallocate",
          "argsString": "(pointer p, std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "void thrust::mr::memory_resource< Pointer >::deallocate",
          "deleted": false,
          "details": "Deallocates memory pointed to by <code>p</code>.",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::deallocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 83,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 80,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 80
          },
          "name": "deallocate",
          "override": false,
          "paramList": [
            {
              "name": "p",
              "text": "pointer to be deallocated "
            },
            {
              "name": "bytes",
              "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
            },
            {
              "name": "alignment",
              "text": "the alignment of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
            }
          ],
          "params": [
            {
              "name": "p",
              "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
              "typePlain": "pointer"
            },
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::deallocate",
          "refid": "classthrust_1_1mr_1_1memory__resource_1a5153a93c858b588b4a1ea1e2ba7a489a",
          "static": false,
          "strong": false,
          "title": "deallocate",
          "type": "void",
          "typePlain": "void",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-deallocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-is-equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ __device__ bool thrust::mr::memory_resource< Pointer >::is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 95,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 92,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 92
          },
          "name": "is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::is_equal",
          "refid": "classthrust_1_1mr_1_1memory__resource_1aa31ed2a7057d84f4e616498172875474",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "is_equal",
          "type": "__host__ __device__ bool",
          "typePlain": "__host__ __device__ bool",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-is-equal",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-do-is-equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ virtual __device__ bool thrust::mr::memory_resource< Pointer >::do_is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::do_is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 126,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 123,
            "column": 18,
            "file": "thrust/mr/memory_resource.h",
            "line": 123
          },
          "name": "do_is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::do_is_equal",
          "refid": "classthrust_1_1mr_1_1memory__resource_1ab942189772873c162bb64103a6c85abb",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "do_is_equal",
          "type": "__host__ virtual __device__ bool",
          "typePlain": "__host__ virtual __device__ bool",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-do-is-equal",
          "virtual": true,
          "visibility": "public"
        }
      ],
      "publicTypes": [
        {
          "abstract": false,
          "anchor": "#typedef-pointer",
          "category": "types",
          "const": false,
          "definition": "typedef Pointer thrust::mr::memory_resource< Pointer >::pointer",
          "details": "Alias for the template parameter. ",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::pointer",
          "hasDetails": true,
          "inline": false,
          "kind": "typedef",
          "language": "cpp",
          "location": {
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 53,
            "column": 21,
            "file": "thrust/mr/memory_resource.h",
            "line": 53
          },
          "name": "pointer",
          "override": false,
          "qualifiedname": "thrust::mr::memory_resource::pointer",
          "refid": "classthrust_1_1mr_1_1memory__resource_1aba4c34d8cc07d59ce14fe6c30e92727e",
          "static": false,
          "strong": false,
          "title": "pointer",
          "type": "Pointer",
          "typePlain": "Pointer",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer",
          "visibility": "public"
        }
      ],
      "refid": "classthrust_1_1mr_1_1memory__resource",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html",
      "virtual": "non-virtual",
      "visibility": "public"
    },
    {
      "external": true,
      "name": "thrust::mr::validator2< Upstream, Bookkeeper >",
      "refid": null,
      "virtual": "non-virtual",
      "visibility": "private"
    }
  ],
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "A memory resource adaptor allowing for pooling and caching allocations from <code>Upstream</code>, using <code>Bookkeeper</code> for management of that cached and pooled memory, allowing to cache portions of memory inaccessible from the host.\n\nOn a typical memory resource, calls to <code>allocate</code> and <code>deallocate</code> actually allocate and deallocate memory. Pooling memory resources only allocate and deallocate memory from an external resource (the upstream memory resource) when there's no suitable memory currently cached; otherwise, they use memory they have acquired beforehand, to make memory allocation faster and more efficient.\n\nThe disjoint version of the pool resources uses a separate upstream memory resource, <code>Bookkeeper</code>, to allocate memory necessary to manage the cached memory. There may be many reasons to do that; the canonical one is that <code>Upstream</code> allocates memory that is inaccessible to the code of the pool resource, which means that it cannot embed the necessary information in memory obtained from <code>Upstream</code>; for instance, <code>Upstream</code> can be a CUDA non-managed memory resource, or a CUDA managed memory resource whose memory we would prefer to not migrate back and forth between host and device when executing bookkeeping code.\n\nThis is not the only case where it makes sense to use a disjoint pool resource, though. In a multi-core environment it may be beneficial to avoid stealing cache lines from other cores by writing over bookkeeping information embedded in an allocated block of memory. In such a case, one can imagine wanting to use a disjoint pool where both the upstream and the bookkeeper are of the same type, to allocate memory consistently, but separately for those two purposes.",
  "explicit": false,
  "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource",
  "hasAdditionalMembers": true,
  "hasDetails": true,
  "includes": "<thrust/mr/disjoint_pool.h>",
  "inline": false,
  "kind": "class",
  "language": "cpp",
  "location": {
    "bodyEnd": 482,
    "bodyFile": "thrust/mr/disjoint_pool.h",
    "bodyStart": 74,
    "column": 1,
    "file": "thrust/mr/disjoint_pool.h",
    "line": 71
  },
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "memory_resources",
    "kind": "group",
    "language": "",
    "name": "memory_resources",
    "qualifiedname": "memory_resources",
    "refid": "group__memory__resources",
    "title": "Memory Resources",
    "url": "{{ site.baseurl }}/api/groups/group__memory__resources.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "language": "",
      "name": "memory_management",
      "qualifiedname": "memory_management",
      "refid": "group__memory__management",
      "title": "Memory Management",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_resources",
      "kind": "group",
      "language": "",
      "name": "memory_resources",
      "qualifiedname": "memory_resources",
      "refid": "group__memory__resources",
      "title": "Memory Resources",
      "url": "{{ site.baseurl }}/api/groups/group__memory__resources.html",
      "visibility": "public"
    }
  ],
  "name": "thrust::mr::disjoint_unsynchronized_pool_resource",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
    "category": "namespaces",
    "fullname": "thrust::mr",
    "kind": "namespace",
    "language": "cpp",
    "name": "thrust::mr",
    "qualifiedname": "thrust::mr",
    "refid": "namespacethrust_1_1mr",
    "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
    "title": "thrust::mr",
    "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1mr.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust",
      "qualifiedname": "thrust",
      "refid": "namespacethrust",
      "title": "thrust",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
      "category": "namespaces",
      "fullname": "thrust::mr",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::mr",
      "qualifiedname": "thrust::mr",
      "refid": "namespacethrust_1_1mr",
      "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
      "title": "thrust::mr",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1mr.html",
      "visibility": "public"
    }
  ],
  "privateAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-m-upstream",
      "category": "attributes",
      "const": false,
      "definition": "Upstream* thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_upstream",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_upstream",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 268,
        "column": 15,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 268
      },
      "name": "m_upstream",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_upstream",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a6fd5809724f6d26c47537d0508909664",
      "static": false,
      "strong": false,
      "title": "m_upstream",
      "type": "Upstream *",
      "typePlain": "Upstream *",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-upstream",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m-bookkeeper",
      "category": "attributes",
      "const": false,
      "definition": "Bookkeeper* thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_bookkeeper",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_bookkeeper",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 269,
        "column": 17,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 269
      },
      "name": "m_bookkeeper",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_bookkeeper",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a23e3d12b9672afb3fb3acbda2702faee",
      "static": false,
      "strong": false,
      "title": "m_bookkeeper",
      "type": "Bookkeeper *",
      "typePlain": "Bookkeeper *",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-bookkeeper",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m-options",
      "category": "attributes",
      "const": false,
      "definition": "pool_options thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_options",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_options",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 271,
        "column": 18,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 271
      },
      "name": "m_options",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_options",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a596b8156b93d610d79b09f41e09eff58",
      "static": false,
      "strong": false,
      "title": "m_options",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1pool__options.html\">pool_options</a>",
      "typePlain": "pool_options",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-options",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m-smallest-block-log2",
      "category": "attributes",
      "const": false,
      "definition": "std::size_t thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_smallest_block_log2",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_smallest_block_log2",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 272,
        "column": 17,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 272
      },
      "name": "m_smallest_block_log2",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_smallest_block_log2",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a5d585a1e2d8d4bd194498bbd4721b3ad",
      "static": false,
      "strong": false,
      "title": "m_smallest_block_log2",
      "type": "std::size_t",
      "typePlain": "std::size_t",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-smallest-block-log2",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m-pools",
      "category": "attributes",
      "const": false,
      "definition": "pool_vector thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_pools",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_pools",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 275,
        "column": 17,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 275
      },
      "name": "m_pools",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_pools",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a93a2ebee1abeaff2665d3e3aa1000dc9",
      "static": false,
      "strong": false,
      "title": "m_pools",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">pool_vector</a>",
      "typePlain": "pool_vector",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-pools",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m-allocated",
      "category": "attributes",
      "const": false,
      "definition": "chunk_vector thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_allocated",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_allocated",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 277,
        "column": 18,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 277
      },
      "name": "m_allocated",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_allocated",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1ad3109529cf6d1aa6c586592b3d09875c",
      "static": false,
      "strong": false,
      "title": "m_allocated",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">chunk_vector</a>",
      "typePlain": "chunk_vector",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-allocated",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m-cached-oversized",
      "category": "attributes",
      "const": false,
      "definition": "oversized_block_vector thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_cached_oversized",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_cached_oversized",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 279,
        "column": 28,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 279
      },
      "name": "m_cached_oversized",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_cached_oversized",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a10a81f89ac2a8a8979ad79238654239a",
      "static": false,
      "strong": false,
      "title": "m_cached_oversized",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">oversized_block_vector</a>",
      "typePlain": "oversized_block_vector",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-cached-oversized",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#variable-m-oversized",
      "category": "attributes",
      "const": false,
      "definition": "oversized_block_vector thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::m_oversized",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_oversized",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 281,
        "column": 28,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 281
      },
      "name": "m_oversized",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::m_oversized",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a5a597fbf0c9169c8661e3dde4d9d9ffa",
      "static": false,
      "strong": false,
      "title": "m_oversized",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">oversized_block_vector</a>",
      "typePlain": "oversized_block_vector",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#variable-m-oversized",
      "visibility": "private"
    }
  ],
  "privateClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::chunk_descriptor",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::mr::disjoint_unsynchronized_pool_resource::chunk_descriptor",
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::chunk_descriptor",
      "refid": "structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1chunk__descriptor",
      "title": "thrust::mr::disjoint_unsynchronized_pool_resource::chunk_descriptor",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1chunk__descriptor.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::equal_pointers",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::mr::disjoint_unsynchronized_pool_resource::equal_pointers",
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::equal_pointers",
      "refid": "structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1equal__pointers",
      "title": "thrust::mr::disjoint_unsynchronized_pool_resource::equal_pointers",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1equal__pointers.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::matching_alignment",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::mr::disjoint_unsynchronized_pool_resource::matching_alignment",
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::matching_alignment",
      "refid": "structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1matching__alignment",
      "title": "thrust::mr::disjoint_unsynchronized_pool_resource::matching_alignment",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1matching__alignment.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::oversized_block_descriptor",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::mr::disjoint_unsynchronized_pool_resource::oversized_block_descriptor",
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::oversized_block_descriptor",
      "refid": "structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1oversized__block__descriptor",
      "title": "thrust::mr::disjoint_unsynchronized_pool_resource::oversized_block_descriptor",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1oversized__block__descriptor.html",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::pool",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::mr::disjoint_unsynchronized_pool_resource::pool",
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::pool",
      "refid": "structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1pool",
      "title": "thrust::mr::disjoint_unsynchronized_pool_resource::pool",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1_1pool.html",
      "visibility": "private"
    }
  ],
  "privateTypes": [
    {
      "abstract": false,
      "anchor": "#typedef-void-ptr",
      "category": "types",
      "const": false,
      "definition": "typedef Upstream::pointer thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::void_ptr",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::void_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 157,
        "column": 40,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 157
      },
      "name": "void_ptr",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::void_ptr",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a1743cd6782af8e01dbad2b90001b0415",
      "static": false,
      "strong": false,
      "title": "void_ptr",
      "type": "Upstream::pointer",
      "typePlain": "Upstream::pointer",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#typedef-void-ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-char-ptr",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::detail::pointer_traits<void_ptr>::template rebind<char>::other thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::char_ptr",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::char_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 158,
        "column": 79,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 158
      },
      "name": "char_ptr",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::char_ptr",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a9f699d5f695f278706cacfe8a2c31564",
      "static": false,
      "strong": false,
      "title": "char_ptr",
      "type": "thrust::detail::pointer_traits< void_ptr >::template rebind< char >::other",
      "typePlain": "thrust::detail::pointer_traits< void_ptr >::template rebind< char >::other",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#typedef-char-ptr",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-chunk-vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< chunk_descriptor, allocator<chunk_descriptor, Bookkeeper> > thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::chunk_vector",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::chunk_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 169,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 169
      },
      "name": "chunk_vector",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::chunk_vector",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a0ef51e8ba4dd9e19c5f8e6363948a9de",
      "static": false,
      "strong": false,
      "title": "chunk_vector",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">thrust::host_vector</a>< chunk_descriptor, <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html\">allocator</a>< chunk_descriptor, Bookkeeper > >",
      "typePlain": "thrust::host_vector< chunk_descriptor, allocator< chunk_descriptor, Bookkeeper > >",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#typedef-chunk-vector",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-oversized-block-vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< oversized_block_descriptor, allocator<oversized_block_descriptor, Bookkeeper> > thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::oversized_block_vector",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::oversized_block_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 229,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 229
      },
      "name": "oversized_block_vector",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::oversized_block_vector",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a30faaba157d00912854c48d93c81108b",
      "static": false,
      "strong": false,
      "title": "oversized_block_vector",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">thrust::host_vector</a>< oversized_block_descriptor, <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html\">allocator</a>< oversized_block_descriptor, Bookkeeper > >",
      "typePlain": "thrust::host_vector< oversized_block_descriptor, allocator< oversized_block_descriptor, Bookkeeper > >",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#typedef-oversized-block-vector",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-pointer-vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< void_ptr, allocator<void_ptr, Bookkeeper> > thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::pointer_vector",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::pointer_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 234,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 234
      },
      "name": "pointer_vector",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::pointer_vector",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1aea19aeb07b314ed438183c529ea2d475",
      "static": false,
      "strong": false,
      "title": "pointer_vector",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">thrust::host_vector</a>< void_ptr, <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html\">allocator</a>< void_ptr, Bookkeeper > >",
      "typePlain": "thrust::host_vector< void_ptr, allocator< void_ptr, Bookkeeper > >",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#typedef-pointer-vector",
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#typedef-pool-vector",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::host_vector< pool, allocator<pool, Bookkeeper> > thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::pool_vector",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::pool_vector",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 266,
        "column": 2,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 266
      },
      "name": "pool_vector",
      "override": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::pool_vector",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1ab85827f263db06f18e515926b5d7194e",
      "static": false,
      "strong": false,
      "title": "pool_vector",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">thrust::host_vector</a>< pool, <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html\">allocator</a>< pool, Bookkeeper > >",
      "typePlain": "thrust::host_vector< pool, allocator< pool, Bookkeeper > >",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#typedef-pool-vector",
      "visibility": "private"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-get-default-options",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static pool_options thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::get_default_options",
      "deleted": false,
      "details": "Get the default options for a disjoint pool. These are meant to be a sensible set of values for many use cases, and as such, may be tuned in the future. This function is exposed so that creating a set of options that are just a slight departure from the defaults is easy. ",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::get_default_options",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 100,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 80,
        "column": 25,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 80
      },
      "name": "get_default_options",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::get_default_options",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1ae0f78941e94dc6e9273b64abec8b0546",
      "static": true,
      "strong": false,
      "title": "get_default_options",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1pool__options.html\">pool_options</a>",
      "typePlain": "pool_options",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-get-default-options",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-disjoint-unsynchronized-pool-resource",
      "argsString": "(Upstream *upstream, Bookkeeper *bookkeeper, pool_options options=get_default_options())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::disjoint_unsynchronized_pool_resource",
      "deleted": false,
      "details": "Constructor.",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::disjoint_unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 124,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 108,
        "column": 5,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 108
      },
      "name": "disjoint_unsynchronized_pool_resource",
      "override": false,
      "paramList": [
        {
          "name": "upstream",
          "text": "the upstream memory resource for allocations "
        },
        {
          "name": "bookkeeper",
          "text": "the upstream memory resource for bookkeeping "
        },
        {
          "name": "options",
          "text": "pool options to use "
        }
      ],
      "params": [
        {
          "name": "upstream",
          "type": "Upstream *",
          "typePlain": "Upstream *"
        },
        {
          "name": "bookkeeper",
          "type": "Bookkeeper *",
          "typePlain": "Bookkeeper *"
        },
        {
          "defval": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-get-default-options\">get_default_options</a>()",
          "defvalPlain": "get_default_options()",
          "name": "options",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1pool__options.html\">pool_options</a>",
          "typePlain": "pool_options"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::disjoint_unsynchronized_pool_resource",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a17cc3c5c7733aef78a804b62fef12f27",
      "static": false,
      "strong": false,
      "title": "disjoint_unsynchronized_pool_resource",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-disjoint-unsynchronized-pool-resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-disjoint-unsynchronized-pool-resource",
      "argsString": "(pool_options options=get_default_options())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::disjoint_unsynchronized_pool_resource",
      "deleted": false,
      "details": "Constructor. Upstream and bookkeeping resources are obtained by calling <code>get&#95;global&#95;resource</code> for their types.",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::disjoint_unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 147,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 132,
        "column": 5,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 132
      },
      "name": "disjoint_unsynchronized_pool_resource",
      "override": false,
      "paramList": [
        {
          "name": "options",
          "text": "pool options to use "
        }
      ],
      "params": [
        {
          "defval": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-get-default-options\">get_default_options</a>()",
          "defvalPlain": "get_default_options()",
          "name": "options",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1mr_1_1pool__options.html\">pool_options</a>",
          "typePlain": "pool_options"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::disjoint_unsynchronized_pool_resource",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1ac43cc5fe2d093a025a7c3b3a1fadfc20",
      "static": false,
      "strong": false,
      "title": "disjoint_unsynchronized_pool_resource",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-disjoint-unsynchronized-pool-resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-~disjoint-unsynchronized-pool-resource",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::~disjoint_unsynchronized_pool_resource",
      "deleted": false,
      "details": "Destructor. Releases all held memory to upstream. ",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::~disjoint_unsynchronized_pool_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 154,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 151,
        "column": 5,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 151
      },
      "name": "~disjoint_unsynchronized_pool_resource",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::~disjoint_unsynchronized_pool_resource",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a7011ce6ae7137d312b8ca02d30b5f0aa",
      "static": false,
      "strong": false,
      "title": "~disjoint_unsynchronized_pool_resource",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-~disjoint-unsynchronized-pool-resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-release",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::release",
      "deleted": false,
      "details": "Releases all held memory to upstream. ",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::release",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 316,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 286,
        "column": 10,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 286
      },
      "name": "release",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::release",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1ad4ca6c5abb83c19bcb9e0eaa25375f35",
      "static": false,
      "strong": false,
      "title": "release",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-release",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do-allocate",
      "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t)) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual void_ptr thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::do_allocate",
      "deleted": false,
      "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
      "exceptionsList": [
        {
          "name": "thrust::bad_alloc",
          "text": "when no memory with requested size and alignment can be allocated. "
        }
      ],
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::do_allocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 443,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 318,
        "column": 23,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 318
      },
      "name": "do_allocate",
      "override": true,
      "paramList": [
        {
          "name": "bytes",
          "text": "size, in bytes, that is requested from this allocation "
        },
        {
          "name": "alignment",
          "text": "alignment that is requested from this allocation "
        }
      ],
      "params": [
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "defval": "alignof(std::max_align_t)",
          "defvalPlain": "alignof(std::max_align_t)",
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::do_allocate",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a2d45b235a8879cf3f74d31cb3f945262",
      "reimplements": {
        "anchor": "#function-do-allocate",
        "category": "functions",
        "fullname": "thrust::mr::memory_resource::do_allocate",
        "kind": "function",
        "language": "cpp",
        "name": "do_allocate",
        "pureVirtual": true,
        "qualifiedname": "thrust::mr::memory_resource::do_allocate",
        "refid": "classthrust_1_1mr_1_1memory__resource_1affb0e7d04fa2e105440a35ce68758565",
        "title": "do_allocate",
        "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-do-allocate",
        "virtual": true,
        "visibility": "public"
      },
      "returns": [
        "A pointer to void to the newly allocated memory. "
      ],
      "static": false,
      "strong": false,
      "title": "do_allocate",
      "type": "void_ptr",
      "typePlain": "void_ptr",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-do-allocate",
      "virtual": true,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do-deallocate",
      "argsString": "(void_ptr p, std::size_t n, std::size_t alignment=alignof(std::max_align_t)) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual void thrust::mr::disjoint_unsynchronized_pool_resource< Upstream, Bookkeeper >::do_deallocate",
      "deleted": false,
      "details": "Deallocates memory pointed to by <code>p</code>.",
      "explicit": false,
      "fullname": "thrust::mr::disjoint_unsynchronized_pool_resource::do_deallocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 481,
        "bodyFile": "thrust/mr/disjoint_pool.h",
        "bodyStart": 445,
        "column": 18,
        "file": "thrust/mr/disjoint_pool.h",
        "line": 445
      },
      "name": "do_deallocate",
      "override": true,
      "paramList": [
        {
          "name": "p",
          "text": "pointer to be deallocated "
        },
        {
          "name": "bytes",
          "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
        },
        {
          "name": "alignment",
          "text": "the size of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
        }
      ],
      "params": [
        {
          "name": "p",
          "type": "void_ptr",
          "typePlain": "void_ptr"
        },
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "defval": "alignof(std::max_align_t)",
          "defvalPlain": "alignof(std::max_align_t)",
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource::do_deallocate",
      "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource_1a89be63a49062a5d7abe9c3ab112fde4b",
      "reimplements": {
        "anchor": "#function-do-deallocate",
        "category": "functions",
        "fullname": "thrust::mr::memory_resource::do_deallocate",
        "kind": "function",
        "language": "cpp",
        "name": "do_deallocate",
        "pureVirtual": true,
        "qualifiedname": "thrust::mr::memory_resource::do_deallocate",
        "refid": "classthrust_1_1mr_1_1memory__resource_1ae4fd0eb8907fd516b469826532782cce",
        "title": "do_deallocate",
        "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-do-deallocate",
        "virtual": true,
        "visibility": "public"
      },
      "static": false,
      "strong": false,
      "title": "do_deallocate",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html#function-do-deallocate",
      "virtual": true,
      "visibility": "public"
    }
  ],
  "qualifiedname": "thrust::mr::disjoint_unsynchronized_pool_resource",
  "refid": "classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource",
  "static": false,
  "strong": false,
  "templateParams": [
    {
      "name": "",
      "type": "typename Upstream",
      "typePlain": "typename Upstream"
    },
    {
      "name": "",
      "type": "typename Bookkeeper",
      "typePlain": "typename Bookkeeper"
    }
  ],
  "templateParamsList": [
    {
      "name": "Upstream",
      "text": "the type of memory resources that will be used for allocating memory blocks to be handed off to the user "
    },
    {
      "name": "Bookkeeper",
      "text": "the type of memory resources that will be used for allocating bookkeeping memory "
    }
  ],
  "title": "thrust::mr::disjoint_unsynchronized_pool_resource",
  "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1disjoint__unsynchronized__pool__resource.html",
  "visibility": "public"
}