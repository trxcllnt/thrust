{
  "abstract": false,
  "anchor": "",
  "baseClasses": [
    {
      "external": false,
      "name": "thrust::mr::memory_resource< device_ptr< void > >",
      "publicFunctions": [
        {
          "abstract": false,
          "anchor": "#function-~memory-resource",
          "argsString": "()=default",
          "category": "functions",
          "const": false,
          "default": true,
          "definition": "virtual thrust::mr::memory_resource< Pointer >::~memory_resource",
          "deleted": false,
          "details": "Virtual destructor, defaulted when possible. ",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::~memory_resource",
          "hasDetails": true,
          "inline": false,
          "kind": "function",
          "language": "cpp",
          "location": {
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 57
          },
          "name": "~memory_resource",
          "override": false,
          "params": [],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::~memory_resource",
          "refid": "classthrust_1_1mr_1_1memory__resource_1a261fd74b7a280f8a694acbe47286d5b0",
          "static": false,
          "strong": false,
          "title": "~memory_resource",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-~memory-resource",
          "virtual": true,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-allocate",
          "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "pointer thrust::mr::memory_resource< Pointer >::allocate",
          "deleted": false,
          "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
          "exceptionsList": [
            {
              "name": "thrust::bad_alloc",
              "text": "when no memory with requested size and alignment can be allocated. "
            }
          ],
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::allocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 70,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 67,
            "column": 13,
            "file": "thrust/mr/memory_resource.h",
            "line": 67
          },
          "name": "allocate",
          "override": false,
          "paramList": [
            {
              "name": "bytes",
              "text": "size, in bytes, that is requested from this allocation "
            },
            {
              "name": "alignment",
              "text": "alignment that is requested from this allocation "
            }
          ],
          "params": [
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::allocate",
          "refid": "classthrust_1_1mr_1_1memory__resource_1a60e0b2a6bd20537fff92b3a41ec5f2c2",
          "returns": [
            "A pointer to void to the newly allocated memory. "
          ],
          "static": false,
          "strong": false,
          "title": "allocate",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
          "typePlain": "pointer",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-allocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-deallocate",
          "argsString": "(pointer p, std::size_t bytes, std::size_t alignment=alignof(std::max_align_t))",
          "category": "functions",
          "const": false,
          "default": false,
          "definition": "void thrust::mr::memory_resource< Pointer >::deallocate",
          "deleted": false,
          "details": "Deallocates memory pointed to by <code>p</code>.",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::deallocate",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 83,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 80,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 80
          },
          "name": "deallocate",
          "override": false,
          "paramList": [
            {
              "name": "p",
              "text": "pointer to be deallocated "
            },
            {
              "name": "bytes",
              "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
            },
            {
              "name": "alignment",
              "text": "the alignment of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
            }
          ],
          "params": [
            {
              "name": "p",
              "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
              "typePlain": "pointer"
            },
            {
              "name": "bytes",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            },
            {
              "defval": "alignof(std::max_align_t)",
              "defvalPlain": "alignof(std::max_align_t)",
              "name": "alignment",
              "type": "std::size_t",
              "typePlain": "std::size_t"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::deallocate",
          "refid": "classthrust_1_1mr_1_1memory__resource_1a5153a93c858b588b4a1ea1e2ba7a489a",
          "static": false,
          "strong": false,
          "title": "deallocate",
          "type": "void",
          "typePlain": "void",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-deallocate",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-is-equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ __device__ bool thrust::mr::memory_resource< Pointer >::is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 95,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 92,
            "column": 10,
            "file": "thrust/mr/memory_resource.h",
            "line": 92
          },
          "name": "is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::is_equal",
          "refid": "classthrust_1_1mr_1_1memory__resource_1aa31ed2a7057d84f4e616498172875474",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "is_equal",
          "type": "__host__ __device__ bool",
          "typePlain": "__host__ __device__ bool",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-is-equal",
          "virtual": false,
          "visibility": "public"
        },
        {
          "abstract": false,
          "anchor": "#function-do-is-equal",
          "argsString": "(const memory_resource &other) const noexcept",
          "category": "functions",
          "const": true,
          "default": false,
          "definition": "__host__ virtual __device__ bool thrust::mr::memory_resource< Pointer >::do_is_equal",
          "deleted": false,
          "details": "Compares this resource to the other one. The default implementation uses identity comparison, which is often the right thing to do and doesn't require RTTI involvement.",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::do_is_equal",
          "hasDetails": true,
          "inline": true,
          "kind": "function",
          "language": "cpp",
          "location": {
            "bodyEnd": 126,
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 123,
            "column": 18,
            "file": "thrust/mr/memory_resource.h",
            "line": 123
          },
          "name": "do_is_equal",
          "override": false,
          "paramList": [
            {
              "name": "other",
              "text": "the other resource to compare this resource to "
            }
          ],
          "params": [
            {
              "name": "other",
              "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html\">memory_resource</a> &",
              "typePlain": "const memory_resource &"
            }
          ],
          "pureVirtual": false,
          "qualifiedname": "thrust::mr::memory_resource::do_is_equal",
          "refid": "classthrust_1_1mr_1_1memory__resource_1ab942189772873c162bb64103a6c85abb",
          "returns": [
            "whether the two resources are equivalent. "
          ],
          "static": false,
          "strong": false,
          "title": "do_is_equal",
          "type": "__host__ virtual __device__ bool",
          "typePlain": "__host__ virtual __device__ bool",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-do-is-equal",
          "virtual": true,
          "visibility": "public"
        }
      ],
      "publicTypes": [
        {
          "abstract": false,
          "anchor": "#typedef-pointer",
          "category": "types",
          "const": false,
          "definition": "typedef Pointer thrust::mr::memory_resource< Pointer >::pointer",
          "details": "Alias for the template parameter. ",
          "explicit": false,
          "fullname": "thrust::mr::memory_resource::pointer",
          "hasDetails": true,
          "inline": false,
          "kind": "typedef",
          "language": "cpp",
          "location": {
            "bodyFile": "thrust/mr/memory_resource.h",
            "bodyStart": 53,
            "column": 21,
            "file": "thrust/mr/memory_resource.h",
            "line": 53
          },
          "name": "pointer",
          "override": false,
          "qualifiedname": "thrust::mr::memory_resource::pointer",
          "refid": "classthrust_1_1mr_1_1memory__resource_1aba4c34d8cc07d59ce14fe6c30e92727e",
          "static": false,
          "strong": false,
          "title": "pointer",
          "type": "Pointer",
          "typePlain": "Pointer",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer",
          "visibility": "public"
        }
      ],
      "refid": "classthrust_1_1mr_1_1memory__resource",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html",
      "virtual": "non-virtual",
      "visibility": "public"
    }
  ],
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "Memory resource adaptor that turns any memory resource that returns a fancy with the same tag as <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code>, and adapts it to a resource that returns a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code>. ",
  "explicit": false,
  "fullname": "thrust::device_ptr_memory_resource",
  "hasAdditionalMembers": true,
  "hasDetails": true,
  "includes": "<thrust/device_allocator.h>",
  "inline": false,
  "kind": "class",
  "language": "cpp",
  "location": {
    "bodyEnd": 84,
    "bodyFile": "thrust/device_allocator.h",
    "bodyStart": 49,
    "column": 1,
    "file": "thrust/device_allocator.h",
    "line": 45
  },
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "allocators",
    "kind": "group",
    "language": "",
    "name": "allocators",
    "qualifiedname": "allocators",
    "refid": "group__allocators",
    "title": "Allocators",
    "url": "{{ site.baseurl }}/api/groups/group__allocators.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "language": "",
      "name": "memory_management",
      "qualifiedname": "memory_management",
      "refid": "group__memory__management",
      "title": "Memory Management",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "allocators",
      "kind": "group",
      "language": "",
      "name": "allocators",
      "qualifiedname": "allocators",
      "refid": "group__allocators",
      "title": "Allocators",
      "url": "{{ site.baseurl }}/api/groups/group__allocators.html",
      "visibility": "public"
    }
  ],
  "name": "thrust::device_ptr_memory_resource",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "namespaces",
    "fullname": "thrust",
    "kind": "namespace",
    "language": "cpp",
    "name": "thrust",
    "qualifiedname": "thrust",
    "refid": "namespacethrust",
    "title": "thrust",
    "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust",
      "qualifiedname": "thrust",
      "refid": "namespacethrust",
      "title": "thrust",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html",
      "visibility": "public"
    }
  ],
  "privateAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-m-upstream",
      "category": "attributes",
      "const": false,
      "definition": "Upstream* thrust::device_ptr_memory_resource< Upstream >::m_upstream",
      "explicit": false,
      "fullname": "thrust::device_ptr_memory_resource::m_upstream",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/device_allocator.h",
        "bodyStart": 83,
        "column": 15,
        "file": "thrust/device_allocator.h",
        "line": 83
      },
      "name": "m_upstream",
      "override": false,
      "qualifiedname": "thrust::device_ptr_memory_resource::m_upstream",
      "refid": "classthrust_1_1device__ptr__memory__resource_1ad550cd123a88d3e95659add1f399e8df",
      "static": false,
      "strong": false,
      "title": "m_upstream",
      "type": "Upstream *",
      "typePlain": "Upstream *",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html#variable-m-upstream",
      "visibility": "private"
    }
  ],
  "privateTypes": [
    {
      "abstract": false,
      "anchor": "#typedef-upstream-ptr",
      "category": "types",
      "const": false,
      "definition": "typedef Upstream::pointer thrust::device_ptr_memory_resource< Upstream >::upstream_ptr",
      "explicit": false,
      "fullname": "thrust::device_ptr_memory_resource::upstream_ptr",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/device_allocator.h",
        "bodyStart": 50,
        "column": 40,
        "file": "thrust/device_allocator.h",
        "line": 50
      },
      "name": "upstream_ptr",
      "override": false,
      "qualifiedname": "thrust::device_ptr_memory_resource::upstream_ptr",
      "refid": "classthrust_1_1device__ptr__memory__resource_1afe5c88a9343ff6d552f9d020d3ddc0f6",
      "static": false,
      "strong": false,
      "title": "upstream_ptr",
      "type": "Upstream::pointer",
      "typePlain": "Upstream::pointer",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html#typedef-upstream-ptr",
      "visibility": "private"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-device-ptr-memory-resource",
      "argsString": "()",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ thrust::device_ptr_memory_resource< Upstream >::device_ptr_memory_resource",
      "deleted": false,
      "details": "Initialize the adaptor with the global instance of the upstream resource. Obtains the global instance by calling <code>get&#95;global&#95;resource</code>. ",
      "explicit": false,
      "fullname": "thrust::device_ptr_memory_resource::device_ptr_memory_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 59,
        "bodyFile": "thrust/device_allocator.h",
        "bodyStart": 57,
        "column": 5,
        "file": "thrust/device_allocator.h",
        "line": 57
      },
      "name": "device_ptr_memory_resource",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_ptr_memory_resource::device_ptr_memory_resource",
      "refid": "classthrust_1_1device__ptr__memory__resource_1afd1c31a4ba0bc8b597d7408e622e174c",
      "static": false,
      "strong": false,
      "title": "device_ptr_memory_resource",
      "type": "__host__",
      "typePlain": "__host__",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html#function-device-ptr-memory-resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-ptr-memory-resource",
      "argsString": "(Upstream *upstream)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ thrust::device_ptr_memory_resource< Upstream >::device_ptr_memory_resource",
      "deleted": false,
      "details": "Initialize the adaptor with an upstream resource.",
      "explicit": false,
      "fullname": "thrust::device_ptr_memory_resource::device_ptr_memory_resource",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 68,
        "bodyFile": "thrust/device_allocator.h",
        "bodyStart": 66,
        "column": 5,
        "file": "thrust/device_allocator.h",
        "line": 66
      },
      "name": "device_ptr_memory_resource",
      "override": false,
      "paramList": [
        {
          "name": "upstream",
          "text": "the upstream memory resource to adapt. "
        }
      ],
      "params": [
        {
          "name": "upstream",
          "type": "Upstream *",
          "typePlain": "Upstream *"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_ptr_memory_resource::device_ptr_memory_resource",
      "refid": "classthrust_1_1device__ptr__memory__resource_1a247b7b5df24394696cbaef13765d62cf",
      "static": false,
      "strong": false,
      "title": "device_ptr_memory_resource",
      "type": "__host__",
      "typePlain": "__host__",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html#function-device-ptr-memory-resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do-allocate",
      "argsString": "(std::size_t bytes, std::size_t alignment=alignof(std::max_align_t)) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual __host__ pointer thrust::device_ptr_memory_resource< Upstream >::do_allocate",
      "deleted": false,
      "details": "Allocates memory of size at least <code>bytes</code> and alignment at least <code>alignment</code>.",
      "exceptionsList": [
        {
          "name": "thrust::bad_alloc",
          "text": "when no memory with requested size and alignment can be allocated. "
        }
      ],
      "explicit": false,
      "fullname": "thrust::device_ptr_memory_resource::do_allocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 74,
        "bodyFile": "thrust/device_allocator.h",
        "bodyStart": 71,
        "column": 21,
        "file": "thrust/device_allocator.h",
        "line": 71
      },
      "name": "do_allocate",
      "override": true,
      "paramList": [
        {
          "name": "bytes",
          "text": "size, in bytes, that is requested from this allocation "
        },
        {
          "name": "alignment",
          "text": "alignment that is requested from this allocation "
        }
      ],
      "params": [
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "defval": "alignof(std::max_align_t)",
          "defvalPlain": "alignof(std::max_align_t)",
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_ptr_memory_resource::do_allocate",
      "refid": "classthrust_1_1device__ptr__memory__resource_1a1930acc0b8810af555142b05cf16ee1e",
      "reimplements": {
        "anchor": "#function-do-allocate",
        "category": "functions",
        "fullname": "thrust::mr::memory_resource::do_allocate",
        "kind": "function",
        "language": "cpp",
        "name": "do_allocate",
        "pureVirtual": true,
        "qualifiedname": "thrust::mr::memory_resource::do_allocate",
        "refid": "classthrust_1_1mr_1_1memory__resource_1affb0e7d04fa2e105440a35ce68758565",
        "title": "do_allocate",
        "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-do-allocate",
        "virtual": true,
        "visibility": "public"
      },
      "returns": [
        "A pointer to void to the newly allocated memory. "
      ],
      "static": false,
      "strong": false,
      "title": "do_allocate",
      "type": "__host__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
      "typePlain": "__host__ pointer",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html#function-do-allocate",
      "virtual": true,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-do-deallocate",
      "argsString": "(pointer p, std::size_t bytes, std::size_t alignment) override",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "virtual __host__ void thrust::device_ptr_memory_resource< Upstream >::do_deallocate",
      "deleted": false,
      "details": "Deallocates memory pointed to by <code>p</code>.",
      "explicit": false,
      "fullname": "thrust::device_ptr_memory_resource::do_deallocate",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 80,
        "bodyFile": "thrust/device_allocator.h",
        "bodyStart": 77,
        "column": 18,
        "file": "thrust/device_allocator.h",
        "line": 77
      },
      "name": "do_deallocate",
      "override": true,
      "paramList": [
        {
          "name": "p",
          "text": "pointer to be deallocated "
        },
        {
          "name": "bytes",
          "text": "the size of the allocation. This must be equivalent to the value of <code>bytes</code> that was passed to the allocation function that returned <code>p</code>. "
        },
        {
          "name": "alignment",
          "text": "the size of the allocation. This must be equivalent to the value of <code>alignment</code> that was passed to the allocation function that returned <code>p</code>. "
        }
      ],
      "params": [
        {
          "name": "p",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#typedef-pointer\">pointer</a>",
          "typePlain": "pointer"
        },
        {
          "name": "bytes",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        },
        {
          "name": "alignment",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_ptr_memory_resource::do_deallocate",
      "refid": "classthrust_1_1device__ptr__memory__resource_1a7068b983a4ebba1cf4ec27b75cb2570e",
      "reimplements": {
        "anchor": "#function-do-deallocate",
        "category": "functions",
        "fullname": "thrust::mr::memory_resource::do_deallocate",
        "kind": "function",
        "language": "cpp",
        "name": "do_deallocate",
        "pureVirtual": true,
        "qualifiedname": "thrust::mr::memory_resource::do_deallocate",
        "refid": "classthrust_1_1mr_1_1memory__resource_1ae4fd0eb8907fd516b469826532782cce",
        "title": "do_deallocate",
        "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html#function-do-deallocate",
        "virtual": true,
        "visibility": "public"
      },
      "static": false,
      "strong": false,
      "title": "do_deallocate",
      "type": "__host__ void",
      "typePlain": "__host__ void",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html#function-do-deallocate",
      "virtual": true,
      "visibility": "public"
    }
  ],
  "qualifiedname": "thrust::device_ptr_memory_resource",
  "refid": "classthrust_1_1device__ptr__memory__resource",
  "static": false,
  "strong": false,
  "templateParams": [
    {
      "name": "",
      "type": "typename Upstream",
      "typePlain": "typename Upstream"
    }
  ],
  "title": "thrust::device_ptr_memory_resource",
  "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html",
  "visibility": "public"
}