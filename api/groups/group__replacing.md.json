{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "replacing",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "transformations",
    "kind": "group",
    "language": "",
    "name": "transformations",
    "qualifiedname": "transformations",
    "refid": "group__transformations",
    "title": "Transformations",
    "url": "{{ site.baseurl }}/api/groups/group__transformations.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "transformations",
      "kind": "group",
      "language": "",
      "name": "transformations",
      "qualifiedname": "transformations",
      "refid": "group__transformations",
      "title": "Transformations",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html",
      "visibility": "public"
    }
  ],
  "name": "replacing",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "transformations",
    "kind": "group",
    "language": "",
    "name": "transformations",
    "qualifiedname": "transformations",
    "refid": "group__transformations",
    "title": "Transformations",
    "url": "{{ site.baseurl }}/api/groups/group__transformations.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "transformations",
      "kind": "group",
      "language": "",
      "name": "transformations",
      "qualifiedname": "transformations",
      "refid": "group__transformations",
      "title": "Transformations",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-replace",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::replace",
      "deleted": false,
      "details": "<code>replace</code> replaces every element in the range [first, last) equal to <code>old&#95;value</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>&#42;i == old&#95;value</code> then it performs the <code>assignment &#42;i = new&#95;value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace</code> to replace a value of interest in a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> with another using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::replace(thrust::device, A.begin(), A.end(), 1, 99);\n\n// A contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "replacing::replace",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 86
      },
      "name": "replace",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace <code>old&#95;value</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace",
      "refid": "group__replacing_1gab7ea3f4e1f8be8c59064addc42de84ff",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable>Assignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">EqualityComparable</a>, objects of <code>T</code> may be compared for equality with objects of <code>ForwardIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::replace",
      "deleted": false,
      "details": "<code>replace</code> replaces every element in the range [first, last) equal to <code>old&#95;value</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>&#42;i == old&#95;value</code> then it performs the <code>assignment &#42;i = new&#95;value</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace</code> to replace a value of interest in a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> with another.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::replace(A.begin(), A.end(), 1, 99);\n\n// A contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "replacing::replace",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 135
      },
      "name": "replace",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace <code>old&#95;value</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace",
      "refid": "group__replacing_1gaf4c7616600c8937aa31c73417cfb4f28",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable>Assignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">EqualityComparable</a>, objects of <code>T</code> may be compared for equality with objects of <code>ForwardIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>pred(&#42;i)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> negative elements with <code>0</code> using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nis_less_than_zero pred;\n\nthrust::replace_if(thrust::device, A.begin(), A.end(), pred, 0);\n\n// A contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "replacing::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 200
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1ga9953891234efd44b09942f7d6381ff79",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(ForwardIterator first, ForwardIterator last, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>pred(&#42;i)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> negative elements with <code>0</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n...\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nis_less_than_zero pred;\n\nthrust::replace_if(A.begin(), A.end(), pred, 0);\n\n// A contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "replacing::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 260
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1ga1e1d314818b9b40f1275b5f55c63c051",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred(&#42;s)</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code> in the range <code>[first, last)</code>, and <code>s</code> in the range <code>[stencil, stencil + (last - first))</code>, if <code>pred(&#42;s)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> element with <code>0</code> when its corresponding stencil element is less than zero using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nis_less_than_zero pred;\nthrust::replace_if(thrust::device, A.begin(), A.end(), S.begin(), pred, 0);\n\n// A contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "replacing::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 334
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1gabe789c5b1b5ee15b0448cfa97b55090d",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred(&#42;s)</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code> in the range <code>[first, last)</code>, and <code>s</code> in the range <code>[stencil, stencil + (last - first))</code>, if <code>pred(&#42;s)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> element with <code>0</code> when its corresponding stencil element is less than zero.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nis_less_than_zero pred;\nthrust::replace_if(A.begin(), A.end(), S.begin(), pred, 0);\n\n// A contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "replacing::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 403
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1gab28032fbed8f5be6650b7a7a435e1e26",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::replace_copy",
      "deleted": false,
      "details": "<code>replace&#95;copy</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element equal to <code>old&#95;value</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>&#42;(first+n) == old&#95;value</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::device_vector<int> B(4);\n\nthrust::replace_copy(thrust::device, A.begin(), A.end(), B.begin(), 1, 99);\n\n// B contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "replacing::replace_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 463
      },
      "name": "replace_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The replacement value for which <code>&#42;i == old&#95;value</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy",
      "refid": "group__replacing_1gab119bc701dca7490c02e97485c6bd42d",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>copy</code>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, <code>T</code> may be compared for equality with <code>InputIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::replace_copy",
      "deleted": false,
      "details": "<code>replace&#95;copy</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element equal to <code>old&#95;value</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>&#42;(first+n) == old&#95;value</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::device_vector<int> B(4);\n\nthrust::replace_copy(A.begin(), A.end(), B.begin(), 1, 99);\n\n// B contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "replacing::replace_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 518
      },
      "name": "replace_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The replacement value for which <code>&#42;i == old&#95;value</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy",
      "refid": "group__replacing_1ga9b47b853ce90f513a977fce636681656",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>copy</code>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, <code>T</code> may be compared for equality with <code>InputIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "<code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element for which <code>pred</code> is <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that 0 <= n < last-first, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(first+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_copy_if(thrust::device, A.begin(), A.end(), B.begin(), pred, 0);\n\n// B contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "replacing::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 588
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign <code>pred(&#42;i)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1gadcf709bfffd7a4d7db6e5b1da251fc07",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "<code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element for which <code>pred</code> is <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that 0 <= n < last-first, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(first+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_copy_if(A.begin(), A.end(), B.begin(), pred, 0);\n\n// B contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "replacing::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 654
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign <code>pred(&#42;i)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1gaf3e557da5da45c911bb37a7d1c0a0001",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "This version of <code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element whose corresponding stencil element causes <code>pred</code> to be <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(stencil+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_if(thrust::device, A.begin(), A.end(), S.begin(), B.begin(), pred, 0);\n\n// B contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "replacing::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 732
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[stencil, stencil + (last - first))</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign when <code>pred(&#42;s)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the ranges <code>[stencil, stencil + (last - first))</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1ga1559ee22d3d642d29eccf2b049143851",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "This version of <code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element whose corresponding stencil element causes <code>pred</code> to be <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(stencil+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_if(A.begin(), A.end(), S.begin(), B.begin(), pred, 0);\n\n// B contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "replacing::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 806
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[stencil, stencil + (last - first))</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign when <code>pred(&#42;s)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the ranges <code>[stencil, stencil + (last - first))</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1gadc61d041bc9a1882ecbdc9daf92b0aa5",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "qualifiedname": "replacing",
  "refid": "group__replacing",
  "static": false,
  "strong": false,
  "title": "Replacing",
  "url": "{{ site.baseurl }}/api/groups/group__replacing.html",
  "visibility": "public"
}