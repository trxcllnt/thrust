{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "predicates",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "reductions",
    "kind": "group",
    "language": "",
    "name": "reductions",
    "qualifiedname": "reductions",
    "refid": "group__reductions",
    "title": "Reductions",
    "url": "{{ site.baseurl }}/api/groups/group__reductions.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "reductions",
      "kind": "group",
      "language": "",
      "name": "reductions",
      "qualifiedname": "reductions",
      "refid": "group__reductions",
      "title": "Reductions",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html",
      "visibility": "public"
    }
  ],
  "name": "predicates",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "reductions",
    "kind": "group",
    "language": "",
    "name": "reductions",
    "qualifiedname": "reductions",
    "refid": "group__reductions",
    "title": "Reductions",
    "url": "{{ site.baseurl }}/api/groups/group__reductions.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "reductions",
      "kind": "group",
      "language": "",
      "name": "reductions",
      "qualifiedname": "reductions",
      "refid": "group__reductions",
      "title": "Reductions",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-is-partitioned",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::is_partitioned",
      "deleted": false,
      "details": "<code>is&#95;partitioned</code> returns <code>true</code> if the given range is partitioned with respect to a predicate, and <code>false</code> otherwise.\n\nSpecifically, <code>is&#95;partitioned</code> returns <code>true</code> if <code>[first, last)</code> is empty of if <code>[first, last)</code> is partitioned by <code>pred</code>, i.e. if all elements that satisfy <code>pred</code> appear before those that do not.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint B[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\nthrust::is_partitioned(thrust::host, A, A + 10, is_even()); // returns true\nthrust::is_partitioned(thrust::host, B, B + 10, is_even()); // returns false\n```",
      "explicit": false,
      "fullname": "predicates::is_partitioned",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/partition.h",
        "line": 1376
      },
      "name": "is_partitioned",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_partitioned",
      "refid": "group__predicates_1ga7ede920c19e66387200c182e5f379520",
      "returns": [
        "<code>true</code> if the range <code>[first, last)</code> is partitioned with respect to <code>pred</code>, or if <code>[first, last)</code> is empty. <code>false</code>, otherwise."
      ],
      "see": [
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "is_partitioned",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-partitioned",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-partitioned",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::is_partitioned",
      "deleted": false,
      "details": "<code>is&#95;partitioned</code> returns <code>true</code> if the given range is partitioned with respect to a predicate, and <code>false</code> otherwise.\n\nSpecifically, <code>is&#95;partitioned</code> returns <code>true</code> if <code>[first, last)</code> is empty of if <code>[first, last)</code> is partitioned by <code>pred</code>, i.e. if all elements that satisfy <code>pred</code> appear before those that do not.\n\n\n\n```cpp\n#include <thrust/partition.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint B[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\nthrust::is_partitioned(A, A + 10, is_even()); // returns true\nthrust::is_partitioned(B, B + 10, is_even()); // returns false\n```",
      "explicit": false,
      "fullname": "predicates::is_partitioned",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/partition.h",
        "line": 1424
      },
      "name": "is_partitioned",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_partitioned",
      "refid": "group__predicates_1ga39f90d87ed0ed524e90551a1c97c71d0",
      "returns": [
        "<code>true</code> if the range <code>[first, last)</code> is partitioned with respect to <code>pred</code>, or if <code>[first, last)</code> is empty. <code>false</code>, otherwise."
      ],
      "see": [
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "is_partitioned",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-partitioned",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>&#42;(i + 1) &lt; &#42;i</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in ascending order using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/device_vector.h>\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nbool result = thrust::is_sorted(thrust::device, v.begin(), v.end());\n\n// result == false\n\nthrust::sort(v.begin(), v.end());\nresult = thrust::is_sorted(thrust::device, v.begin(), v.end());\n\n// result == true\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 999
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1ga1cf02f6a212f4f2e4998f517626e5e7c",
      "returns": [
        "<code>true</code>, if the sequence is sorted; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "is_sorted_until ",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering on objects of <code>ForwardIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "is_sorted",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>&#42;(i + 1) &lt; &#42;i</code> is <code>true</code>.\n\n\nThe following code demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in ascending order.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/device_vector.h>\n#include <thrust/sort.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nbool result = thrust::is_sorted(v.begin(), v.end());\n\n// result == false\n\nthrust::sort(v.begin(), v.end());\nresult = thrust::is_sorted(v.begin(), v.end());\n\n// result == true\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 1054
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1gaf221abd8c79d647c7957a66be19d68d6",
      "returns": [
        "<code>true</code>, if the sequence is sorted; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "is_sorted_until ",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering on objects of <code>ForwardIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "is_sorted",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order accoring to a user-defined comparison operation, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>comp(&#42;(i + 1), &#42;i)</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in descending order using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nthrust::greater<int> comp;\nbool result = thrust::is_sorted(thrust::device, v.begin(), v.end(), comp);\n\n// result == false\n\nthrust::sort(v.begin(), v.end(), comp);\nresult = thrust::is_sorted(thrust::device, v.begin(), v.end(), comp);\n\n// result == true\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 1114
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1ga37d50b9c53e68645a139658a8865032f",
      "returns": [
        "<code>true</code>, if the sequence is sorted according to comp; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order accoring to a user-defined comparison operation, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>comp(&#42;(i + 1), &#42;i)</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in descending order.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nthrust::greater<int> comp;\nbool result = thrust::is_sorted(v.begin(), v.end(), comp);\n\n// result == false\n\nthrust::sort(v.begin(), v.end(), comp);\nresult = thrust::is_sorted(v.begin(), v.end(), comp);\n\n// result == true\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 1169
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1gaa45997c2cf929bf5ddce1ca2e33d4769",
      "returns": [
        "<code>true</code>, if the sequence is sorted according to comp; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using <code>operator&lt;</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n\n...\n \nint A[8] = {0, 1, 2, 3, 0, 1, 2, 3};\n\nint * B = thrust::is_sorted_until(thrust::host, A, A + 8);\n\n// B - A is 4\n// [A, B) is sorted\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1215
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga781ed43754dbde1e48ad243a74f537a3",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using <code>operator&lt;</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted:\n\n\n\n```cpp\n#include <thrust/sort.h>\n\n...\n \nint A[8] = {0, 1, 2, 3, 0, 1, 2, 3};\n\nint * B = thrust::is_sorted_until(A, A + 8);\n\n// B - A is 4\n// [A, B) is sorted\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1254
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga2943fb1a51132798bb1b548a02874784",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using the function object <code>comp</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n\n...\n \nint A[8] = {3, 2, 1, 0, 3, 2, 1, 0};\n\nthrust::greater<int> comp;\nint * B = thrust::is_sorted_until(thrust::host, A, A + 8, comp);\n\n// B - A is 4\n// [A, B) is sorted in descending order\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1303
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization: "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "comp",
          "text": "The function object to use for comparison. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga72698c011192fd7ecf3ea887545b678a",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Compare's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using the function object <code>comp</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted in descending order:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n\n...\n \nint A[8] = {3, 2, 1, 0, 3, 2, 1, 0};\n\nthrust::greater<int> comp;\nint * B = thrust::is_sorted_until(A, A + 8, comp);\n\n// B - A is 4\n// [A, B) is sorted in descending order\n```",
      "explicit": false,
      "fullname": "predicates::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1347
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "comp",
          "text": "The function object to use for comparison. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga5587ccf7ee81a0f591567a1ae14c967f",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Compare's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "qualifiedname": "predicates",
  "refid": "group__predicates",
  "static": false,
  "strong": false,
  "title": "Predicates",
  "url": "{{ site.baseurl }}/api/groups/group__predicates.html",
  "visibility": "public"
}