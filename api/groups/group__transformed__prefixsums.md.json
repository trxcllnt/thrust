{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "transformed_prefixsums",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "prefixsums",
    "kind": "group",
    "language": "",
    "name": "prefixsums",
    "qualifiedname": "prefixsums",
    "refid": "group__prefixsums",
    "title": "Prefix Sums",
    "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "prefixsums",
      "kind": "group",
      "language": "",
      "name": "prefixsums",
      "qualifiedname": "prefixsums",
      "refid": "group__prefixsums",
      "title": "Prefix Sums",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html",
      "visibility": "public"
    }
  ],
  "name": "transformed_prefixsums",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "prefixsums",
    "kind": "group",
    "language": "",
    "name": "prefixsums",
    "qualifiedname": "prefixsums",
    "refid": "group__prefixsums",
    "title": "Prefix Sums",
    "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "prefixsums",
      "kind": "group",
      "language": "",
      "name": "prefixsums",
      "qualifiedname": "prefixsums",
      "refid": "group__prefixsums",
      "title": "Prefix Sums",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-transform-inclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform_inclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;inclusive&#95;scan</code> fuses the <code>transform</code> and <code>inclusive&#95;scan</code> operations. <code>transform&#95;inclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>inclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;inclusive&#95;scan</code>, <code>unary&#95;op(&#42;first)</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(unary&#95;op(&#42;first), unary&#95;op(&#42;(first + 1)))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;inclusive&#95;scan</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_inclusive_scan(thrust::host, data, data + 6, data, unary_op, binary_op); // in-place scan\n\n// data is now {-1, -1, -3, -5, -6, -9}\n```",
      "explicit": false,
      "fullname": "transformed_prefixsums::transform_inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 105
      },
      "name": "transform_inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_inclusive_scan",
      "refid": "group__transformed__prefixsums_1ga88fdc1014d4c4a23995d1730e24ef919",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>inclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_inclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-inclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform_inclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;inclusive&#95;scan</code> fuses the <code>transform</code> and <code>inclusive&#95;scan</code> operations. <code>transform&#95;inclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>inclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;inclusive&#95;scan</code>, <code>unary&#95;op(&#42;first)</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(unary&#95;op(&#42;first), unary&#95;op(&#42;(first + 1)))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;inclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_inclusive_scan(data, data + 6, data, unary_op, binary_op); // in-place scan\n\n// data is now {-1, -1, -3, -5, -6, -9}\n```",
      "explicit": false,
      "fullname": "transformed_prefixsums::transform_inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 166
      },
      "name": "transform_inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_inclusive_scan",
      "refid": "group__transformed__prefixsums_1ga43b2cc02bd9eb63380268d37d53f8d89",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>inclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_inclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-exclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, T init, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform_exclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;exclusive&#95;scan</code> fuses the <code>transform</code> and <code>exclusive&#95;scan</code> operations. <code>transform&#95;exclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>exclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;exclusive&#95;scan</code>, <code>init</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(init, unary&#95;op(&#42;first))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;exclusive&#95;scan</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_exclusive_scan(thrust::host, data, data + 6, data, unary_op, 4, binary_op); // in-place scan\n\n// data is now {4, 3, 3, 1, -1, -2}\n```",
      "explicit": false,
      "fullname": "transformed_prefixsums::transform_exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 238
      },
      "name": "transform_exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value of the <code>exclusive&#95;scan</code>"
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_exclusive_scan",
      "refid": "group__transformed__prefixsums_1gaf67d66dbbff500349ff56671b9ee9c4b",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>exclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_exclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-exclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, T init, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform_exclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;exclusive&#95;scan</code> fuses the <code>transform</code> and <code>exclusive&#95;scan</code> operations. <code>transform&#95;exclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>exclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;exclusive&#95;scan</code>, <code>init</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(init, unary&#95;op(&#42;first))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;exclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_exclusive_scan(data, data + 6, data, unary_op, 4, binary_op); // in-place scan\n\n// data is now {4, 3, 3, 1, -1, -2}\n```",
      "explicit": false,
      "fullname": "transformed_prefixsums::transform_exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 303
      },
      "name": "transform_exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value of the <code>exclusive&#95;scan</code>"
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_exclusive_scan",
      "refid": "group__transformed__prefixsums_1ga2a7806bd3beb7530adefab85d3e3c587",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>exclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_exclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "qualifiedname": "transformed_prefixsums",
  "refid": "group__transformed__prefixsums",
  "static": false,
  "strong": false,
  "title": "Transformed Prefix Sums",
  "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html",
  "visibility": "public"
}