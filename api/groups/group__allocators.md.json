{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "allocators",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "memory_management",
    "kind": "group",
    "language": "",
    "name": "memory_management",
    "qualifiedname": "memory_management",
    "refid": "group__memory__management",
    "title": "Memory Management",
    "url": "{{ site.baseurl }}/api/groups/group__memory__management.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "language": "",
      "name": "memory_management",
      "qualifiedname": "memory_management",
      "refid": "group__memory__management",
      "title": "Memory Management",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html",
      "visibility": "public"
    }
  ],
  "name": "allocators",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "memory_management",
    "kind": "group",
    "language": "",
    "name": "memory_management",
    "qualifiedname": "memory_management",
    "refid": "group__memory__management",
    "title": "Memory Management",
    "url": "{{ site.baseurl }}/api/groups/group__memory__management.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "memory_management",
      "kind": "group",
      "language": "",
      "name": "memory_management",
      "qualifiedname": "memory_management",
      "refid": "group__memory__management",
      "title": "Memory Management",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html",
      "visibility": "public"
    }
  ],
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::mr::memory_resource< device_ptr< void > >",
          "refid": "classthrust_1_1mr_1_1memory__resource",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::device_ptr_memory_resource",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_ptr_memory_resource",
      "qualifiedname": "thrust::device_ptr_memory_resource",
      "refid": "classthrust_1_1device__ptr__memory__resource",
      "title": "thrust::device_ptr_memory_resource",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::mr::stateless_resource_allocator< T, device_ptr_memory_resource< device_memory_resource > >",
          "refid": "classthrust_1_1mr_1_1stateless__resource__allocator",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1stateless__resource__allocator.html",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": false,
          "name": "thrust::mr::allocator< T, Upstream >",
          "refid": "classthrust_1_1mr_1_1allocator",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": true,
          "name": "thrust::mr::validator< MR >",
          "virtual": "non-virtual",
          "visibility": "private"
        }
      ],
      "brief": "An allocator which creates new elements in memory accessible by devices. ",
      "category": "classes",
      "fullname": "thrust::device_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_allocator",
      "qualifiedname": "thrust::device_allocator",
      "refid": "classthrust_1_1device__allocator",
      "summary": "An allocator which creates new elements in memory accessible by devices. ",
      "title": "thrust::device_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::device_malloc_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_malloc_allocator",
      "qualifiedname": "thrust::device_malloc_allocator",
      "refid": "classthrust_1_1device__malloc__allocator",
      "title": "thrust::device_malloc_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__malloc__allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::device_new_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_new_allocator",
      "qualifiedname": "thrust::device_new_allocator",
      "refid": "classthrust_1_1device__new__allocator",
      "title": "thrust::device_new_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__new__allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::mr::validator< MR >",
          "virtual": "non-virtual",
          "visibility": "private"
        }
      ],
      "category": "classes",
      "fullname": "thrust::mr::allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::mr::allocator",
      "qualifiedname": "thrust::mr::allocator",
      "refid": "classthrust_1_1mr_1_1allocator",
      "title": "thrust::mr::allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::mr::allocator< T, Upstream >",
          "refid": "classthrust_1_1mr_1_1allocator",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": true,
          "name": "thrust::mr::validator< MR >",
          "virtual": "non-virtual",
          "visibility": "private"
        }
      ],
      "category": "classes",
      "fullname": "thrust::mr::stateless_resource_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::mr::stateless_resource_allocator",
      "qualifiedname": "thrust::mr::stateless_resource_allocator",
      "refid": "classthrust_1_1mr_1_1stateless__resource__allocator",
      "title": "thrust::mr::stateless_resource_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1stateless__resource__allocator.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const allocator< T, MR > &lhs, const allocator< T, MR > &rhs) noexcept",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::mr::operator==",
      "deleted": false,
      "details": "Compares the allocators for equality by comparing the underlying memory resources. ",
      "explicit": false,
      "fullname": "allocators::operator==",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "bodyEnd": 162,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 159,
        "column": 6,
        "file": "thrust/mr/allocator.h",
        "line": 159
      },
      "name": "operator==",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const allocator< T, MR > &",
          "typePlain": "const allocator< T, MR > &"
        },
        {
          "name": "rhs",
          "type": "const allocator< T, MR > &",
          "typePlain": "const allocator< T, MR > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::operator==",
      "refid": "group__allocators_1ga343219996d47f4d2b55c2b32b928fbbe",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename MR",
          "typePlain": "typename MR"
        }
      ],
      "title": "operator==",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__allocators.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const allocator< T, MR > &lhs, const allocator< T, MR > &rhs) noexcept",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::mr::operator!=",
      "deleted": false,
      "details": "Compares the allocators for inequality by comparing the underlying memory resources. ",
      "explicit": false,
      "fullname": "allocators::operator!=",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "bodyEnd": 170,
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 167,
        "column": 6,
        "file": "thrust/mr/allocator.h",
        "line": 167
      },
      "name": "operator!=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const allocator< T, MR > &",
          "typePlain": "const allocator< T, MR > &"
        },
        {
          "name": "rhs",
          "type": "const allocator< T, MR > &",
          "typePlain": "const allocator< T, MR > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mr::operator!=",
      "refid": "group__allocators_1gae8c095731767460b11aa8ef193a82d14",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename MR",
          "typePlain": "typename MR"
        }
      ],
      "title": "operator!=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__allocators.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#using-polymorphic-allocator",
      "category": "types",
      "const": false,
      "definition": "using thrust::mr::polymorphic_allocator = typedef allocator<T, polymorphic_adaptor_resource<Pointer> >",
      "explicit": false,
      "fullname": "allocators::polymorphic_allocator",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/mr/allocator.h",
        "bodyStart": 175,
        "column": 1,
        "file": "thrust/mr/allocator.h",
        "line": 175
      },
      "name": "polymorphic_allocator",
      "override": false,
      "qualifiedname": "thrust::mr::polymorphic_allocator",
      "refid": "group__allocators_1gaa3254521722da4dc78bc3ad9d8619ec0",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Pointer",
          "typePlain": "typename Pointer"
        }
      ],
      "title": "polymorphic_allocator",
      "type": "allocator< T, polymorphic_adaptor_resource< Pointer > >",
      "typePlain": "allocator< T, polymorphic_adaptor_resource< Pointer > >",
      "url": "{{ site.baseurl }}/api/groups/group__allocators.html#using-polymorphic-allocator",
      "visibility": "public"
    }
  ],
  "qualifiedname": "allocators",
  "refid": "group__allocators",
  "static": false,
  "strong": false,
  "title": "Allocators",
  "url": "{{ site.baseurl }}/api/groups/group__allocators.html",
  "visibility": "public"
}