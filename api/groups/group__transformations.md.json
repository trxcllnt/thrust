{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "transformations",
  "groups": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "filling",
      "kind": "group",
      "language": "",
      "name": "filling",
      "qualifiedname": "filling",
      "refid": "group__filling",
      "title": "Filling",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "modifying",
      "kind": "group",
      "language": "",
      "name": "modifying",
      "qualifiedname": "modifying",
      "refid": "group__modifying",
      "title": "Modifying",
      "url": "{{ site.baseurl }}/api/groups/group__modifying.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "replacing",
      "kind": "group",
      "language": "",
      "name": "replacing",
      "qualifiedname": "replacing",
      "refid": "group__replacing",
      "title": "Replacing",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html",
      "visibility": "public"
    }
  ],
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "language": "",
    "name": "algorithms",
    "qualifiedname": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "name": "transformations",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "algorithms",
    "kind": "group",
    "language": "",
    "name": "algorithms",
    "qualifiedname": "algorithms",
    "refid": "group__algorithms",
    "title": "Algorithms",
    "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, the difference of <code>&#42;i</code> and <code>&#42;(i - 1)</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses <code>operator-</code> to calculate differences.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the difference between adjacent elements of a range using the <code>thrust::device</code> execution policy:\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(thrust::device, d_data.begin(), d_data.end(), d_result.begin());\n\n// d_result is now [1, 1, -1, 1, -1, 1, -1, 1]\n```",
      "explicit": false,
      "fullname": "transformations::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 83
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1gaa41d309b53fa03bf13fe35a184148400",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x</code> - <code>is</code> defined, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>, and the return type of <code>x - y</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "adjacent_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, <code>binary&#95;op(&#42;i, &#42;(i - 1))</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses the binary function <code>binary&#95;op</code> to calculate differences.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the sum between adjacent elements of a range using the <code>thrust::device</code> execution policy:\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(thrust::device, d_data.begin(), d_data.end(), d_result.begin(), thrust::plus<int>());\n\n// d_result is now [1, 3, 3, 3, 3, 3, 3, 3]\n```",
      "explicit": false,
      "fullname": "transformations::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 138
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to compute differences. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1ga6b2e362d0872c6ec3622399c41bc9081",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction's",
          "text": "<code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "adjacent_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, the difference of <code>&#42;i</code> and <code>&#42;(i - 1)</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses <code>operator-</code> to calculate differences.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the difference between adjacent elements of a range.\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/device_vector.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(d_data.begin(), d_data.end(), d_result.begin());\n\n// d_result is now [1, 1, -1, 1, -1, 1, -1, 1]\n```",
      "explicit": false,
      "fullname": "transformations::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 186
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1gaecdeb69a74548f924e3a9de420a84516",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x</code> - <code>is</code> defined, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>, and the return type of <code>x - y</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "adjacent_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, <code>binary&#95;op(&#42;i, &#42;(i - 1))</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses the binary function <code>binary&#95;op</code> to calculate differences.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the sum between adjacent elements of a range.\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(d_data.begin(), d_data.end(), d_result.begin(), thrust::plus<int>());\n\n// d_result is now [1, 3, 3, 3, 3, 3, 3, 3]\n```",
      "explicit": false,
      "fullname": "transformations::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 234
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to compute differences. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1ga0a47f6c0431b0905eaccc7bc427af396",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction's",
          "text": "<code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "adjacent_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::generate",
      "deleted": false,
      "details": "<code>generate</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,last)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdlib>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate(thrust::host, v.begin(), v.end(), rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "transformations::generate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/generate.h",
        "line": 74
      },
      "name": "generate",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "last",
          "text": "The last element in the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,last)</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate",
      "refid": "group__transformations_1ga12910ae45ed109cf3eef7df63573e063",
      "see": [
        "generate_n ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "generate",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate",
      "argsString": "(ForwardIterator first, ForwardIterator last, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::generate",
      "deleted": false,
      "details": "<code>generate</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,last)</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code>.\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdlib>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate(v.begin(), v.end(), rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "transformations::generate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/generate.h",
        "line": 114
      },
      "name": "generate",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "last",
          "text": "The last element in the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,last)</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate",
      "refid": "group__transformations_1gaa6d990b511b9a2d92599d35bd58e7e9f",
      "see": [
        "generate_n ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "generate",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate-n",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, OutputIterator first, Size n, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::generate_n",
      "deleted": false,
      "details": "<code>generate&#95;n</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,first + n)</code>. The return value is <code>first + n</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdlib>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate_n(thrust::host, v.begin(), 10, rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "transformations::generate_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/generate.h",
        "line": 160
      },
      "name": "generate_n",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "n",
          "text": "The size of the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,first + n)</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate_n",
      "refid": "group__transformations_1ga13215ccf8a505b1dd1996b2ac3a52bd1",
      "see": [
        "generate ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Size",
          "text": "is an integral type (either signed or unsigned). "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "generate_n",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate-n",
      "argsString": "(OutputIterator first, Size n, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::generate_n",
      "deleted": false,
      "details": "<code>generate&#95;n</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,first + n)</code>. The return value is <code>first + n</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code>.\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <stdlib.h>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate_n(v.begin(), 10, rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "transformations::generate_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/generate.h",
        "line": 200
      },
      "name": "generate_n",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "n",
          "text": "The size of the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,first + n)</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate_n",
      "refid": "group__transformations_1gaed80b4c08f4ebbd7598cd2cea418e2b3",
      "see": [
        "generate ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Size",
          "text": "is an integral type (either signed or unsigned). "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "generate_n",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = (i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sequence.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(thrust::host, A, A + 10);\n// A is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```",
      "explicit": false,
      "fullname": "transformations::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 71
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga233a3db0c5031023c8e9385acd4b9759",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "sequence",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = (i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers.\n\n\n\n```cpp\n#include <thrust/sequence.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(A, A + 10);\n// A is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```",
      "explicit": false,
      "fullname": "transformations::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 107
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga08c1dd7914c155d5fed6458330af3443",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "sequence",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + (i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1 using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sequence.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(thrust::host, A, A + 10, 1);\n// A is now {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n```",
      "explicit": false,
      "fullname": "transformations::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 152
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga9d17b70466df6b9a57f94170935a03f8",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(ForwardIterator first, ForwardIterator last, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + (i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1.\n\n\n\n```cpp\n#include <thrust/sequence.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(A, A + 10, 1);\n// A is now {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n```",
      "explicit": false,
      "fullname": "transformations::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 192
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1gaee768044bec3b9efcc5b9f733ed9a6a5",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, T init, T step)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + step &#42; (i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1 with a step size of 3 using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sequence.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(thrust::host, A, A + 10, 1, 3);\n// A is now {1, 4, 7, 10, 13, 16, 19, 22, 25, 28}\n```",
      "explicit": false,
      "fullname": "transformations::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 239
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers "
        },
        {
          "name": "step",
          "text": "The difference between consecutive elements."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "step",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga78a51c44c687267fd12436ed65a2009f",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(ForwardIterator first, ForwardIterator last, T init, T step)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + step &#42; (i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1 with a step size of 3.\n\n\n\n```cpp\n#include <thrust/sequence.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(A, A + 10, 1, 3);\n// A is now {1, 4, 7, 10, 13, 16, 19, 22, 25, 28}\n```",
      "explicit": false,
      "fullname": "transformations::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 281
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers "
        },
        {
          "name": "step",
          "text": "The difference between consecutive elements."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "step",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga57eb3695750a80676b34c9e7302535da",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tabulate",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, UnaryOperation unary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::tabulate",
      "deleted": false,
      "details": "<code>tabulate</code> fills the range <code>[first, last)</code> with the value of a function applied to each element's index.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, <code>tabulate</code> performs the assignment <code>&#42;i = unary&#95;op(i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>tabulate</code> to generate the first <code>n</code> non-positive integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/tabulate.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::tabulate(thrust::host, A, A + 10, thrust::negate<int>());\n// A is now {0, -1, -2, -3, -4, -5, -6, -7, -8, -9}\n```",
      "explicit": false,
      "fullname": "transformations::tabulate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/tabulate.h",
        "line": 75
      },
      "name": "tabulate",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range. "
        },
        {
          "name": "last",
          "text": "The end of the range. "
        },
        {
          "name": "unary_op",
          "text": "The unary operation to apply."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryOperation",
          "typePlain": "UnaryOperation"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tabulate",
      "refid": "group__transformations_1ga0408227dba108ecd776cf306106c58a3",
      "see": [
        "thrust::fill ",
        "thrust::generate ",
        "thrust::sequence "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryOperation",
          "typePlain": "typename UnaryOperation"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "UnaryOperation",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "tabulate",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-tabulate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tabulate",
      "argsString": "(ForwardIterator first, ForwardIterator last, UnaryOperation unary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::tabulate",
      "deleted": false,
      "details": "<code>tabulate</code> fills the range <code>[first, last)</code> with the value of a function applied to each element's index.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, <code>tabulate</code> performs the assignment <code>&#42;i = unary&#95;op(i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>tabulate</code> to generate the first <code>n</code> non-positive integers:\n\n\n\n```cpp\n#include <thrust/tabulate.h>\n#include <thrust/functional.h>\n...\nconst int N = 10;\nint A[N];\nthrust::tabulate(A, A + 10, thrust::negate<int>());\n// A is now {0, -1, -2, -3, -4, -5, -6, -7, -8, -9}\n```",
      "explicit": false,
      "fullname": "transformations::tabulate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 8,
        "file": "thrust/tabulate.h",
        "line": 115
      },
      "name": "tabulate",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range. "
        },
        {
          "name": "last",
          "text": "The end of the range. "
        },
        {
          "name": "unary_op",
          "text": "The unary operation to apply."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryOperation",
          "typePlain": "UnaryOperation"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tabulate",
      "refid": "group__transformations_1ga0ddf108cc4d1109addeed3251824f951",
      "see": [
        "thrust::fill ",
        "thrust::generate ",
        "thrust::sequence "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryOperation",
          "typePlain": "typename UnaryOperation"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "UnaryOperation",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "tabulate",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-tabulate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, UnaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first</code>, <code>last</code>) the operation <code>op(&#42;i)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform</code> to negate a range in-place using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::negate<int> op;\n\nthrust::transform(thrust::host, data, data + 10, data, op); // in-place transformation\n\n// data is now {5, 0, -2, 3, -2, -4, 0, 1, -2, -8};\n```",
      "explicit": false,
      "fullname": "transformations::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 90
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The transformation operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1ga281b2e453bfa53807eda1d71614fb504",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first</code>, <code>last</code>) the operation <code>op(&#42;i)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::negate<int> op;\n\nthrust::transform(data, data + 10, data, op); // in-place transformation\n\n// data is now {5, 0, -2, 3, -2, -4, 0, 1, -2, -8};\n```",
      "explicit": false,
      "fullname": "transformations::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 139
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1gacbd546527729f24f27dc44e34a5b8f73",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first1</code>, <code>last1</code>) and <code>j = first + (i - first1)</code> in the range [<code>first2</code>, <code>last2</code>) the operation <code>op(&#42;i,&#42;j)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform</code> to compute the sum of two ranges using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint input1[6] = {-5,  0,  2,  3,  2,  4};\nint input2[6] = { 3,  6, -2,  1,  2,  3};\nint output[6];\n\nthrust::plus<int> op;\n\nthrust::transform(thrust::host, input1, input1 + 6, input2, output, op);\n\n// output is now {-2,  6,  0,  4,  4,  7};\n```",
      "explicit": false,
      "fullname": "transformations::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 205
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1gacca2dd17ae9de2f7bcbb8da6d6f6fce4",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first1</code>, <code>last1</code>) and <code>j = first + (i - first1)</code> in the range [<code>first2</code>, <code>last2</code>) the operation <code>op(&#42;i,&#42;j)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint input1[6] = {-5,  0,  2,  3,  2,  4};\nint input2[6] = { 3,  6, -2,  1,  2,  3};\nint output[6];\n\nthrust::plus<int> op;\n\nthrust::transform(input1, input1 + 6, input2, output, op);\n\n// output is now {-2,  6,  0,  4,  4,  7};\n```",
      "explicit": false,
      "fullname": "transformations::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 264
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1ga68a3ba7d332887f1332ca3bc04453792",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in the input sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;i)</code> is evaluated. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if</code> to negate the odd-valued elements of a range using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nstruct is_odd\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x % 2;\n  }\n};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\n// negate odd elements\nthrust::transform_if(thrust::host, data, data + 10, data, op, is_odd()); // in-place transformation\n\n// data is now {5, 0, 2, 3, 2, 4, 0, 1, 2, 8};\n```",
      "explicit": false,
      "fullname": "transformations::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 342
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1gaaf162576bd1daef87b80ea82bfbf8558",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(InputIterator first, InputIterator last, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in the input sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;i)</code> is evaluated. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if:</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nstruct is_odd\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x % 2;\n  }\n};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\n// negate odd elements\nthrust::transform_if(data, data + 10, data, op, is_odd()); // in-place transformation\n\n// data is now {5, 0, 2, 3, 2, 4, 0, 1, 2, 8};\n```",
      "explicit": false,
      "fullname": "transformations::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 412
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga7a231d3ed7e33397e36a20f788a0548c",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satisfies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last - first) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\nint stencil[10] = { 1, 0, 1,  0, 1, 0, 1,  0, 1, 0};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(thrust::host, data, data + 10, stencil, data, op, identity); // in-place transformation\n\n// data is now {5, 0, -2, -3, -2,  4, 0, -1, -2,  8};\n```",
      "explicit": false,
      "fullname": "transformations::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 486
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga9db3a1a18f443a8d1bcc4132d8d03e15",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satisfies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last - first) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if:</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\nint stencil[10] = { 1, 0, 1,  0, 1, 0, 1,  0, 1, 0};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(data, data + 10, stencil, data, op, identity); // in-place transformation\n\n// data is now {5, 0, -2, -3, -2,  4, 0, -1, -2,  8};\n```",
      "explicit": false,
      "fullname": "transformations::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 553
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga4bee9c11e0802a939496b1a1dd048244",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator3 stencil, ForwardIterator result, BinaryFunction binary_op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first1, last1)</code> and <code>j = first2 + (i - first1)</code> in the range <code>[first2, first2 + (last1 - first1) )</code>, the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last1 - first1) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>binary&#95;op(&#42;i,&#42;j)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last1 - first1) )</code>. Otherwise, <code>binary&#95;op(&#42;i,&#42;j)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint input1[6]  = {-5,  0,  2,  3,  2,  4};\nint input2[6]  = { 3,  6, -2,  1,  2,  3};\nint stencil[8] = { 1,  0,  1,  0,  1,  0};\nint output[6];\n\nthrust::plus<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(thrust::host, input1, input1 + 6, input2, stencil, output, op, identity);\n\n// output is now {-2,  0,  0,  3,  4,  4};\n```",
      "explicit": false,
      "fullname": "transformations::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 634
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "binary_op",
          "text": "The transformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga37362347fdbe0d2bfeea1ef9a84a6aeb",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator3 stencil, ForwardIterator result, BinaryFunction binary_op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first1, last1)</code> and <code>j = first2 + (i - first1)</code> in the range <code>[first2, first2 + (last1 - first1) )</code>, the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last1 - first1) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>binary&#95;op(&#42;i,&#42;j)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last1 - first1) )</code>. Otherwise, <code>binary&#95;op(&#42;i,&#42;j)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if:</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint input1[6]  = {-5,  0,  2,  3,  2,  4};\nint input2[6]  = { 3,  6, -2,  1,  2,  3};\nint stencil[8] = { 1,  0,  1,  0,  1,  0};\nint output[6];\n\nthrust::plus<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(input1, input1 + 6, input2, stencil, output, op, identity);\n\n// output is now {-2,  0,  0,  3,  4,  4};\n```",
      "explicit": false,
      "fullname": "transformations::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 708
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "binary_op",
          "text": "The transformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga4cace41496814acafa048ff5e14034d1",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "qualifiedname": "transformations",
  "refid": "group__transformations",
  "static": false,
  "strong": false,
  "title": "Transformations",
  "url": "{{ site.baseurl }}/api/groups/group__transformations.html",
  "visibility": "public"
}