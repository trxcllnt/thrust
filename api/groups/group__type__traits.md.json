{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-thrust-proclaim-contiguous-iterator",
      "brief": "Declares that the iterator <code>Iterator</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a> by specializing <code>proclaim&#95;contiguous&#95;iterator</code>. ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "THRUST_PROCLAIM_CONTIGUOUS_ITERATOR",
      "hasDetails": true,
      "initializer": "  THRUST_NAMESPACE_BEGIN                                                      \\\n  template <>                                                                 \\\n  struct proclaim_contiguous_iterator<Iterator>                               \\\n      : THRUST_NS_QUALIFIER::true_type {};                                    \\\n  THRUST_NAMESPACE_END                                                        \\",
      "inline": false,
      "kind": "define",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 122,
        "column": 9,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 122
      },
      "name": "THRUST_PROCLAIM_CONTIGUOUS_ITERATOR",
      "override": false,
      "params": [
        {
          "name": "Iterator",
          "type": "",
          "typePlain": ""
        }
      ],
      "qualifiedname": "THRUST_PROCLAIM_CONTIGUOUS_ITERATOR",
      "refid": "group__type__traits_1ga6481610468498fdee166a05ec3f6e270",
      "see": [
        "is_contiguous_iterator ",
        "proclaim_contiguous_iterator "
      ],
      "static": false,
      "strong": false,
      "summary": "Declares that the iterator Iterator is ContiguousIterator by specializing proclaim_contiguous_iterator. ",
      "title": "THRUST_PROCLAIM_CONTIGUOUS_ITERATOR",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#define-thrust-proclaim-contiguous-iterator",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "type_traits",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "utility",
    "kind": "group",
    "language": "",
    "name": "utility",
    "qualifiedname": "utility",
    "refid": "group__utility",
    "title": "Utility",
    "url": "{{ site.baseurl }}/api/groups/group__utility.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "utility",
      "kind": "group",
      "language": "",
      "name": "utility",
      "qualifiedname": "utility",
      "refid": "group__utility",
      "title": "Utility",
      "url": "{{ site.baseurl }}/api/groups/group__utility.html",
      "visibility": "public"
    }
  ],
  "name": "type_traits",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "utility",
    "kind": "group",
    "language": "",
    "name": "utility",
    "qualifiedname": "utility",
    "refid": "group__utility",
    "title": "Utility",
    "url": "{{ site.baseurl }}/api/groups/group__utility.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "utility",
      "kind": "group",
      "language": "",
      "name": "utility",
      "qualifiedname": "utility",
      "refid": "group__utility",
      "title": "Utility",
      "url": "{{ site.baseurl }}/api/groups/group__utility.html",
      "visibility": "public"
    }
  ],
  "publicAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-is-contiguous-iterator-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_contiguous_iterator_v",
      "explicit": false,
      "fullname": "type_traits::is_contiguous_iterator_v",
      "hasDetails": true,
      "initializer": "= is_contiguous_iterator<Iterator>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 101,
        "column": 16,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 101
      },
      "name": "is_contiguous_iterator_v",
      "override": false,
      "qualifiedname": "thrust::is_contiguous_iterator_v",
      "refid": "group__type__traits_1ga1da323e7acfe527a28ea6bd940488584",
      "see": [
        "is_contiguous_iterator ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1proclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a>",
        "<a href=\"{{ site.baseurl }}/api/groups/group__type__traits.html#define-thrust-proclaim-contiguous-iterator\">THRUST_PROCLAIM_CONTIGUOUS_ITERATOR</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Iterator",
          "typePlain": "typename Iterator"
        }
      ],
      "title": "is_contiguous_iterator_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-contiguous-iterator-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-execution-policy-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is an _ExecutionPolicy_ and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_execution_policy_v",
      "explicit": false,
      "fullname": "type_traits::is_execution_policy_v",
      "hasDetails": true,
      "initializer": "= is_execution_policy<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_execution_policy.h",
        "bodyStart": 59,
        "column": 16,
        "file": "thrust/type_traits/is_execution_policy.h",
        "line": 59
      },
      "name": "is_execution_policy_v",
      "override": false,
      "qualifiedname": "thrust::is_execution_policy_v",
      "refid": "group__type__traits_1ga2bdbeb4d76c1629f2b2e2323ce10a556",
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is an ExecutionPolicy and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_execution_policy_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-execution-policy-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-less-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_less_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_less_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 91,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 90
      },
      "name": "is_operator_less_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_function_object_v",
      "refid": "group__type__traits_1ga38d413b5daee16a97fa7d9da9f3c4b29",
      "see": [
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator<, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-less-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-greater-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&gt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_greater_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_greater_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_greater_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 128,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 127
      },
      "name": "is_operator_greater_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_greater_function_object_v",
      "refid": "group__type__traits_1ga42415f71c7b50c51763edc7a3591a400",
      "see": [
        "is_operator_greater_function_object ",
        "is_operator_less_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator>, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_greater_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-greater-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-less-or-greater-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code> or <code>operator&gt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_less_or_greater_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_or_greater_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_less_or_greater_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 169,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 168
      },
      "name": "is_operator_less_or_greater_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_or_greater_function_object_v",
      "refid": "group__type__traits_1gac4884b2dd3b4d114ebc739d254c9d505",
      "see": [
        "is_operator_less_or_greater_function_object ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator< or operator>, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_or_greater_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-less-or-greater-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-plus-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/FunctionObject\">FunctionObject</a> equivalent to <code>operator&lt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_plus_function_object_v",
      "explicit": false,
      "fullname": "type_traits::is_operator_plus_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_plus_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_plus_function_object.h",
        "bodyStart": 88,
        "column": 16,
        "file": "thrust/type_traits/is_operator_plus_function_object.h",
        "line": 87
      },
      "name": "is_operator_plus_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_plus_function_object_v",
      "refid": "group__type__traits_1gad5d7207e2d28604f48cef2daccf1ed22",
      "see": [
        "is_operator_plus_function_object ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a FunctionObject equivalent to operator<, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_plus_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-plus-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-conjunction-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... && Ts::value)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::conjunction_v",
      "explicit": false,
      "fullname": "type_traits::conjunction_v",
      "hasDetails": true,
      "initializer": "= conjunction<Ts...>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 86,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 86
      },
      "name": "conjunction_v",
      "override": false,
      "qualifiedname": "thrust::conjunction_v",
      "refid": "group__type__traits_1gad5aef36eee458ee3490adee771949a9d",
      "see": [
        "conjunction ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html\">conjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... && Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "conjunction_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-conjunction-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-disjunction-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... || Ts::value)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::disjunction_v",
      "explicit": false,
      "fullname": "type_traits::disjunction_v",
      "hasDetails": true,
      "initializer": "= disjunction<Ts...>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 128,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 128
      },
      "name": "disjunction_v",
      "override": false,
      "qualifiedname": "thrust::disjunction_v",
      "refid": "group__type__traits_1ga6e27bc0bc00c7225bf3721a1e9a69c0a",
      "see": [
        "disjunction ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html\">disjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... || Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "disjunction_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-disjunction-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-negation-v",
      "brief": "<code>constexpr bool</code> whose value is <code>!Ts::value</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::negation_v",
      "explicit": false,
      "fullname": "type_traits::negation_v",
      "hasDetails": true,
      "initializer": "= negation<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 163,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 163
      },
      "name": "negation_v",
      "override": false,
      "qualifiedname": "thrust::negation_v",
      "refid": "group__type__traits_1ga0edeb370ca2f79c4349d3ab396b9b2a8",
      "see": [
        "negation ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html\">negation_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "negation_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-negation-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-conjunction-value-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... && Bs)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::conjunction_value_v",
      "explicit": false,
      "fullname": "type_traits::conjunction_value_v",
      "hasDetails": true,
      "initializer": "= conjunction_value<Bs...>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 186,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 186
      },
      "name": "conjunction_value_v",
      "override": false,
      "qualifiedname": "thrust::conjunction_value_v",
      "refid": "group__type__traits_1ga2afe8abd5e2bbb4867f207afbacb9dbc",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html\">conjunction_value</a>",
        "conjunction ",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... && Bs). ",
      "templateParams": [
        {
          "name": "Bs",
          "type": "bool...",
          "typePlain": "bool..."
        }
      ],
      "title": "conjunction_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-conjunction-value-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-disjunction-value-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... || Bs)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::disjunction_value_v",
      "explicit": false,
      "fullname": "type_traits::disjunction_value_v",
      "hasDetails": true,
      "initializer": "= disjunction_value<Bs...>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 225,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 225
      },
      "name": "disjunction_value_v",
      "override": false,
      "qualifiedname": "thrust::disjunction_value_v",
      "refid": "group__type__traits_1ga8844a4aad02812ad7f3496a5a3924e0e",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html\">disjunction_value</a>",
        "disjunction ",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... || Bs). ",
      "templateParams": [
        {
          "name": "Bs",
          "type": "bool...",
          "typePlain": "bool..."
        }
      ],
      "title": "disjunction_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-disjunction-value-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-negation-value-v",
      "brief": "<code>constexpr bool</code> whose value is <code>!Ts::value</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::negation_value_v",
      "explicit": false,
      "fullname": "type_traits::negation_value_v",
      "hasDetails": true,
      "initializer": "= negation_value<B>::value",
      "inline": false,
      "kind": "variable",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 264,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 264
      },
      "name": "negation_value_v",
      "override": false,
      "qualifiedname": "thrust::negation_value_v",
      "refid": "group__type__traits_1gad5c5c72432414a0a50942d8a6f5898c0",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html\">negation_value</a>",
        "negation ",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "B",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "title": "negation_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-negation-value-v",
      "visibility": "public"
    }
  ],
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "false_type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "brief": "Customization point that can be customized to indicate that an iterator type <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory. ",
      "category": "classes",
      "fullname": "thrust::proclaim_contiguous_iterator",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::proclaim_contiguous_iterator",
      "qualifiedname": "thrust::proclaim_contiguous_iterator",
      "refid": "structthrust_1_1proclaim__contiguous__iterator",
      "summary": "Customization point that can be customized to indicate that an iterator type Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory. ",
      "title": "thrust::proclaim_contiguous_iterator",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1proclaim__contiguous__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... && Bs)</code>. ",
      "category": "classes",
      "fullname": "thrust::conjunction_value",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::conjunction_value",
      "qualifiedname": "thrust::conjunction_value",
      "refid": "structthrust_1_1conjunction__value",
      "summary": "std::integral_constant whose value is (... && Bs). ",
      "title": "thrust::conjunction_value",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... || Bs)</code>. ",
      "category": "classes",
      "fullname": "thrust::disjunction_value",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::disjunction_value",
      "qualifiedname": "thrust::disjunction_value",
      "refid": "structthrust_1_1disjunction__value",
      "summary": "std::integral_constant whose value is (... || Bs). ",
      "title": "thrust::disjunction_value",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>!Bs</code>. ",
      "category": "classes",
      "fullname": "thrust::negation_value",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::negation_value",
      "qualifiedname": "thrust::negation_value",
      "refid": "structthrust_1_1negation__value",
      "summary": "std::integral_constant whose value is !Bs. ",
      "title": "thrust::negation_value",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that removes <a href=\"https://en.cppreference.com/w/cpp/language/cv\">const-volatile qualifiers</a> and <a href=\"https://en.cppreference.com/w/cpp/language/reference\">references</a> from <code>T</code>. Equivalent to <code>remove&#95;cv&#95;t&lt;remove&#95;reference&#95;t&lt;T&gt;&gt;</code>. ",
      "category": "classes",
      "fullname": "thrust::remove_cvref",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::remove_cvref",
      "qualifiedname": "thrust::remove_cvref",
      "refid": "structthrust_1_1remove__cvref",
      "summary": "UnaryTypeTrait that removes const-volatile qualifiers and references from T. Equivalent to remove_cv_t<remove_reference_t<T>>. ",
      "title": "thrust::remove_cvref",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1remove__cvref.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::voider",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::voider",
      "qualifiedname": "thrust::voider",
      "refid": "structthrust_1_1voider",
      "title": "thrust::voider",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1voider.html",
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#using-integer-sequence",
      "brief": "A compile-time sequence of <a href=\"https://en.cppreference.com/w/cpp/language/constant_expression#Integral_constant_expression\">_integral constants_</a> of type <code>T</code> with values <code>Is...</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::integer_sequence = typedef std::integer_sequence<T, Is...>",
      "explicit": false,
      "fullname": "type_traits::integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 61,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 61
      },
      "name": "integer_sequence",
      "override": false,
      "qualifiedname": "thrust::integer_sequence",
      "refid": "group__type__traits_1ga6c50c39a0607c7530a6e81ab2a796c4e",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/language/constant_expression#Integral_constant_expression\">_integral constants_</a>",
        "index_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence ",
        "integer_sequence_push_front ",
        "integer_sequence_push_back ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::integer&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "A compile-time sequence of integral constants of type T with values Is.... ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Is",
          "type": "T...",
          "typePlain": "T..."
        }
      ],
      "title": "integer_sequence",
      "type": "std::integer_sequence< T, Is... >",
      "typePlain": "std::integer_sequence< T, Is... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-integer-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-index-sequence",
      "brief": "A compile-time sequence of type <a href=\"https://en.cppreference.com/w/cpp/types/size_t\">std::size_t</a> with values <code>Is...</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::index_sequence = typedef std::index_sequence<Is...>",
      "explicit": false,
      "fullname": "type_traits::index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 95,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 95
      },
      "name": "index_sequence",
      "override": false,
      "qualifiedname": "thrust::index_sequence",
      "refid": "group__type__traits_1gafbf6877cf7c76f7a9797c15e46ec126a",
      "see": [
        "integer_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence ",
        "integer_sequence_push_front ",
        "integer_sequence_push_back ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::index&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "A compile-time sequence of type std::size_t with values Is.... ",
      "templateParams": [
        {
          "name": "Is",
          "type": "std::size_t...",
          "typePlain": "std::size_t..."
        }
      ],
      "title": "index_sequence",
      "type": "std::index_sequence< Is... >",
      "typePlain": "std::index_sequence< Is... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-index-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-integer-sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>0, 1, 2, ..., N - 1</code> of type <code>T</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_integer_sequence = typedef std::make_integer_sequence<T, N>",
      "explicit": false,
      "fullname": "type_traits::make_integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 148,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 148
      },
      "name": "make_integer_sequence",
      "override": false,
      "qualifiedname": "thrust::make_integer_sequence",
      "refid": "group__type__traits_1ga0b61df4c9a80875b3f7aaa3ba0b09592",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_reversed_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::make&#95;integer&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements 0, 1, 2, ..., N - 1 of type T. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_integer_sequence",
      "type": "std::make_integer_sequence< T, N >",
      "typePlain": "std::make_integer_sequence< T, N >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-integer-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-index-sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>0, 1, 2, ..., N - 1</code> of type <a href=\"https://en.cppreference.com/w/cpp/types/size_t\">std::size_t</a>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_index_sequence = typedef std::make_index_sequence<N>",
      "explicit": false,
      "fullname": "type_traits::make_index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 210,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 210
      },
      "name": "make_index_sequence",
      "override": false,
      "qualifiedname": "thrust::make_index_sequence",
      "refid": "group__type__traits_1ga7208a6310979d8c3e642756cc88dba97",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_reversed_index_sequence ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::make&#95;index&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements 0, 1, 2, ..., N - 1 of type std::size_t. ",
      "templateParams": [
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_index_sequence",
      "type": "std::make_index_sequence< N >",
      "typePlain": "std::make_index_sequence< N >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-index-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-reversed-integer-sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>N - 1, N - 2, N - 3, ..., 0</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_reversed_integer_sequence = typedef typename detail::make_reversed_integer_sequence_impl<T, N>::type",
      "explicit": false,
      "fullname": "type_traits::make_reversed_integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 281,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 280
      },
      "name": "make_reversed_integer_sequence",
      "override": false,
      "qualifiedname": "thrust::make_reversed_integer_sequence",
      "refid": "group__type__traits_1ga902b3a0313d9d2dffe1b71785fbc17f7",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements N - 1, N - 2, N - 3, ..., 0. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_reversed_integer_sequence",
      "type": "typename detail::make_reversed_integer_sequence_impl< T, N >::type",
      "typePlain": "typename detail::make_reversed_integer_sequence_impl< T, N >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-reversed-integer-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-reversed-index-sequence",
      "brief": "Create a new <code>index&#95;sequence</code> with elements <code>N - 1, N - 2, N - 3, ..., 0</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_reversed_index_sequence = typedef make_reversed_integer_sequence<std::size_t, N>",
      "explicit": false,
      "fullname": "type_traits::make_reversed_index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 294,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 293
      },
      "name": "make_reversed_index_sequence",
      "override": false,
      "qualifiedname": "thrust::make_reversed_index_sequence",
      "refid": "group__type__traits_1gacd17444a4ddc93798cd0970207e2c1bc",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_reversed_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new index_sequence with elements N - 1, N - 2, N - 3, ..., 0. ",
      "templateParams": [
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_reversed_index_sequence",
      "type": "make_reversed_integer_sequence< std::size_t, N >",
      "typePlain": "make_reversed_integer_sequence< std::size_t, N >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-reversed-index-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-integer-sequence-push-front",
      "brief": "Add a new element to the front of an <code>integer&#95;sequence</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::integer_sequence_push_front = typedef typename detail::integer_sequence_push_front_impl<T, Value, Sequence>::type",
      "explicit": false,
      "fullname": "type_traits::integer_sequence_push_front",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 305,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 304
      },
      "name": "integer_sequence_push_front",
      "override": false,
      "qualifiedname": "thrust::integer_sequence_push_front",
      "refid": "group__type__traits_1ga30dd0858022330597b14a4c034e1936d",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Add a new element to the front of an integer_sequence. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Value",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "",
          "type": "typename Sequence",
          "typePlain": "typename Sequence"
        }
      ],
      "title": "integer_sequence_push_front",
      "type": "typename detail::integer_sequence_push_front_impl< T, Value, Sequence >::type",
      "typePlain": "typename detail::integer_sequence_push_front_impl< T, Value, Sequence >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-integer-sequence-push-front",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-integer-sequence-push-back",
      "brief": "Add a new element to the back of an <code>integer&#95;sequence</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::integer_sequence_push_back = typedef typename detail::integer_sequence_push_back_impl<T, Value, Sequence>::type",
      "explicit": false,
      "fullname": "type_traits::integer_sequence_push_back",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 316,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 315
      },
      "name": "integer_sequence_push_back",
      "override": false,
      "qualifiedname": "thrust::integer_sequence_push_back",
      "refid": "group__type__traits_1ga9a0f2c1da32b7b14180366265894c192",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Add a new element to the back of an integer_sequence. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Value",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "",
          "type": "typename Sequence",
          "typePlain": "typename Sequence"
        }
      ],
      "title": "integer_sequence_push_back",
      "type": "typename detail::integer_sequence_push_back_impl< T, Value, Sequence >::type",
      "typePlain": "typename detail::integer_sequence_push_back_impl< T, Value, Sequence >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-integer-sequence-push-back",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-contiguous-iterator",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_contiguous_iterator = typedef detail::is_contiguous_iterator_impl<Iterator>",
      "explicit": false,
      "fullname": "type_traits::is_contiguous_iterator",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 88,
        "column": 1,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 80
      },
      "name": "is_contiguous_iterator",
      "override": false,
      "qualifiedname": "thrust::is_contiguous_iterator",
      "refid": "group__type__traits_1gadb26491471e3c992c0872345ca374505",
      "see": [
        "is_contiguous_iterator_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1proclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a>",
        "<a href=\"{{ site.baseurl }}/api/groups/group__type__traits.html#define-thrust-proclaim-contiguous-iterator\">THRUST_PROCLAIM_CONTIGUOUS_ITERATOR</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Iterator",
          "typePlain": "typename Iterator"
        }
      ],
      "title": "is_contiguous_iterator",
      "type": "detail::is_contiguous_iterator_impl< Iterator >",
      "typePlain": "detail::is_contiguous_iterator_impl< Iterator >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-contiguous-iterator",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-execution-policy",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is an _ExecutionPolicy_ and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_execution_policy = typedef detail::is_base_of<detail::execution_policy_marker, T>",
      "explicit": false,
      "fullname": "type_traits::is_execution_policy",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_execution_policy.h",
        "bodyStart": 52,
        "column": 1,
        "file": "thrust/type_traits/is_execution_policy.h",
        "line": 44
      },
      "name": "is_execution_policy",
      "override": false,
      "qualifiedname": "thrust::is_execution_policy",
      "refid": "group__type__traits_1ga57dfd45858e619c47e025ed4951f28e8",
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is an ExecutionPolicy and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_execution_policy",
      "type": "detail::is_base_of< detail::execution_policy_marker, T >",
      "typePlain": "detail::is_base_of< detail::execution_policy_marker, T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-execution-policy",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-less-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_less_function_object = typedef detail::is_operator_less_function_object_impl<T>",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 77,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 69
      },
      "name": "is_operator_less_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_function_object",
      "refid": "group__type__traits_1ga89fa2cd21cf618ac3f6742e015347bd4",
      "see": [
        "is_operator_less_function_object_v ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator<, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_function_object",
      "type": "detail::is_operator_less_function_object_impl< T >",
      "typePlain": "detail::is_operator_less_function_object_impl< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-less-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-greater-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&gt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_greater_function_object = typedef detail::is_operator_greater_function_object_impl<T>",
      "explicit": false,
      "fullname": "type_traits::is_operator_greater_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 114,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 106
      },
      "name": "is_operator_greater_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_greater_function_object",
      "refid": "group__type__traits_1ga80899866447b02e95640aa86cb3b9d5b",
      "see": [
        "is_operator_greater_function_object_v ",
        "is_operator_less_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator>, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_greater_function_object",
      "type": "detail::is_operator_greater_function_object_impl< T >",
      "typePlain": "detail::is_operator_greater_function_object_impl< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-greater-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-less-or-greater-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code> or <code>operator&gt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_less_or_greater_function_object = typedef integral_constant< bool , detail::is_operator_less_function_object_impl<T>::value || detail::is_operator_greater_function_object_impl<T>::value >",
      "explicit": false,
      "fullname": "type_traits::is_operator_less_or_greater_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 155,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 143
      },
      "name": "is_operator_less_or_greater_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_or_greater_function_object",
      "refid": "group__type__traits_1ga04754b3985cf345f47aaca8068ca5d58",
      "see": [
        "is_operator_less_or_greater_function_object_v ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator< or operator>, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_or_greater_function_object",
      "type": "integral_constant< bool, detail::is_operator_less_function_object_impl< T >::value||detail::is_operator_greater_function_object_impl< T >::value >",
      "typePlain": "integral_constant< bool, detail::is_operator_less_function_object_impl< T >::value||detail::is_operator_greater_function_object_impl< T >::value >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-less-or-greater-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-plus-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/FunctionObject\">FunctionObject</a> equivalent to <code>operator+</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_plus_function_object = typedef detail::is_operator_plus_function_object_impl<T>",
      "explicit": false,
      "fullname": "type_traits::is_operator_plus_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_plus_function_object.h",
        "bodyStart": 74,
        "column": 1,
        "file": "thrust/type_traits/is_operator_plus_function_object.h",
        "line": 66
      },
      "name": "is_operator_plus_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_plus_function_object",
      "refid": "group__type__traits_1ga4951501a3c7337be79222a966d1f9d73",
      "see": [
        "is_operator_plus_function_object_v ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a FunctionObject equivalent to operator+, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_plus_function_object",
      "type": "detail::is_operator_plus_function_object_impl< T >",
      "typePlain": "detail::is_operator_plus_function_object_impl< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-plus-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-conjunction",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... && Ts::value)</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::conjunction = typedef std::conjunction<Ts...>",
      "explicit": false,
      "fullname": "type_traits::conjunction",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 53,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 53
      },
      "name": "conjunction",
      "override": false,
      "qualifiedname": "thrust::conjunction",
      "refid": "group__type__traits_1gaa0ef198acfe55f8943097b334760c0f2",
      "see": [
        "conjunction_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html\">conjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is (... && Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "conjunction",
      "type": "std::conjunction< Ts... >",
      "typePlain": "std::conjunction< Ts... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-conjunction",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-disjunction",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... || Ts::value)</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::disjunction = typedef std::disjunction<Ts...>",
      "explicit": false,
      "fullname": "type_traits::disjunction",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 98,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 98
      },
      "name": "disjunction",
      "override": false,
      "qualifiedname": "thrust::disjunction",
      "refid": "group__type__traits_1ga9e44a8f527a2ce294a8b2d9e825482a7",
      "see": [
        "disjunction_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html\">disjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is (... || Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "disjunction",
      "type": "std::disjunction< Ts... >",
      "typePlain": "std::disjunction< Ts... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-disjunction",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-negation",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>!Ts::value</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::negation = typedef std::negation<T>",
      "explicit": false,
      "fullname": "type_traits::negation",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 140,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 140
      },
      "name": "negation",
      "override": false,
      "qualifiedname": "thrust::negation",
      "refid": "group__type__traits_1gabfb73a9048bbc5df1d3e362259815d16",
      "see": [
        "negation_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html\">negation_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "negation",
      "type": "std::negation< T >",
      "typePlain": "std::negation< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-negation",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-remove-cvref-t",
      "brief": "Type alias that removes <a href=\"https://en.cppreference.com/w/cpp/language/cv\">const-volatile qualifiers</a> and <a href=\"https://en.cppreference.com/w/cpp/language/reference\">references</a> from <code>T</code>. Equivalent to <code>remove&#95;cv&#95;t&lt;remove&#95;reference&#95;t&lt;T&gt;&gt;</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::remove_cvref_t = typedef typename remove_cvref<T>::type",
      "explicit": false,
      "fullname": "type_traits::remove_cvref_t",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "",
      "location": {
        "bodyFile": "thrust/type_traits/remove_cvref.h",
        "bodyStart": 87,
        "column": 1,
        "file": "thrust/type_traits/remove_cvref.h",
        "line": 87
      },
      "name": "remove_cvref_t",
      "override": false,
      "qualifiedname": "thrust::remove_cvref_t",
      "refid": "group__type__traits_1gaf0390a4006fdd059c926b129db486c4c",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cvref\">std::remove_cvref</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_cv</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_const</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_volatile</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_reference</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Type alias that removes const-volatile qualifiers and references from T. Equivalent to remove_cv_t<remove_reference_t<T>>. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "remove_cvref_t",
      "type": "typename remove_cvref< T >::type",
      "typePlain": "typename remove_cvref< T >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-remove-cvref-t",
      "visibility": "public"
    }
  ],
  "qualifiedname": "type_traits",
  "refid": "group__type__traits",
  "static": false,
  "strong": false,
  "title": "Type Traits",
  "url": "{{ site.baseurl }}/api/groups/group__type__traits.html",
  "visibility": "public"
}