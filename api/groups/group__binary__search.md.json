{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "binary_search",
  "groups": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "vectorized_binary_search",
      "kind": "group",
      "language": "",
      "name": "vectorized_binary_search",
      "qualifiedname": "vectorized_binary_search",
      "refid": "group__vectorized__binary__search",
      "title": "Vectorized Searches",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html",
      "visibility": "public"
    }
  ],
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "searching",
    "kind": "group",
    "language": "",
    "name": "searching",
    "qualifiedname": "searching",
    "refid": "group__searching",
    "title": "Searching",
    "url": "{{ site.baseurl }}/api/groups/group__searching.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "searching",
      "kind": "group",
      "language": "",
      "name": "searching",
      "qualifiedname": "searching",
      "refid": "group__searching",
      "title": "Searching",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html",
      "visibility": "public"
    }
  ],
  "name": "binary_search",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "searching",
    "kind": "group",
    "language": "",
    "name": "searching",
    "qualifiedname": "searching",
    "refid": "group__searching",
    "title": "Searching",
    "url": "{{ site.baseurl }}/api/groups/group__searching.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "searching",
      "kind": "group",
      "language": "",
      "name": "searching",
      "qualifiedname": "searching",
      "refid": "group__searching",
      "title": "Searching",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>&#42;j &lt; value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 0); // returns input.begin()\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 2); // returns input.begin() + 1\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 8); // returns input.begin() + 4\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 102
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1ga19da452d0b760bd927865ad2e0f45e41",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>&#42;i &lt; value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "lower_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>&#42;j &lt; value</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(input.begin(), input.end(), 0); // returns input.begin()\nthrust::lower_bound(input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 2); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::lower_bound(input.begin(), input.end(), 8); // returns input.begin() + 4\nthrust::lower_bound(input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 153
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1ga1e475b6887f3dcbbb1bc0f68225d0cac",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>&#42;i &lt; value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "lower_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(&#42;j, value)</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin()\nthrust::lower_bound(input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::lower_bound(input.begin(), input.end(), 8, thrust::less<int>()); // returns input.begin() + 4\nthrust::lower_bound(input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 213
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1ga2e37c6bda13e037d9b3b520c68944f0b",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(&#42;i, value)</code> is <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "lower_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(&#42;j, value)</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin()\nthrust::lower_bound(input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::lower_bound(input.begin(), input.end(), 8, thrust::less<int>()); // returns input.begin() + 4\nthrust::lower_bound(input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 269
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1gad1c957a4f437f5df70a86e13ea75ec5a",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(&#42;i, value)</code> is <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "lower_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>value &lt; &#42;j</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelism:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 0); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 2); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 8); // returns input.end()\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 327
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1gac00fd24a457a398e91c3d3822e02b95a",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>value &lt; &#42;i</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "upper_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>value &lt; &#42;j</code> is <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(input.begin(), input.end(), 0); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 2); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 8); // returns input.end()\nthrust::upper_bound(input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 379
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1ga5d3e8f2af56dde127de4d1c54782b525",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>value &lt; &#42;i</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "upper_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(value, &#42;j)</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 8, thrust::less<int>()); // returns input.end()\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 439
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1gaf15b752fcca8fff945c410c0887e2524",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(value, &#42;i)</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "upper_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(value, &#42;j)</code> is <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 8, thrust::less<int>()); // returns input.end()\nthrust::upper_bound(input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "binary_search::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 494
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1ga183fbd2f3d478f3e3d0dc97c5bce883b",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(value, &#42;i)</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "upper_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>&#42;i &lt; value</code> and <code>value &lt; &#42;i</code> are both <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(thrust::device, input.begin(), input.end(), 0); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 1); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 2); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 3); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 8); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 9); // returns false\n```",
      "explicit": false,
      "fullname": "binary_search::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 551
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1ga689a04a9abfba06932510eb0fa8d0b64",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "binary_search",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>&#42;i &lt; value</code> and <code>value &lt; &#42;i</code> are both <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(input.begin(), input.end(), 0); // returns true\nthrust::binary_search(input.begin(), input.end(), 1); // returns false\nthrust::binary_search(input.begin(), input.end(), 2); // returns true\nthrust::binary_search(input.begin(), input.end(), 3); // returns false\nthrust::binary_search(input.begin(), input.end(), 8); // returns true\nthrust::binary_search(input.begin(), input.end(), 9); // returns false\n```",
      "explicit": false,
      "fullname": "binary_search::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 602
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1gaca71baf79a6985712d8e5bdc1dcdbaa9",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "binary_search",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>comp(&#42;i, value)</code> and <code>comp(value, &#42;i)</code> are both <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(thrust::device, input.begin(), input.end(), 0, thrust::less<int>()); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 1, thrust::less<int>()); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 2, thrust::less<int>()); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 3, thrust::less<int>()); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 8, thrust::less<int>()); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 9, thrust::less<int>()); // returns false\n```",
      "explicit": false,
      "fullname": "binary_search::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 661
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1gad17ba23d363919d540e3eb74df841517",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "binary_search",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>comp(&#42;i, value)</code> and <code>comp(value, &#42;i)</code> are both <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(input.begin(), input.end(), 0, thrust::less<int>()); // returns true\nthrust::binary_search(input.begin(), input.end(), 1, thrust::less<int>()); // returns false\nthrust::binary_search(input.begin(), input.end(), 2, thrust::less<int>()); // returns true\nthrust::binary_search(input.begin(), input.end(), 3, thrust::less<int>()); // returns false\nthrust::binary_search(input.begin(), input.end(), 8, thrust::less<int>()); // returns true\nthrust::binary_search(input.begin(), input.end(), 9, thrust::less<int>()); // returns false\n```",
      "explicit": false,
      "fullname": "binary_search::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 716
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1gaeb34fdc9da32ad2baa270b51cb769712",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "binary_search",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>, where <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>&#42;k &lt; value</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, j)</code>, <code>value &lt; &#42;k</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>value &lt; &#42;k</code> nor <code>&#42;k &lt; value</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(thrust::device, input.begin(), input.end(), 0); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 1); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 2); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 3); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 8); // returns [input.begin() + 4, input.end)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 9); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "binary_search::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 787
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1ga476174bc9b4dbb8d6bda492524eff35f",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "equal_range",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>, where <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>&#42;k &lt; value</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, j)</code>, <code>value &lt; &#42;k</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>value &lt; &#42;k</code> nor <code>&#42;k &lt; value</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(input.begin(), input.end(), 0); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 1); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 2); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 3); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 8); // returns [input.begin() + 4, input.end)\nthrust::equal_range(input.begin(), input.end(), 9); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "binary_search::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 852
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1ga34d48d1d58e4f8bda543bc7f5ac480e0",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "equal_range",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>. <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>comp(&#42;k, value)</code> is <code>true</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, last)</code>, <code>comp(value, &#42;k)</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>comp(value, &#42;k)</code> nor <code>comp(&#42;k, value)</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(thrust::device, input.begin(), input.end(), 0, thrust::less<int>()); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 1, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 2, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 3, thrust::less<int>()); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 8, thrust::less<int>()); // returns [input.begin() + 4, input.end)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 9, thrust::less<int>()); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "binary_search::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 926
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1ga8eafaf792a190769792e3bae402ff4d1",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "equal_range",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>. <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>comp(&#42;k, value)</code> is <code>true</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, last)</code>, <code>comp(value, &#42;k)</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>comp(value, &#42;k)</code> nor <code>comp(&#42;k, value)</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(input.begin(), input.end(), 0, thrust::less<int>()); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 1, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 2, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 3, thrust::less<int>()); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 8, thrust::less<int>()); // returns [input.begin() + 4, input.end)\nthrust::equal_range(input.begin(), input.end(), 9, thrust::less<int>()); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "binary_search::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 996
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1gafd1dc2f2bc4ebd0da185a49bd70264ab",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "equal_range",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "qualifiedname": "binary_search",
  "refid": "group__binary__search",
  "static": false,
  "strong": false,
  "title": "Binary Search",
  "url": "{{ site.baseurl }}/api/groups/group__binary__search.html",
  "visibility": "public"
}