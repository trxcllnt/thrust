{
  "abstract": false,
  "anchor": "",
  "category": "modules",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "shuffling",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "group",
  "language": "",
  "module": {
    "anchor": "",
    "category": "modules",
    "fullname": "reordering",
    "kind": "group",
    "language": "",
    "name": "reordering",
    "qualifiedname": "reordering",
    "refid": "group__reordering",
    "title": "Reordering",
    "url": "{{ site.baseurl }}/api/groups/group__reordering.html",
    "visibility": "public"
  },
  "moduleBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "reordering",
      "kind": "group",
      "language": "",
      "name": "reordering",
      "qualifiedname": "reordering",
      "refid": "group__reordering",
      "title": "Reordering",
      "url": "{{ site.baseurl }}/api/groups/group__reordering.html",
      "visibility": "public"
    }
  ],
  "name": "shuffling",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "modules",
    "fullname": "reordering",
    "kind": "group",
    "language": "",
    "name": "reordering",
    "qualifiedname": "reordering",
    "refid": "group__reordering",
    "title": "Reordering",
    "url": "{{ site.baseurl }}/api/groups/group__reordering.html",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "modules",
      "fullname": "algorithms",
      "kind": "group",
      "language": "",
      "name": "algorithms",
      "qualifiedname": "algorithms",
      "refid": "group__algorithms",
      "title": "Algorithms",
      "url": "{{ site.baseurl }}/api/groups/group__algorithms.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "modules",
      "fullname": "reordering",
      "kind": "group",
      "language": "",
      "name": "reordering",
      "qualifiedname": "reordering",
      "refid": "group__reordering",
      "title": "Reordering",
      "url": "{{ site.baseurl }}/api/groups/group__reordering.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-shuffle",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomIterator first, RandomIterator last, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle",
      "deleted": false,
      "details": "<code>shuffle</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle</code> to create a random permutation using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\n#include <thrust/execution_policy.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle(thrust::host, A, A + N, g);\n// A is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "shuffling::shuffle",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 73
      },
      "name": "shuffle",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle",
      "refid": "group__shuffling_1ga7b5bab6de935c37b3acc18c991d22d30",
      "see": [
        "<code>shuffle&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-shuffle",
      "argsString": "(RandomIterator first, RandomIterator last, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle",
      "deleted": false,
      "details": "<code>shuffle</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle</code> to create a random permutation.\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle(A, A + N, g);\n// A is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "shuffling::shuffle",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 102
      },
      "name": "shuffle",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle",
      "refid": "group__shuffling_1gaf169d14ea32c6d6b6ae96b43e695cb42",
      "see": [
        "<code>shuffle&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-shuffle-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomIterator first, RandomIterator last, OutputIterator result, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle_copy",
      "deleted": false,
      "details": "shuffle_copy differs from shuffle only in that the reordered sequence is written to different output sequences, rather than in place. <code>shuffle&#95;copy</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle&#95;copy</code> to create a random permutation.\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\n#include <thrust/execution_policy.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle_copy(thrust::host, A, A + N, result, g);\n// result is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "shuffling::shuffle_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 140
      },
      "name": "shuffle_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "result",
          "text": "Destination of shuffled sequence "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle_copy",
      "refid": "group__shuffling_1gaa7e9ef2c184b27c93dbf76a5847a6cbc",
      "see": [
        "<code>shuffle</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle_copy",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-shuffle-copy",
      "argsString": "(RandomIterator first, RandomIterator last, OutputIterator result, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle_copy",
      "deleted": false,
      "details": "shuffle_copy differs from shuffle only in that the reordered sequence is written to different output sequences, rather than in place. <code>shuffle&#95;copy</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle&#95;copy</code> to create a random permutation.\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle_copy(A, A + N, result, g);\n// result is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "shuffling::shuffle_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 173
      },
      "name": "shuffle_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "result",
          "text": "Destination of shuffled sequence "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle_copy",
      "refid": "group__shuffling_1ga910781c28ec9c96cdd9c76167bf142dc",
      "see": [
        "<code>shuffle</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle_copy",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle-copy",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "qualifiedname": "shuffling",
  "refid": "group__shuffling",
  "static": false,
  "strong": false,
  "title": "Shuffling",
  "url": "{{ site.baseurl }}/api/groups/group__shuffling.html",
  "visibility": "public"
}