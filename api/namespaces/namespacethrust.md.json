{
  "abstract": false,
  "anchor": "",
  "category": "namespaces",
  "const": false,
  "definition": "",
  "explicit": false,
  "fullname": "thrust",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "namespace",
  "language": "cpp",
  "location": {
    "column": 1,
    "file": "thrust/addressof.h",
    "line": 14
  },
  "name": "thrust",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust::async",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::async",
      "qualifiedname": "thrust::async",
      "refid": "namespacethrust_1_1async",
      "title": "thrust::async",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1async.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::cpp</code> is a top-level alias for thrust::system::cpp. ",
      "category": "namespaces",
      "fullname": "thrust::cpp",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::cpp",
      "qualifiedname": "thrust::cpp",
      "refid": "namespacethrust_1_1cpp",
      "summary": "thrust::cpp is a top-level alias for thrust::system::cpp. ",
      "title": "thrust::cpp",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1cpp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust::cub",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::cub",
      "qualifiedname": "thrust::cub",
      "refid": "namespacethrust_1_1cub",
      "title": "thrust::cub",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1cub.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::cuda</code> is a top-level alias for <code>thrust::system::cuda</code>. ",
      "category": "namespaces",
      "fullname": "thrust::cuda",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::cuda",
      "qualifiedname": "thrust::cuda",
      "refid": "namespacethrust_1_1cuda",
      "summary": "thrust::cuda is a top-level alias for thrust::system::cuda. ",
      "title": "thrust::cuda",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1cuda.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust::cuda_cub",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::cuda_cub",
      "qualifiedname": "thrust::cuda_cub",
      "refid": "namespacethrust_1_1cuda__cub",
      "title": "thrust::cuda_cub",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1cuda__cub.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "\\exclude ",
      "category": "namespaces",
      "fullname": "thrust::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::detail",
      "qualifiedname": "thrust::detail",
      "refid": "namespacethrust_1_1detail",
      "summary": "\\exclude ",
      "title": "thrust::detail",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1detail.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::mr</code> is the namespace containing system agnostic types and functions for <code>memory&#95;resource</code> related functionalities. ",
      "category": "namespaces",
      "fullname": "thrust::mr",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::mr",
      "qualifiedname": "thrust::mr",
      "refid": "namespacethrust_1_1mr",
      "summary": "thrust::mr is the namespace containing system agnostic types and functions for memory_resource related functionalities. ",
      "title": "thrust::mr",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1mr.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::omp</code> is a top-level alias for thrust::system::omp. ",
      "category": "namespaces",
      "fullname": "thrust::omp",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::omp",
      "qualifiedname": "thrust::omp",
      "refid": "namespacethrust_1_1omp",
      "summary": "thrust::omp is a top-level alias for thrust::system::omp. ",
      "title": "thrust::omp",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1omp.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Facilities for constructing simple functions inline. ",
      "category": "namespaces",
      "fullname": "thrust::placeholders",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::placeholders",
      "qualifiedname": "thrust::placeholders",
      "refid": "namespacethrust_1_1placeholders",
      "summary": "Facilities for constructing simple functions inline. ",
      "title": "thrust::placeholders",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1placeholders.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::random</code> is the namespace which contains random number engine class templates, random number engine adaptor class templates, engines with predefined parameters, and random number distribution class templates. They are provided in a separate namespace for import convenience but are also aliased in the top-level <code>thrust</code> namespace for easy access. ",
      "category": "namespaces",
      "fullname": "thrust::random",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::random",
      "qualifiedname": "thrust::random",
      "refid": "namespacethrust_1_1random",
      "summary": "thrust::random is the namespace which contains random number engine class templates, random number engine adaptor class templates, engines with predefined parameters, and random number distribution class templates. They are provided in a separate namespace for import convenience but are also aliased in the top-level thrust namespace for easy access. ",
      "title": "thrust::random",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1random.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::system</code> is the namespace which contains specific Thrust backend systems. It also contains functionality for reporting error conditions originating from the operating system or other low-level application program interfaces such as the CUDA runtime. They are provided in a separate namespace for import convenience but are also aliased in the top-level <code>thrust</code> namespace for easy access. ",
      "category": "namespaces",
      "fullname": "thrust::system",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::system",
      "qualifiedname": "thrust::system",
      "refid": "namespacethrust_1_1system",
      "summary": "thrust::system is the namespace which contains specific Thrust backend systems. It also contains functionality for reporting error conditions originating from the operating system or other low-level application program interfaces such as the CUDA runtime. They are provided in a separate namespace for import convenience but are also aliased in the top-level thrust namespace for easy access. ",
      "title": "thrust::system",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1system.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>thrust::tbb</code> is a top-level alias for thrust::system::tbb. ",
      "category": "namespaces",
      "fullname": "thrust::tbb",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::tbb",
      "qualifiedname": "thrust::tbb",
      "refid": "namespacethrust_1_1tbb",
      "summary": "thrust::tbb is a top-level alias for thrust::system::tbb. ",
      "title": "thrust::tbb",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1tbb.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust::unimplemented",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::unimplemented",
      "qualifiedname": "thrust::unimplemented",
      "refid": "namespacethrust_1_1unimplemented",
      "title": "thrust::unimplemented",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1unimplemented.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust::unique_eager_event_type_detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::unique_eager_event_type_detail",
      "qualifiedname": "thrust::unique_eager_event_type_detail",
      "refid": "namespacethrust_1_1unique__eager__event__type__detail",
      "title": "thrust::unique_eager_event_type_detail",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1unique__eager__event__type__detail.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "thrust::unique_eager_future_type_detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "thrust::unique_eager_future_type_detail",
      "qualifiedname": "thrust::unique_eager_future_type_detail",
      "refid": "namespacethrust_1_1unique__eager__future__type__detail",
      "title": "thrust::unique_eager_future_type_detail",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust_1_1unique__eager__future__type__detail.html",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": null,
  "publicAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-host",
      "category": "attributes",
      "const": false,
      "definition": "const detail::host_t thrust::host",
      "details": "<code>thrust::host</code> is the default parallel execution policy associated with Thrust's host backend system configured by the <code>THRUST&#95;HOST&#95;SYSTEM</code> macro.\n\nInstead of relying on implicit algorithm dispatch through iterator system tags, users may directly target algorithm dispatch at Thrust's host system by providing <code>thrust::host</code> as an algorithm parameter.\n\nExplicit dispatch can be useful in avoiding the introduction of data copies into containers such as <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">thrust::host&#95;vector</a></code>.\n\nNote that even though <code>thrust::host</code> targets the host CPU, it is a parallel execution policy. That is, the order that an algorithm invokes functors or dereferences iterators is not defined.\n\nThe type of <code>thrust::host</code> is implementation-defined.\n\nThe following code snippet demonstrates how to use <code>thrust::host</code> to explicitly dispatch an invocation of <code>thrust::for&#95;each</code> to the host backend system:\n\n\n\n```cpp\n#include <thrust/for_each.h>\n#include <thrust/execution_policy.h>\n#include <cstdio>\n\nstruct printf_functor\n{\n  __host__ __device__\n  void operator()(int x)\n  {\n    printf(\"%d\\n\", x);\n  }\n};\n...\nint vec(3);\nvec[0] = 0; vec[1] = 1; vec[2] = 2;\n\nthrust::for_each(thrust::host, vec.begin(), vec.end(), printf_functor());\n\n// 0 1 2 is printed to standard output in some unspecified order\n```",
      "explicit": false,
      "fullname": "thrust::host",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/execution_policy.h",
        "bodyStart": 296,
        "column": 29,
        "file": "thrust/execution_policy.h",
        "line": 296
      },
      "name": "host",
      "override": false,
      "qualifiedname": "thrust::host",
      "refid": "group__execution__policies_1ga98394c05ebaaac46c17cf0ec970695e0",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1host__execution__policy.html\">host_execution_policy</a>",
        "thrust::device "
      ],
      "static": true,
      "strong": false,
      "title": "host",
      "type": "const detail::host_t",
      "typePlain": "const detail::host_t",
      "url": "{{ site.baseurl }}/api/groups/group__execution__policies.html#variable-host",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-device",
      "category": "attributes",
      "const": false,
      "definition": "THRUST_INLINE_CONSTANT detail::device_t thrust::device",
      "details": "<code>thrust::device</code> is the default parallel execution policy associated with Thrust's device backend system configured by the <code>THRUST&#95;DEVICE&#95;SYSTEM</code> macro.\n\nInstead of relying on implicit algorithm dispatch through iterator system tags, users may directly target algorithm dispatch at Thrust's device system by providing <code>thrust::device</code> as an algorithm parameter.\n\nExplicit dispatch can be useful in avoiding the introduction of data copies into containers such as <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">thrust::device&#95;vector</a></code> or to avoid wrapping e.g. raw pointers allocated by the CUDA API with types such as <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">thrust::device&#95;ptr</a></code>.\n\nThe user must take care to guarantee that the iterators provided to an algorithm are compatible with the device backend system. For example, raw pointers allocated by <code>std::malloc</code> typically cannot be dereferenced by a GPU. For this reason, raw pointers allocated by host APIs should not be mixed with a <code>thrust::device</code> algorithm invocation when the device backend is CUDA.\n\nThe type of <code>thrust::device</code> is implementation-defined.\n\nThe following code snippet demonstrates how to use <code>thrust::device</code> to explicitly dispatch an invocation of <code>thrust::for&#95;each</code> to the device backend system:\n\n\n\n```cpp\n#include <thrust/for_each.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdio>\n\nstruct printf_functor\n{\n  __host__ __device__\n  void operator()(int x)\n  {\n    printf(\"%d\\n\", x);\n  }\n};\n...\nthrust::device_vector<int> vec(3);\nvec[0] = 0; vec[1] = 1; vec[2] = 2;\n\nthrust::for_each(thrust::device, vec.begin(), vec.end(), printf_functor());\n\n// 0 1 2 is printed to standard output in some unspecified order\n```",
      "explicit": false,
      "fullname": "thrust::device",
      "hasDetails": true,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/execution_policy.h",
        "bodyStart": 345,
        "column": 41,
        "file": "thrust/execution_policy.h",
        "line": 345
      },
      "name": "device",
      "override": false,
      "qualifiedname": "thrust::device",
      "refid": "group__execution__policies_1ga330d16be82b0518b6a37d026c2811e7e",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1host__execution__policy.html\">host_execution_policy</a>",
        "thrust::device "
      ],
      "static": false,
      "strong": false,
      "title": "device",
      "type": "THRUST_INLINE_CONSTANT detail::device_t",
      "typePlain": "THRUST_INLINE_CONSTANT detail::device_t",
      "url": "{{ site.baseurl }}/api/groups/group__execution__policies.html#variable-device",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-new-stream",
      "category": "attributes",
      "const": false,
      "definition": "THRUST_INLINE_CONSTANT new_stream_t thrust::new_stream",
      "explicit": false,
      "fullname": "thrust::new_stream",
      "hasDetails": false,
      "initializer": "{}",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 166,
        "column": 37,
        "file": "thrust/future.h",
        "line": 166
      },
      "name": "new_stream",
      "override": false,
      "qualifiedname": "thrust::new_stream",
      "refid": "future_8h_1ab6b0d5a8e417f3977f8a86a4f3e82e9c",
      "static": false,
      "strong": false,
      "title": "new_stream",
      "type": "THRUST_INLINE_CONSTANT new_stream_t",
      "typePlain": "THRUST_INLINE_CONSTANT new_stream_t",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#variable-new-stream",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-in-place",
      "brief": "A tag to tell optional to construct its value in-place. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr in_place_t thrust::in_place",
      "explicit": false,
      "fullname": "thrust::in_place",
      "hasDetails": false,
      "initializer": "{}",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/optional.h",
        "bodyStart": 178,
        "column": 29,
        "file": "thrust/optional.h",
        "line": 178
      },
      "name": "in_place",
      "override": false,
      "qualifiedname": "thrust::in_place",
      "refid": "optional_8h_1a412a3c61b76030886ad93dc85b9892c9",
      "static": true,
      "strong": false,
      "summary": "A tag to tell optional to construct its value in-place. ",
      "title": "in_place",
      "type": "constexpr <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1in__place__t.html\">in_place_t</a>",
      "typePlain": "constexpr in_place_t",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#variable-in-place",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-nullopt",
      "brief": "Represents an empty optional \\synopsis static constexpr nullopt_t nullopt;. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr nullopt_t thrust::nullopt",
      "details": "_Examples_: \n\n```cpp\nthrust::optional<int> a = thrust::nullopt;\nvoid foo (thrust::optional<int>);\nfoo(thrust::nullopt); //pass an empty optional\n```",
      "explicit": false,
      "fullname": "thrust::nullopt",
      "hasDetails": true,
      "initializer": "{nullopt_t::do_not_use{},\n                                   nullopt_t::do_not_use{}}",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/optional.h",
        "bodyStart": 799,
        "column": 28,
        "file": "thrust/optional.h",
        "line": 799
      },
      "name": "nullopt",
      "override": false,
      "qualifiedname": "thrust::nullopt",
      "refid": "optional_8h_1a8132e11c36eb82e385eb30ba3471fd43",
      "static": true,
      "strong": false,
      "summary": "Represents an empty optional \\synopsis static constexpr nullopt_t nullopt;. ",
      "title": "nullopt",
      "type": "constexpr <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
      "typePlain": "constexpr nullopt_t",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#variable-nullopt",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-contiguous-iterator-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_contiguous_iterator_v",
      "explicit": false,
      "fullname": "thrust::is_contiguous_iterator_v",
      "hasDetails": true,
      "initializer": "= is_contiguous_iterator<Iterator>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 101,
        "column": 16,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 101
      },
      "name": "is_contiguous_iterator_v",
      "override": false,
      "qualifiedname": "thrust::is_contiguous_iterator_v",
      "refid": "group__type__traits_1ga1da323e7acfe527a28ea6bd940488584",
      "see": [
        "is_contiguous_iterator ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1proclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a>",
        "<a href=\"{{ site.baseurl }}/api/groups/group__type__traits.html#define-thrust-proclaim-contiguous-iterator\">THRUST_PROCLAIM_CONTIGUOUS_ITERATOR</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Iterator",
          "typePlain": "typename Iterator"
        }
      ],
      "title": "is_contiguous_iterator_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-contiguous-iterator-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-execution-policy-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is an _ExecutionPolicy_ and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_execution_policy_v",
      "explicit": false,
      "fullname": "thrust::is_execution_policy_v",
      "hasDetails": true,
      "initializer": "= is_execution_policy<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_execution_policy.h",
        "bodyStart": 59,
        "column": 16,
        "file": "thrust/type_traits/is_execution_policy.h",
        "line": 59
      },
      "name": "is_execution_policy_v",
      "override": false,
      "qualifiedname": "thrust::is_execution_policy_v",
      "refid": "group__type__traits_1ga2bdbeb4d76c1629f2b2e2323ce10a556",
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is an ExecutionPolicy and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_execution_policy_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-execution-policy-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-less-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_less_function_object_v",
      "explicit": false,
      "fullname": "thrust::is_operator_less_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_less_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 91,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 90
      },
      "name": "is_operator_less_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_function_object_v",
      "refid": "group__type__traits_1ga38d413b5daee16a97fa7d9da9f3c4b29",
      "see": [
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator<, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-less-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-greater-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&gt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_greater_function_object_v",
      "explicit": false,
      "fullname": "thrust::is_operator_greater_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_greater_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 128,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 127
      },
      "name": "is_operator_greater_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_greater_function_object_v",
      "refid": "group__type__traits_1ga42415f71c7b50c51763edc7a3591a400",
      "see": [
        "is_operator_greater_function_object ",
        "is_operator_less_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator>, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_greater_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-greater-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-less-or-greater-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code> or <code>operator&gt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_less_or_greater_function_object_v",
      "explicit": false,
      "fullname": "thrust::is_operator_less_or_greater_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_less_or_greater_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 169,
        "column": 16,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 168
      },
      "name": "is_operator_less_or_greater_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_or_greater_function_object_v",
      "refid": "group__type__traits_1gac4884b2dd3b4d114ebc739d254c9d505",
      "see": [
        "is_operator_less_or_greater_function_object ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a BinaryPredicate equivalent to operator< or operator>, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_or_greater_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-less-or-greater-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-is-operator-plus-function-object-v",
      "brief": "<code>constexpr bool</code> that is <code>true</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/FunctionObject\">FunctionObject</a> equivalent to <code>operator&lt;</code>, and <code>false</code> otherwise. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::is_operator_plus_function_object_v",
      "explicit": false,
      "fullname": "thrust::is_operator_plus_function_object_v",
      "hasDetails": true,
      "initializer": "= is_operator_plus_function_object<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_plus_function_object.h",
        "bodyStart": 88,
        "column": 16,
        "file": "thrust/type_traits/is_operator_plus_function_object.h",
        "line": 87
      },
      "name": "is_operator_plus_function_object_v",
      "override": false,
      "qualifiedname": "thrust::is_operator_plus_function_object_v",
      "refid": "group__type__traits_1gad5d7207e2d28604f48cef2daccf1ed22",
      "see": [
        "is_operator_plus_function_object ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool that is true if T is a FunctionObject equivalent to operator<, and false otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_plus_function_object_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-is-operator-plus-function-object-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-conjunction-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... && Ts::value)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::conjunction_v",
      "explicit": false,
      "fullname": "thrust::conjunction_v",
      "hasDetails": true,
      "initializer": "= conjunction<Ts...>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 86,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 86
      },
      "name": "conjunction_v",
      "override": false,
      "qualifiedname": "thrust::conjunction_v",
      "refid": "group__type__traits_1gad5aef36eee458ee3490adee771949a9d",
      "see": [
        "conjunction ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html\">conjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... && Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "conjunction_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-conjunction-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-disjunction-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... || Ts::value)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::disjunction_v",
      "explicit": false,
      "fullname": "thrust::disjunction_v",
      "hasDetails": true,
      "initializer": "= disjunction<Ts...>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 128,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 128
      },
      "name": "disjunction_v",
      "override": false,
      "qualifiedname": "thrust::disjunction_v",
      "refid": "group__type__traits_1ga6e27bc0bc00c7225bf3721a1e9a69c0a",
      "see": [
        "disjunction ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html\">disjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... || Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "disjunction_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-disjunction-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-negation-v",
      "brief": "<code>constexpr bool</code> whose value is <code>!Ts::value</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::negation_v",
      "explicit": false,
      "fullname": "thrust::negation_v",
      "hasDetails": true,
      "initializer": "= negation<T>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 163,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 163
      },
      "name": "negation_v",
      "override": false,
      "qualifiedname": "thrust::negation_v",
      "refid": "group__type__traits_1ga0edeb370ca2f79c4349d3ab396b9b2a8",
      "see": [
        "negation ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html\">negation_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "negation_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-negation-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-conjunction-value-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... && Bs)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::conjunction_value_v",
      "explicit": false,
      "fullname": "thrust::conjunction_value_v",
      "hasDetails": true,
      "initializer": "= conjunction_value<Bs...>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 186,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 186
      },
      "name": "conjunction_value_v",
      "override": false,
      "qualifiedname": "thrust::conjunction_value_v",
      "refid": "group__type__traits_1ga2afe8abd5e2bbb4867f207afbacb9dbc",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html\">conjunction_value</a>",
        "conjunction ",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... && Bs). ",
      "templateParams": [
        {
          "name": "Bs",
          "type": "bool...",
          "typePlain": "bool..."
        }
      ],
      "title": "conjunction_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-conjunction-value-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-disjunction-value-v",
      "brief": "<code>constexpr bool</code> whose value is <code>(... || Bs)</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::disjunction_value_v",
      "explicit": false,
      "fullname": "thrust::disjunction_value_v",
      "hasDetails": true,
      "initializer": "= disjunction_value<Bs...>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 225,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 225
      },
      "name": "disjunction_value_v",
      "override": false,
      "qualifiedname": "thrust::disjunction_value_v",
      "refid": "group__type__traits_1ga8844a4aad02812ad7f3496a5a3924e0e",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html\">disjunction_value</a>",
        "disjunction ",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is (... || Bs). ",
      "templateParams": [
        {
          "name": "Bs",
          "type": "bool...",
          "typePlain": "bool..."
        }
      ],
      "title": "disjunction_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-disjunction-value-v",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-negation-value-v",
      "brief": "<code>constexpr bool</code> whose value is <code>!Ts::value</code>. ",
      "category": "attributes",
      "const": false,
      "definition": "constexpr bool thrust::negation_value_v",
      "explicit": false,
      "fullname": "thrust::negation_value_v",
      "hasDetails": true,
      "initializer": "= negation_value<B>::value",
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 264,
        "column": 16,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 264
      },
      "name": "negation_value_v",
      "override": false,
      "qualifiedname": "thrust::negation_value_v",
      "refid": "group__type__traits_1gad5c5c72432414a0a50942d8a6f5898c0",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html\">negation_value</a>",
        "negation ",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "constexpr bool whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "B",
          "type": "bool",
          "typePlain": "bool"
        }
      ],
      "title": "negation_value_v",
      "type": "constexpr bool",
      "typePlain": "constexpr bool",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#variable-negation-value-v",
      "visibility": "public"
    }
  ],
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::allocator_delete",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::allocator_delete",
      "qualifiedname": "thrust::allocator_delete",
      "refid": "structthrust_1_1allocator__delete",
      "title": "thrust::allocator_delete",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1allocator__delete.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::array_allocator_delete",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::array_allocator_delete",
      "qualifiedname": "thrust::array_allocator_delete",
      "refid": "structthrust_1_1array__allocator__delete",
      "title": "thrust::array_allocator_delete",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1array__allocator__delete.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "std::exception",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::bad_optional_access",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::bad_optional_access",
      "qualifiedname": "thrust::bad_optional_access",
      "refid": "classthrust_1_1bad__optional__access",
      "title": "thrust::bad_optional_access",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1bad__optional__access.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::detail::iterator_category_with_system_and_traversal< std::bidirectional_iterator_tag, thrust::device_system_tag, thrust::bidirectional_traversal_tag >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::bidirectional_device_iterator_tag",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::bidirectional_device_iterator_tag",
      "qualifiedname": "thrust::bidirectional_device_iterator_tag",
      "refid": "structthrust_1_1bidirectional__device__iterator__tag",
      "title": "thrust::bidirectional_device_iterator_tag",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1bidirectional__device__iterator__tag.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::binary_function",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::binary_function",
      "qualifiedname": "thrust::binary_function",
      "refid": "structthrust_1_1binary__function",
      "title": "thrust::binary_function",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1binary__function.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::binary_function< Predicate::first_argument_type, Predicate::second_argument_type, bool >",
          "refid": "structthrust_1_1binary__function",
          "url": "{{ site.baseurl }}/api/classes/structthrust_1_1binary__function.html",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::binary_negate",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::binary_negate",
      "qualifiedname": "thrust::binary_negate",
      "refid": "structthrust_1_1binary__negate",
      "title": "thrust::binary_negate",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1binary__negate.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::binary_traits",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::binary_traits",
      "qualifiedname": "thrust::binary_traits",
      "refid": "structthrust_1_1binary__traits",
      "title": "thrust::binary_traits",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1binary__traits.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::bit_and",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::bit_and",
      "qualifiedname": "thrust::bit_and",
      "refid": "structthrust_1_1bit__and",
      "title": "thrust::bit_and",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1bit__and.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::bit_and< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::bit_and< void >",
      "qualifiedname": "thrust::bit_and< void >",
      "refid": "structthrust_1_1bit__and_3_01void_01_4",
      "title": "thrust::bit_and< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1bit__and_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::bit_or",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::bit_or",
      "qualifiedname": "thrust::bit_or",
      "refid": "structthrust_1_1bit__or",
      "title": "thrust::bit_or",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1bit__or.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::bit_or< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::bit_or< void >",
      "qualifiedname": "thrust::bit_or< void >",
      "refid": "structthrust_1_1bit__or_3_01void_01_4",
      "title": "thrust::bit_or< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1bit__or_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::bit_xor",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::bit_xor",
      "qualifiedname": "thrust::bit_xor",
      "refid": "structthrust_1_1bit__xor",
      "title": "thrust::bit_xor",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1bit__xor.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::bit_xor< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::bit_xor< void >",
      "qualifiedname": "thrust::bit_xor< void >",
      "refid": "structthrust_1_1bit__xor_3_01void_01_4",
      "title": "thrust::bit_xor< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1bit__xor_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::complex",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::complex",
      "qualifiedname": "thrust::complex",
      "refid": "structthrust_1_1complex",
      "title": "thrust::complex",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1complex.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... && Bs)</code>. ",
      "category": "classes",
      "fullname": "thrust::conjunction_value",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::conjunction_value",
      "qualifiedname": "thrust::conjunction_value",
      "refid": "structthrust_1_1conjunction__value",
      "summary": "std::integral_constant whose value is (... && Bs). ",
      "title": "thrust::conjunction_value",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::constant_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::constant_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::constant_iterator",
      "qualifiedname": "thrust::constant_iterator",
      "refid": "classthrust_1_1constant__iterator",
      "title": "thrust::constant_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::counting_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::counting_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::counting_iterator",
      "qualifiedname": "thrust::counting_iterator",
      "refid": "classthrust_1_1counting__iterator",
      "title": "thrust::counting_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1counting__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::mr::stateless_resource_allocator< T, device_ptr_memory_resource< device_memory_resource > >",
          "refid": "classthrust_1_1mr_1_1stateless__resource__allocator",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1stateless__resource__allocator.html",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": false,
          "name": "thrust::mr::allocator< T, Upstream >",
          "refid": "classthrust_1_1mr_1_1allocator",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": true,
          "name": "thrust::mr::validator< MR >",
          "virtual": "non-virtual",
          "visibility": "private"
        }
      ],
      "brief": "An allocator which creates new elements in memory accessible by devices. ",
      "category": "classes",
      "fullname": "thrust::device_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_allocator",
      "qualifiedname": "thrust::device_allocator",
      "refid": "classthrust_1_1device__allocator",
      "summary": "An allocator which creates new elements in memory accessible by devices. ",
      "title": "thrust::device_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::execution_policy< DerivedPolicy >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::device_execution_policy",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::device_execution_policy",
      "qualifiedname": "thrust::device_execution_policy",
      "refid": "structthrust_1_1device__execution__policy",
      "title": "thrust::device_execution_policy",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1device__execution__policy.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::device_malloc_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_malloc_allocator",
      "qualifiedname": "thrust::device_malloc_allocator",
      "refid": "classthrust_1_1device__malloc__allocator",
      "title": "thrust::device_malloc_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__malloc__allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::device_new_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_new_allocator",
      "qualifiedname": "thrust::device_new_allocator",
      "refid": "classthrust_1_1device__new__allocator",
      "title": "thrust::device_new_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__new__allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::pointer< T, thrust::device_system_tag, thrust::device_reference< T >, thrust::device_ptr< T > >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "brief": "<code>device&#95;ptr</code> is a pointer-like object which points to an object that resides in memory associated with the device system. ",
      "category": "classes",
      "fullname": "thrust::device_ptr",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_ptr",
      "qualifiedname": "thrust::device_ptr",
      "refid": "classthrust_1_1device__ptr",
      "summary": "device_ptr is a pointer-like object which points to an object that resides in memory associated with the device system. ",
      "title": "thrust::device_ptr",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::mr::memory_resource< device_ptr< void > >",
          "refid": "classthrust_1_1mr_1_1memory__resource",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1memory__resource.html",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::device_ptr_memory_resource",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_ptr_memory_resource",
      "qualifiedname": "thrust::device_ptr_memory_resource",
      "refid": "classthrust_1_1device__ptr__memory__resource",
      "title": "thrust::device_ptr_memory_resource",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr__memory__resource.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::reference< T, thrust::device_ptr< T >, thrust::device_reference< T > >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::device_reference",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_reference",
      "qualifiedname": "thrust::device_reference",
      "refid": "classthrust_1_1device__reference",
      "title": "thrust::device_reference",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::vector_base< T, thrust::device_allocator< T > >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::device_vector",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::device_vector",
      "qualifiedname": "thrust::device_vector",
      "refid": "classthrust_1_1device__vector",
      "title": "thrust::device_vector",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::discard_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::discard_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::discard_iterator",
      "qualifiedname": "thrust::discard_iterator",
      "refid": "classthrust_1_1discard__iterator",
      "title": "thrust::discard_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1discard__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... || Bs)</code>. ",
      "category": "classes",
      "fullname": "thrust::disjunction_value",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::disjunction_value",
      "qualifiedname": "thrust::disjunction_value",
      "refid": "structthrust_1_1disjunction__value",
      "summary": "std::integral_constant whose value is (... || Bs). ",
      "title": "thrust::disjunction_value",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::divides",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::divides",
      "qualifiedname": "thrust::divides",
      "refid": "structthrust_1_1divides",
      "title": "thrust::divides",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1divides.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::divides< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::divides< void >",
      "qualifiedname": "thrust::divides< void >",
      "refid": "structthrust_1_1divides_3_01void_01_4",
      "title": "thrust::divides< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1divides_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::equal_to",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::equal_to",
      "qualifiedname": "thrust::equal_to",
      "refid": "structthrust_1_1equal__to",
      "title": "thrust::equal_to",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1equal__to.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::equal_to< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::equal_to< void >",
      "qualifiedname": "thrust::equal_to< void >",
      "refid": "structthrust_1_1equal__to_3_01void_01_4",
      "title": "thrust::equal_to< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1equal__to_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::detail::iterator_category_with_system_and_traversal< std::forward_iterator_tag, thrust::device_system_tag, thrust::forward_traversal_tag >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::forward_device_iterator_tag",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::forward_device_iterator_tag",
      "qualifiedname": "thrust::forward_device_iterator_tag",
      "refid": "structthrust_1_1forward__device__iterator__tag",
      "title": "thrust::forward_device_iterator_tag",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1forward__device__iterator__tag.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::greater",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::greater",
      "qualifiedname": "thrust::greater",
      "refid": "structthrust_1_1greater",
      "title": "thrust::greater",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1greater.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::greater< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::greater< void >",
      "qualifiedname": "thrust::greater< void >",
      "refid": "structthrust_1_1greater_3_01void_01_4",
      "title": "thrust::greater< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1greater_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::greater_equal",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::greater_equal",
      "qualifiedname": "thrust::greater_equal",
      "refid": "structthrust_1_1greater__equal",
      "title": "thrust::greater_equal",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1greater__equal.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::greater_equal< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::greater_equal< void >",
      "qualifiedname": "thrust::greater_equal< void >",
      "refid": "structthrust_1_1greater__equal_3_01void_01_4",
      "title": "thrust::greater_equal< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1greater__equal_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::system::__THRUST_HOST_SYSTEM_NAMESPACE::execution_policy< DerivedPolicy >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::host_execution_policy",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::host_execution_policy",
      "qualifiedname": "thrust::host_execution_policy",
      "refid": "structthrust_1_1host__execution__policy",
      "title": "thrust::host_execution_policy",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1host__execution__policy.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::vector_base< T, std::allocator< T > >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::host_vector",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::host_vector",
      "qualifiedname": "thrust::host_vector",
      "refid": "classthrust_1_1host__vector",
      "title": "thrust::host_vector",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::identity",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::identity",
      "qualifiedname": "thrust::identity",
      "refid": "structthrust_1_1identity",
      "title": "thrust::identity",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1identity.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::identity< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::identity< void >",
      "qualifiedname": "thrust::identity< void >",
      "refid": "structthrust_1_1identity_3_01void_01_4",
      "title": "thrust::identity< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1identity_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "A tag type to tell optional to construct its value in-place. ",
      "category": "classes",
      "fullname": "thrust::in_place_t",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::in_place_t",
      "qualifiedname": "thrust::in_place_t",
      "refid": "structthrust_1_1in__place__t",
      "summary": "A tag type to tell optional to construct its value in-place. ",
      "title": "thrust::in_place_t",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1in__place__t.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::detail::iterator_category_with_system_and_traversal< std::input_iterator_tag, thrust::device_system_tag, thrust::single_pass_traversal_tag >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::input_device_iterator_tag",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::input_device_iterator_tag",
      "qualifiedname": "thrust::input_device_iterator_tag",
      "refid": "structthrust_1_1input__device__iterator__tag",
      "title": "thrust::input_device_iterator_tag",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1input__device__iterator__tag.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::iterator_adaptor_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::iterator_adaptor",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::iterator_adaptor",
      "qualifiedname": "thrust::iterator_adaptor",
      "refid": "classthrust_1_1iterator__adaptor",
      "title": "thrust::iterator_adaptor",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1iterator__adaptor.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_core_access",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::iterator_core_access",
      "qualifiedname": "thrust::iterator_core_access",
      "refid": "classthrust_1_1iterator__core__access",
      "title": "thrust::iterator_core_access",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1iterator__core__access.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_difference",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::iterator_difference",
      "qualifiedname": "thrust::iterator_difference",
      "refid": "structthrust_1_1iterator__difference",
      "title": "thrust::iterator_difference",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1iterator__difference.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_facade",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::iterator_facade",
      "qualifiedname": "thrust::iterator_facade",
      "refid": "classthrust_1_1iterator__facade",
      "title": "thrust::iterator_facade",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1iterator__facade.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_pointer",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::iterator_pointer",
      "qualifiedname": "thrust::iterator_pointer",
      "refid": "structthrust_1_1iterator__pointer",
      "title": "thrust::iterator_pointer",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1iterator__pointer.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_reference",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::iterator_reference",
      "qualifiedname": "thrust::iterator_reference",
      "refid": "structthrust_1_1iterator__reference",
      "title": "thrust::iterator_reference",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1iterator__reference.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_system",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::iterator_system",
      "qualifiedname": "thrust::iterator_system",
      "refid": "structthrust_1_1iterator__system",
      "title": "thrust::iterator_system",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1iterator__system.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "std::iterator_traits< T >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::iterator_traits",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::iterator_traits",
      "qualifiedname": "thrust::iterator_traits",
      "refid": "structthrust_1_1iterator__traits",
      "title": "thrust::iterator_traits",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_traversal",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::iterator_traversal",
      "qualifiedname": "thrust::iterator_traversal",
      "refid": "structthrust_1_1iterator__traversal",
      "title": "thrust::iterator_traversal",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traversal.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::iterator_value",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::iterator_value",
      "qualifiedname": "thrust::iterator_value",
      "refid": "structthrust_1_1iterator__value",
      "title": "thrust::iterator_value",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1iterator__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::less",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::less",
      "qualifiedname": "thrust::less",
      "refid": "structthrust_1_1less",
      "title": "thrust::less",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1less.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::less< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::less< void >",
      "qualifiedname": "thrust::less< void >",
      "refid": "structthrust_1_1less_3_01void_01_4",
      "title": "thrust::less< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1less_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::less_equal",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::less_equal",
      "qualifiedname": "thrust::less_equal",
      "refid": "structthrust_1_1less__equal",
      "title": "thrust::less_equal",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1less__equal.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::less_equal< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::less_equal< void >",
      "qualifiedname": "thrust::less_equal< void >",
      "refid": "structthrust_1_1less__equal_3_01void_01_4",
      "title": "thrust::less_equal< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1less__equal_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::logical_and",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::logical_and",
      "qualifiedname": "thrust::logical_and",
      "refid": "structthrust_1_1logical__and",
      "title": "thrust::logical_and",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1logical__and.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::logical_and< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::logical_and< void >",
      "qualifiedname": "thrust::logical_and< void >",
      "refid": "structthrust_1_1logical__and_3_01void_01_4",
      "title": "thrust::logical_and< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1logical__and_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::logical_not",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::logical_not",
      "qualifiedname": "thrust::logical_not",
      "refid": "structthrust_1_1logical__not",
      "title": "thrust::logical_not",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1logical__not.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::logical_not< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::logical_not< void >",
      "qualifiedname": "thrust::logical_not< void >",
      "refid": "structthrust_1_1logical__not_3_01void_01_4",
      "title": "thrust::logical_not< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1logical__not_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::logical_or",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::logical_or",
      "qualifiedname": "thrust::logical_or",
      "refid": "structthrust_1_1logical__or",
      "title": "thrust::logical_or",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1logical__or.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::logical_or< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::logical_or< void >",
      "qualifiedname": "thrust::logical_or< void >",
      "refid": "structthrust_1_1logical__or_3_01void_01_4",
      "title": "thrust::logical_or< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1logical__or_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::maximum",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::maximum",
      "qualifiedname": "thrust::maximum",
      "refid": "structthrust_1_1maximum",
      "title": "thrust::maximum",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1maximum.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::maximum< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::maximum< void >",
      "qualifiedname": "thrust::maximum< void >",
      "refid": "structthrust_1_1maximum_3_01void_01_4",
      "title": "thrust::maximum< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1maximum_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::minimum",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::minimum",
      "qualifiedname": "thrust::minimum",
      "refid": "structthrust_1_1minimum",
      "title": "thrust::minimum",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1minimum.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::minimum< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::minimum< void >",
      "qualifiedname": "thrust::minimum< void >",
      "refid": "structthrust_1_1minimum_3_01void_01_4",
      "title": "thrust::minimum< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1minimum_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::minus",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::minus",
      "qualifiedname": "thrust::minus",
      "refid": "structthrust_1_1minus",
      "title": "thrust::minus",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1minus.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::minus< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::minus< void >",
      "qualifiedname": "thrust::minus< void >",
      "refid": "structthrust_1_1minus_3_01void_01_4",
      "title": "thrust::minus< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1minus_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::modulus",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::modulus",
      "qualifiedname": "thrust::modulus",
      "refid": "structthrust_1_1modulus",
      "title": "thrust::modulus",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1modulus.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::modulus< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::modulus< void >",
      "qualifiedname": "thrust::modulus< void >",
      "refid": "structthrust_1_1modulus_3_01void_01_4",
      "title": "thrust::modulus< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1modulus_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Used to represent an optional with no data; essentially a bool. ",
      "category": "classes",
      "fullname": "thrust::monostate",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::monostate",
      "qualifiedname": "thrust::monostate",
      "refid": "classthrust_1_1monostate",
      "summary": "Used to represent an optional with no data; essentially a bool. ",
      "title": "thrust::monostate",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1monostate.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::multiplies",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::multiplies",
      "qualifiedname": "thrust::multiplies",
      "refid": "structthrust_1_1multiplies",
      "title": "thrust::multiplies",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1multiplies.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::multiplies< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::multiplies< void >",
      "qualifiedname": "thrust::multiplies< void >",
      "refid": "structthrust_1_1multiplies_3_01void_01_4",
      "title": "thrust::multiplies< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1multiplies_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::negate",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::negate",
      "qualifiedname": "thrust::negate",
      "refid": "structthrust_1_1negate",
      "title": "thrust::negate",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1negate.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::negate< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::negate< void >",
      "qualifiedname": "thrust::negate< void >",
      "refid": "structthrust_1_1negate_3_01void_01_4",
      "title": "thrust::negate< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1negate_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>!Bs</code>. ",
      "category": "classes",
      "fullname": "thrust::negation_value",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::negation_value",
      "qualifiedname": "thrust::negation_value",
      "refid": "structthrust_1_1negation__value",
      "summary": "std::integral_constant whose value is !Bs. ",
      "title": "thrust::negation_value",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::new_stream_t",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::new_stream_t",
      "qualifiedname": "thrust::new_stream_t",
      "refid": "structthrust_1_1new__stream__t",
      "title": "thrust::new_stream_t",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1new__stream__t.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::not_equal_to",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::not_equal_to",
      "qualifiedname": "thrust::not_equal_to",
      "refid": "structthrust_1_1not__equal__to",
      "title": "thrust::not_equal_to",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1not__equal__to.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::not_equal_to< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::not_equal_to< void >",
      "qualifiedname": "thrust::not_equal_to< void >",
      "refid": "structthrust_1_1not__equal__to_3_01void_01_4",
      "title": "thrust::not_equal_to< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1not__equal__to_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "A tag type to represent an empty optional. ",
      "category": "classes",
      "fullname": "thrust::nullopt_t",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::nullopt_t",
      "qualifiedname": "thrust::nullopt_t",
      "refid": "structthrust_1_1nullopt__t",
      "summary": "A tag type to represent an empty optional. ",
      "title": "thrust::nullopt_t",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "std::numeric_limits< T >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::numeric_limits",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::numeric_limits",
      "qualifiedname": "thrust::numeric_limits",
      "refid": "structthrust_1_1numeric__limits",
      "title": "thrust::numeric_limits",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1numeric__limits.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::detail::optional_move_assign_base< T >",
          "virtual": "non-virtual",
          "visibility": "private"
        },
        {
          "external": true,
          "name": "thrust::detail::optional_delete_ctor_base< T >",
          "virtual": "non-virtual",
          "visibility": "private"
        },
        {
          "external": true,
          "name": "thrust::detail::optional_delete_assign_base< T >",
          "virtual": "non-virtual",
          "visibility": "private"
        }
      ],
      "brief": "An optional object is an object that contains the storage for another object and manages the lifetime of this contained object, if any. ",
      "category": "classes",
      "fullname": "thrust::optional",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::optional",
      "qualifiedname": "thrust::optional",
      "refid": "classthrust_1_1optional",
      "summary": "An optional object is an object that contains the storage for another object and manages the lifetime of this contained object, if any. ",
      "title": "thrust::optional",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1optional.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Specialization for when <code>T</code> is a reference. ",
      "category": "classes",
      "fullname": "thrust::optional< T & >",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::optional< T & >",
      "qualifiedname": "thrust::optional< T & >",
      "refid": "classthrust_1_1optional_3_01T_01_6_01_4",
      "summary": "Specialization for when T is a reference. ",
      "title": "thrust::optional< T & >",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1optional_3_01t_01_6_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::detail::iterator_category_with_system_and_traversal< std::output_iterator_tag, thrust::device_system_tag, thrust::single_pass_traversal_tag >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::output_device_iterator_tag",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::output_device_iterator_tag",
      "qualifiedname": "thrust::output_device_iterator_tag",
      "refid": "structthrust_1_1output__device__iterator__tag",
      "title": "thrust::output_device_iterator_tag",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1output__device__iterator__tag.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::pair",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::pair",
      "qualifiedname": "thrust::pair",
      "refid": "structthrust_1_1pair",
      "title": "thrust::pair",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1pair.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::mr::allocator< T, Upstream >",
          "refid": "classthrust_1_1mr_1_1allocator",
          "url": "{{ site.baseurl }}/api/classes/classthrust_1_1mr_1_1allocator.html",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": true,
          "name": "thrust::mr::validator< MR >",
          "virtual": "non-virtual",
          "visibility": "private"
        }
      ],
      "category": "classes",
      "fullname": "thrust::per_device_allocator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::per_device_allocator",
      "qualifiedname": "thrust::per_device_allocator",
      "refid": "classthrust_1_1per__device__allocator",
      "title": "thrust::per_device_allocator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1per__device__allocator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::detail::permutation_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::permutation_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::permutation_iterator",
      "qualifiedname": "thrust::permutation_iterator",
      "refid": "classthrust_1_1permutation__iterator",
      "title": "thrust::permutation_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1permutation__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::plus",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::plus",
      "qualifiedname": "thrust::plus",
      "refid": "structthrust_1_1plus",
      "title": "thrust::plus",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1plus.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::plus< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::plus< void >",
      "qualifiedname": "thrust::plus< void >",
      "refid": "structthrust_1_1plus_3_01void_01_4",
      "title": "thrust::plus< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1plus_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "false_type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "brief": "Customization point that can be customized to indicate that an iterator type <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory. ",
      "category": "classes",
      "fullname": "thrust::proclaim_contiguous_iterator",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::proclaim_contiguous_iterator",
      "qualifiedname": "thrust::proclaim_contiguous_iterator",
      "refid": "structthrust_1_1proclaim__contiguous__iterator",
      "summary": "Customization point that can be customized to indicate that an iterator type Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory. ",
      "title": "thrust::proclaim_contiguous_iterator",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1proclaim__contiguous__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::project1st",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::project1st",
      "qualifiedname": "thrust::project1st",
      "refid": "structthrust_1_1project1st",
      "title": "thrust::project1st",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::project1st< void, void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::project1st< void, void >",
      "qualifiedname": "thrust::project1st< void, void >",
      "refid": "structthrust_1_1project1st_3_01void_00_01void_01_4",
      "title": "thrust::project1st< void, void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1project1st_3_01void_00_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::project2nd",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::project2nd",
      "qualifiedname": "thrust::project2nd",
      "refid": "structthrust_1_1project2nd",
      "title": "thrust::project2nd",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1project2nd.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::project2nd< void, void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::project2nd< void, void >",
      "qualifiedname": "thrust::project2nd< void, void >",
      "refid": "structthrust_1_1project2nd_3_01void_00_01void_01_4",
      "title": "thrust::project2nd< void, void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1project2nd_3_01void_00_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "thrust::detail::iterator_category_with_system_and_traversal< std::random_access_iterator_tag, thrust::device_system_tag, thrust::random_access_traversal_tag >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::random_access_device_iterator_tag",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::random_access_device_iterator_tag",
      "qualifiedname": "thrust::random_access_device_iterator_tag",
      "refid": "structthrust_1_1random__access__device__iterator__tag",
      "title": "thrust::random_access_device_iterator_tag",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1random__access__device__iterator__tag.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that removes <a href=\"https://en.cppreference.com/w/cpp/language/cv\">const-volatile qualifiers</a> and <a href=\"https://en.cppreference.com/w/cpp/language/reference\">references</a> from <code>T</code>. Equivalent to <code>remove&#95;cv&#95;t&lt;remove&#95;reference&#95;t&lt;T&gt;&gt;</code>. ",
      "category": "classes",
      "fullname": "thrust::remove_cvref",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::remove_cvref",
      "qualifiedname": "thrust::remove_cvref",
      "refid": "structthrust_1_1remove__cvref",
      "summary": "UnaryTypeTrait that removes const-volatile qualifiers and references from T. Equivalent to remove_cv_t<remove_reference_t<T>>. ",
      "title": "thrust::remove_cvref",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1remove__cvref.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::reverse_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::reverse_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::reverse_iterator",
      "qualifiedname": "thrust::reverse_iterator",
      "refid": "classthrust_1_1reverse__iterator",
      "title": "thrust::reverse_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::square",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::square",
      "qualifiedname": "thrust::square",
      "refid": "structthrust_1_1square",
      "title": "thrust::square",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1square.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::square< void >",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::square< void >",
      "qualifiedname": "thrust::square< void >",
      "refid": "structthrust_1_1square_3_01void_01_4",
      "title": "thrust::square< void >",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1square_3_01void_01_4.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "Lambda",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::tagged_deleter",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::tagged_deleter",
      "qualifiedname": "thrust::tagged_deleter",
      "refid": "structthrust_1_1tagged__deleter",
      "title": "thrust::tagged_deleter",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1tagged__deleter.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::transform_input_output_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::transform_input_output_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::transform_input_output_iterator",
      "qualifiedname": "thrust::transform_input_output_iterator",
      "refid": "classthrust_1_1transform__input__output__iterator",
      "title": "thrust::transform_input_output_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1transform__input__output__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::transform_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::transform_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::transform_iterator",
      "qualifiedname": "thrust::transform_iterator",
      "refid": "classthrust_1_1transform__iterator",
      "title": "thrust::transform_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1transform__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::transform_output_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::transform_output_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::transform_output_iterator",
      "qualifiedname": "thrust::transform_output_iterator",
      "refid": "classthrust_1_1transform__output__iterator",
      "title": "thrust::transform_output_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1transform__output__iterator.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "<code>tuple</code> is a class template that can be instantiated with up to ten arguments. Each template argument specifies the type of element in the <code>tuple</code>. Consequently, tuples are heterogeneous, fixed-size collections of values. An instantiation of <code>tuple</code> with two arguments is similar to an instantiation of <code>pair</code> with the same two arguments. Individual elements of a <code>tuple</code> may be accessed with the <code>get</code> function. ",
      "category": "classes",
      "fullname": "thrust::tuple",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::tuple",
      "qualifiedname": "thrust::tuple",
      "refid": "classthrust_1_1tuple",
      "summary": "tuple is a class template that can be instantiated with up to ten arguments. Each template argument specifies the type of element in the tuple. Consequently, tuples are heterogeneous, fixed-size collections of values. An instantiation of tuple with two arguments is similar to an instantiation of pair with the same two arguments. Individual elements of a tuple may be accessed with the get function. ",
      "title": "thrust::tuple",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::tuple_element",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::tuple_element",
      "qualifiedname": "thrust::tuple_element",
      "refid": "structthrust_1_1tuple__element",
      "title": "thrust::tuple_element",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1tuple__element.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::tuple_size",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::tuple_size",
      "qualifiedname": "thrust::tuple_size",
      "refid": "structthrust_1_1tuple__size",
      "title": "thrust::tuple_size",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1tuple__size.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::unary_function",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::unary_function",
      "qualifiedname": "thrust::unary_function",
      "refid": "structthrust_1_1unary__function",
      "title": "thrust::unary_function",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1unary__function.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "thrust::unary_function< Predicate::argument_type, bool >",
          "refid": "structthrust_1_1unary__function",
          "url": "{{ site.baseurl }}/api/classes/structthrust_1_1unary__function.html",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::unary_negate",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::unary_negate",
      "qualifiedname": "thrust::unary_negate",
      "refid": "structthrust_1_1unary__negate",
      "title": "thrust::unary_negate",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1unary__negate.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::unary_traits",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::unary_traits",
      "qualifiedname": "thrust::unary_traits",
      "refid": "structthrust_1_1unary__traits",
      "title": "thrust::unary_traits",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1unary__traits.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::voider",
      "kind": "struct",
      "language": "cpp",
      "name": "thrust::voider",
      "qualifiedname": "thrust::voider",
      "refid": "structthrust_1_1voider",
      "title": "thrust::voider",
      "url": "{{ site.baseurl }}/api/classes/structthrust_1_1voider.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "thrust::zip_function",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::zip_function",
      "qualifiedname": "thrust::zip_function",
      "refid": "classthrust_1_1zip__function",
      "title": "thrust::zip_function",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1zip__function.html",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "detail::zip_iterator_base::type",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "thrust::zip_iterator",
      "kind": "class",
      "language": "cpp",
      "name": "thrust::zip_iterator",
      "qualifiedname": "thrust::zip_iterator",
      "refid": "classthrust_1_1zip__iterator",
      "title": "thrust::zip_iterator",
      "url": "{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-addressof",
      "argsString": "(T &arg)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T * thrust::addressof",
      "deleted": false,
      "details": "Obtains the actual address of the object or function arg, even in presence of overloaded operator&. ",
      "explicit": false,
      "fullname": "thrust::addressof",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 27,
        "bodyFile": "thrust/addressof.h",
        "bodyStart": 22,
        "column": 3,
        "file": "thrust/addressof.h",
        "line": 22
      },
      "name": "addressof",
      "override": false,
      "params": [
        {
          "name": "arg",
          "type": "T &",
          "typePlain": "T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::addressof",
      "refid": "addressof_8h_1a7d3aa6e869a687ffce13db1441dac8ef",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "addressof",
      "type": "__host__ __device__ T *",
      "typePlain": "__host__ __device__ T *",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-addressof",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, the difference of <code>&#42;i</code> and <code>&#42;(i - 1)</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses <code>operator-</code> to calculate differences.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the difference between adjacent elements of a range using the <code>thrust::device</code> execution policy:\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(thrust::device, d_data.begin(), d_data.end(), d_result.begin());\n\n// d_result is now [1, 1, -1, 1, -1, 1, -1, 1]\n```",
      "explicit": false,
      "fullname": "thrust::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 83
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1gaa41d309b53fa03bf13fe35a184148400",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x</code> - <code>is</code> defined, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>, and the return type of <code>x - y</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "adjacent_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, <code>binary&#95;op(&#42;i, &#42;(i - 1))</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses the binary function <code>binary&#95;op</code> to calculate differences.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the sum between adjacent elements of a range using the <code>thrust::device</code> execution policy:\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(thrust::device, d_data.begin(), d_data.end(), d_result.begin(), thrust::plus<int>());\n\n// d_result is now [1, 3, 3, 3, 3, 3, 3, 3]\n```",
      "explicit": false,
      "fullname": "thrust::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 138
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to compute differences. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1ga6b2e362d0872c6ec3622399c41bc9081",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction's",
          "text": "<code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "adjacent_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, the difference of <code>&#42;i</code> and <code>&#42;(i - 1)</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses <code>operator-</code> to calculate differences.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the difference between adjacent elements of a range.\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/device_vector.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(d_data.begin(), d_data.end(), d_result.begin());\n\n// d_result is now [1, 1, -1, 1, -1, 1, -1, 1]\n```",
      "explicit": false,
      "fullname": "thrust::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 186
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1gaecdeb69a74548f924e3a9de420a84516",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x</code> - <code>is</code> defined, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>, and the return type of <code>x - y</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "adjacent_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-adjacent-difference",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::adjacent_difference",
      "deleted": false,
      "details": "<code>adjacent&#95;difference</code> calculates the differences of adjacent elements in the range <code>[first, last)</code>. That is, <code>&#42;first</code> is assigned to <code>&#42;result</code>, and, for each iterator <code>i</code> in the range <code>[first + 1, last)</code>, <code>binary&#95;op(&#42;i, &#42;(i - 1))</code> is assigned to <code>&#42;(result + (i - first))</code>.\n\nThis version of <code>adjacent&#95;difference</code> uses the binary function <code>binary&#95;op</code> to calculate differences.\n\n\nThe following code snippet demonstrates how to use <code>adjacent&#95;difference</code> to compute the sum between adjacent elements of a range.\n\n\n\n```cpp\n#include <thrust/adjacent_difference.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n...\nint h_data[8] = {1, 2, 1, 2, 1, 2, 1, 2};\nthrust::device_vector<int> d_data(h_data, h_data + 8);\nthrust::device_vector<int> d_result(8);\n\nthrust::adjacent_difference(d_data.begin(), d_data.end(), d_result.begin(), thrust::plus<int>());\n\n// d_result is now [1, 3, 3, 3, 3, 3, 3, 3]\n```",
      "explicit": false,
      "fullname": "thrust::adjacent_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/adjacent_difference.h",
        "line": 234
      },
      "name": "adjacent_difference",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to compute differences. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::adjacent_difference",
      "refid": "group__transformations_1ga0a47f6c0431b0905eaccc7bc427af396",
      "remark": [
        "Note that <code>result</code> is permitted to be the same iterator as <code>first</code>. This is useful for computing differences \"in place\"."
      ],
      "returns": [
        "The iterator <code>result + (last - first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/adjacent_difference\">https://en.cppreference.com/w/cpp/algorithm/adjacent_difference</a>",
        "inclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction's",
          "text": "<code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "adjacent_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-adjacent-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-advance",
      "argsString": "(InputIterator &i, Distance n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::advance",
      "deleted": false,
      "details": "<code>advance(i, n)</code> increments the iterator <code>i</code> by the distance <code>n</code>. If <code>n &gt; 0</code> it is equivalent to executing <code>++i</code><code>n</code> times, and if <code>n &lt; 0</code> it is equivalent to executing <code>&ndash;i</code><code>n</code> times. If <code>n == 0</code>, the call has no effect.\n\n\nThe following code snippet demonstrates how to use <code>advance</code> to increment an iterator a given number of times.\n\n\n\n```cpp\n#include <thrust/advance.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> vec(13);\nthrust::device_vector<int>::iterator iter = vec.begin();\n\nthrust::advance(iter, 7);\n\n// iter - vec.begin() == 7\n```",
      "explicit": false,
      "fullname": "thrust::advance",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/advance.h",
        "line": 64
      },
      "name": "advance",
      "override": false,
      "paramList": [
        {
          "name": "i",
          "text": "The iterator to be advanced. "
        },
        {
          "name": "n",
          "text": "The distance by which to advance the iterator."
        }
      ],
      "params": [
        {
          "name": "i",
          "type": "InputIterator &",
          "typePlain": "InputIterator &"
        },
        {
          "name": "n",
          "type": "Distance",
          "typePlain": "Distance"
        }
      ],
      "pre": [
        "<code>n</code> shall be negative only for bidirectional and random access iterators."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::advance",
      "refid": "group__iterators_1gafd488bbe514cc2cc3ff28401c0229685",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/iterator/advance\">https://en.cppreference.com/w/cpp/iterator/advance</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Distance",
          "typePlain": "typename Distance"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Distance",
          "text": "is an integral type that is convertible to <code>InputIterator's</code> distance type."
        }
      ],
      "title": "advance",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__iterators.html#function-advance",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-tagged-deleter",
      "argsString": "(Lambda &&l)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ tagged_deleter< Pointer, Lambda > thrust::make_tagged_deleter",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::make_tagged_deleter",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 270,
        "bodyFile": "thrust/allocate_unique.h",
        "bodyStart": 267,
        "column": 1,
        "file": "thrust/allocate_unique.h",
        "line": 267
      },
      "name": "make_tagged_deleter",
      "override": false,
      "params": [
        {
          "name": "l",
          "type": "Lambda &&",
          "typePlain": "Lambda &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_tagged_deleter",
      "refid": "allocate__unique_8h_1acf85a500d2312d247324843cf616a3e4",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename Pointer",
          "typePlain": "typename Pointer"
        },
        {
          "name": "",
          "type": "typename Lambda",
          "typePlain": "typename Lambda"
        }
      ],
      "title": "make_tagged_deleter",
      "type": "__host__ __device__ tagged_deleter< Pointer, Lambda >",
      "typePlain": "__host__ __device__ tagged_deleter< Pointer, Lambda >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-make-tagged-deleter",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-allocate-unique",
      "argsString": "(Allocator const &alloc, Args &&... args)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ std::unique_ptr< T, allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > > thrust::allocate_unique",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::allocate_unique",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 313,
        "bodyFile": "thrust/allocate_unique.h",
        "bodyStart": 287,
        "column": 1,
        "file": "thrust/allocate_unique.h",
        "line": 287
      },
      "name": "allocate_unique",
      "override": false,
      "params": [
        {
          "name": "alloc",
          "type": "Allocator const &",
          "typePlain": "Allocator const &"
        },
        {
          "name": "args",
          "type": "Args &&...",
          "typePlain": "Args &&..."
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::allocate_unique",
      "refid": "allocate__unique_8h_1a1a417878b3f659ef518e44c647a18923",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Allocator",
          "typePlain": "typename Allocator"
        },
        {
          "name": "Args",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "allocate_unique",
      "type": "__host__ std::unique_ptr< T, allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "typePlain": "__host__ std::unique_ptr< T, allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-allocate-unique",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-allocate-unique",
      "argsString": "(Allocator const &alloc)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ std::unique_ptr< T, uninitialized_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > > thrust::uninitialized_allocate_unique",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::uninitialized_allocate_unique",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 353,
        "bodyFile": "thrust/allocate_unique.h",
        "bodyStart": 328,
        "column": 1,
        "file": "thrust/allocate_unique.h",
        "line": 328
      },
      "name": "uninitialized_allocate_unique",
      "override": false,
      "params": [
        {
          "name": "alloc",
          "type": "Allocator const &",
          "typePlain": "Allocator const &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_allocate_unique",
      "refid": "allocate__unique_8h_1a561bf9072d2fd70f95063b8e3589d56d",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Allocator",
          "typePlain": "typename Allocator"
        }
      ],
      "title": "uninitialized_allocate_unique",
      "type": "__host__ std::unique_ptr< T, uninitialized_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "typePlain": "__host__ std::unique_ptr< T, uninitialized_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-uninitialized-allocate-unique",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-allocate-unique-n",
      "argsString": "(Allocator const &alloc, Size n, Args &&... args)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ std::unique_ptr< T[], array_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > > thrust::allocate_unique_n",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::allocate_unique_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 396,
        "bodyFile": "thrust/allocate_unique.h",
        "bodyStart": 368,
        "column": 1,
        "file": "thrust/allocate_unique.h",
        "line": 368
      },
      "name": "allocate_unique_n",
      "override": false,
      "params": [
        {
          "name": "alloc",
          "type": "Allocator const &",
          "typePlain": "Allocator const &"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "args",
          "type": "Args &&...",
          "typePlain": "Args &&..."
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::allocate_unique_n",
      "refid": "allocate__unique_8h_1a3f56d218b14681d00aa60caa261b974b",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Allocator",
          "typePlain": "typename Allocator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "Args",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "allocate_unique_n",
      "type": "__host__ std::unique_ptr< T[], array_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "typePlain": "__host__ std::unique_ptr< T[], array_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-allocate-unique-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-allocate-unique-n",
      "argsString": "(Allocator const &alloc, Size n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ std::unique_ptr< T[], uninitialized_array_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > > thrust::uninitialized_allocate_unique_n",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::uninitialized_allocate_unique_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 436,
        "bodyFile": "thrust/allocate_unique.h",
        "bodyStart": 411,
        "column": 1,
        "file": "thrust/allocate_unique.h",
        "line": 411
      },
      "name": "uninitialized_allocate_unique_n",
      "override": false,
      "params": [
        {
          "name": "alloc",
          "type": "Allocator const &",
          "typePlain": "Allocator const &"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_allocate_unique_n",
      "refid": "allocate__unique_8h_1a93f67d122768cd89017f5f10996948d7",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Allocator",
          "typePlain": "typename Allocator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        }
      ],
      "title": "uninitialized_allocate_unique_n",
      "type": "__host__ std::unique_ptr< T[], uninitialized_array_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "typePlain": "__host__ std::unique_ptr< T[], uninitialized_array_allocator_delete< T, typename detail::allocator_traits< typename std::remove_cv< typename std::remove_reference< Allocator >::type >::type >::template rebind_traits< T >::allocator_type > >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-uninitialized-allocate-unique-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>&#42;j &lt; value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 0); // returns input.begin()\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 2); // returns input.begin() + 1\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 8); // returns input.begin() + 4\nthrust::lower_bound(thrust::device, input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 102
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1ga19da452d0b760bd927865ad2e0f45e41",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>&#42;i &lt; value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "lower_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>&#42;j &lt; value</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(input.begin(), input.end(), 0); // returns input.begin()\nthrust::lower_bound(input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 2); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::lower_bound(input.begin(), input.end(), 8); // returns input.begin() + 4\nthrust::lower_bound(input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 153
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1ga1e475b6887f3dcbbb1bc0f68225d0cac",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>&#42;i &lt; value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "lower_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(&#42;j, value)</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin()\nthrust::lower_bound(input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::lower_bound(input.begin(), input.end(), 8, thrust::less<int>()); // returns input.begin() + 4\nthrust::lower_bound(input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 213
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1ga2e37c6bda13e037d9b3b520c68944f0b",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(&#42;i, value)</code> is <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "lower_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(&#42;j, value)</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::lower_bound(input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin()\nthrust::lower_bound(input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 1\nthrust::lower_bound(input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::lower_bound(input.begin(), input.end(), 8, thrust::less<int>()); // returns input.begin() + 4\nthrust::lower_bound(input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 269
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__binary__search_1gad1c957a4f437f5df70a86e13ea75ec5a",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(&#42;i, value)</code> is <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "lower_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>value &lt; &#42;j</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelism:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 0); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 2); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 8); // returns input.end()\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 327
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1gac00fd24a457a398e91c3d3822e02b95a",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>value &lt; &#42;i</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "upper_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses <code>operator&lt;</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>value &lt; &#42;j</code> is <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(input.begin(), input.end(), 0); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 1); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 2); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 3); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 8); // returns input.end()\nthrust::upper_bound(input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 379
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1ga5d3e8f2af56dde127de4d1c54782b525",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>value &lt; &#42;i</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "upper_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(value, &#42;j)</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 8, thrust::less<int>()); // returns input.end()\nthrust::upper_bound(thrust::device, input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 439
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1gaf15b752fcca8fff945c410c0887e2524",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(value, &#42;i)</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "upper_bound",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. Specifically, it returns the last position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses function object <code>comp</code> for comparison and returns the furthermost iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, i)</code>, <code>comp(value, &#42;j)</code> is <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::upper_bound(input.begin(), input.end(), 0, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 1, thrust::less<int>()); // returns input.begin() + 1\nthrust::upper_bound(input.begin(), input.end(), 2, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 3, thrust::less<int>()); // returns input.begin() + 2\nthrust::upper_bound(input.begin(), input.end(), 8, thrust::less<int>()); // returns input.end()\nthrust::upper_bound(input.begin(), input.end(), 9, thrust::less<int>()); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/binary_search.h",
        "line": 494
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__binary__search_1ga183fbd2f3d478f3e3d0dc97c5bce883b",
      "returns": [
        "The furthermost iterator <code>i</code>, such that <code>comp(value, &#42;i)</code> is <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "upper_bound",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>&#42;i &lt; value</code> and <code>value &lt; &#42;i</code> are both <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(thrust::device, input.begin(), input.end(), 0); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 1); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 2); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 3); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 8); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 9); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 551
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1ga689a04a9abfba06932510eb0fa8d0b64",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "binary_search",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>&#42;i &lt; value</code> and <code>value &lt; &#42;i</code> are both <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(input.begin(), input.end(), 0); // returns true\nthrust::binary_search(input.begin(), input.end(), 1); // returns false\nthrust::binary_search(input.begin(), input.end(), 2); // returns true\nthrust::binary_search(input.begin(), input.end(), 3); // returns false\nthrust::binary_search(input.begin(), input.end(), 8); // returns true\nthrust::binary_search(input.begin(), input.end(), 9); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 602
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1gaca71baf79a6985712d8e5bdc1dcdbaa9",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "binary_search",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>comp(&#42;i, value)</code> and <code>comp(value, &#42;i)</code> are both <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(thrust::device, input.begin(), input.end(), 0, thrust::less<int>()); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 1, thrust::less<int>()); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 2, thrust::less<int>()); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 3, thrust::less<int>()); // returns false\nthrust::binary_search(thrust::device, input.begin(), input.end(), 8, thrust::less<int>()); // returns true\nthrust::binary_search(thrust::device, input.begin(), input.end(), 9, thrust::less<int>()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 661
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1gad17ba23d363919d540e3eb74df841517",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "binary_search",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. Specifically, this version returns <code>true</code> if and only if there exists an iterator <code>i</code> in <code>[first, last)</code> such that <code>comp(&#42;i, value)</code> and <code>comp(value, &#42;i)</code> are both <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::binary_search(input.begin(), input.end(), 0, thrust::less<int>()); // returns true\nthrust::binary_search(input.begin(), input.end(), 1, thrust::less<int>()); // returns false\nthrust::binary_search(input.begin(), input.end(), 2, thrust::less<int>()); // returns true\nthrust::binary_search(input.begin(), input.end(), 3, thrust::less<int>()); // returns false\nthrust::binary_search(input.begin(), input.end(), 8, thrust::less<int>()); // returns true\nthrust::binary_search(input.begin(), input.end(), 9, thrust::less<int>()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/binary_search.h",
        "line": 716
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__binary__search_1gaeb34fdc9da32ad2baa270b51cb769712",
      "returns": [
        "<code>true</code> if an equivalent element exists in <code>[first, last)</code>, otherwise <code>false</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "binary_search",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>, where <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>&#42;k &lt; value</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, j)</code>, <code>value &lt; &#42;k</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>value &lt; &#42;k</code> nor <code>&#42;k &lt; value</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(thrust::device, input.begin(), input.end(), 0); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 1); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 2); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 3); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 8); // returns [input.begin() + 4, input.end)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 9); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "thrust::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 787
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1ga476174bc9b4dbb8d6bda492524eff35f",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename LessThanComparable",
          "typePlain": "typename LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "equal_range",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(ForwardIterator first, ForwardIterator last, const LessThanComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>, where <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>&#42;k &lt; value</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, j)</code>, <code>value &lt; &#42;k</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>value &lt; &#42;k</code> nor <code>&#42;k &lt; value</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(input.begin(), input.end(), 0); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 1); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 2); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 3); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 8); // returns [input.begin() + 4, input.end)\nthrust::equal_range(input.begin(), input.end(), 9); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "thrust::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 852
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const LessThanComparable &",
          "typePlain": "const LessThanComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1ga34d48d1d58e4f8bda543bc7f5ac480e0",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class LessThanComparable",
          "typePlain": "class LessThanComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "LessThanComparable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>."
        }
      ],
      "title": "equal_range",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>. <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>comp(&#42;k, value)</code> is <code>true</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, last)</code>, <code>comp(value, &#42;k)</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>comp(value, &#42;k)</code> nor <code>comp(&#42;k, value)</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(thrust::device, input.begin(), input.end(), 0, thrust::less<int>()); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 1, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 2, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 3, thrust::less<int>()); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 8, thrust::less<int>()); // returns [input.begin() + 4, input.end)\nthrust::equal_range(thrust::device, input.begin(), input.end(), 9, thrust::less<int>()); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "thrust::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 926
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1ga8eafaf792a190769792e3bae402ff4d1",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "equal_range",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal-range",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator, ForwardIterator > thrust::equal_range",
      "deleted": false,
      "details": "<code>equal&#95;range</code> is a version of binary search: it attempts to find the element value in an ordered range <code>[first, last)</code>. The value returned by <code>equal&#95;range</code> is essentially a combination of the values returned by <code>lower&#95;bound</code> and <code>upper&#95;bound:</code> it returns a <code>pair</code> of iterators <code>i</code> and <code>j</code> such that <code>i</code> is the first position where value could be inserted without violating the ordering and <code>j</code> is the last position where value could be inserted without violating the ordering. It follows that every element in the range <code>[i, j)</code> is equivalent to value, and that <code>[i, j)</code> is the largest subrange of <code>[first, last)</code> that has this property.\n\nThis version of <code>equal&#95;range</code> returns a <code>pair</code> of iterators <code>[i, j)</code>. <code>i</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, i)</code>, <code>comp(&#42;k, value)</code> is <code>true</code>. <code>j</code> is the furthermost iterator in <code>[first, last)</code> such that, for every iterator <code>k</code> in <code>[first, last)</code>, <code>comp(value, &#42;k)</code> is <code>false</code>. For every iterator <code>k</code> in <code>[i, j)</code>, neither <code>comp(value, &#42;k)</code> nor <code>comp(&#42;k, value)</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal&#95;range</code> to search for values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::equal_range(input.begin(), input.end(), 0, thrust::less<int>()); // returns [input.begin(), input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 1, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 1)\nthrust::equal_range(input.begin(), input.end(), 2, thrust::less<int>()); // returns [input.begin() + 1, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 3, thrust::less<int>()); // returns [input.begin() + 2, input.begin() + 2)\nthrust::equal_range(input.begin(), input.end(), 8, thrust::less<int>()); // returns [input.begin() + 4, input.end)\nthrust::equal_range(input.begin(), input.end(), 9, thrust::less<int>()); // returns [input.end(), input.end)\n```",
      "explicit": false,
      "fullname": "thrust::equal_range",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/binary_search.h",
        "line": 996
      },
      "name": "equal_range",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "value",
          "text": "The value to be searched. "
        },
        {
          "name": "comp",
          "text": "The comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal_range",
      "refid": "group__binary__search_1gafd1dc2f2bc4ebd0da185a49bd70264ab",
      "returns": [
        "A <code>pair</code> of iterators <code>[i, j)</code> that define the range of equivalent elements."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal_range\">https://en.cppreference.com/w/cpp/algorithm/equal_range</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "equal_range",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__binary__search.html#function-equal-range",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of first position where value could be inserted without violating the ordering.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for multiple values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::lower_bound(thrust::device,\n                    input.begin(), input.end(),\n                    values.begin(), values.end(),\n                    output.begin());\n\n// output is now [0, 1, 1, 2, 4, 5]\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1079
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__vectorized__binary__search_1gaa3898ae9d0866d16694c66899f01cf52",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "lower_bound",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of first position where value could be inserted without violating the ordering.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for multiple values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::lower_bound(input.begin(), input.end(),\n                    values.begin(), values.end(),\n                    output.begin());\n\n// output is now [0, 1, 1, 2, 4, 5]\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1145
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__vectorized__binary__search_1gab6283107548915e5541be0e3efe958f1",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class InputIterator",
          "typePlain": "class InputIterator"
        },
        {
          "name": "",
          "type": "class OutputIterator",
          "typePlain": "class OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "lower_bound",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses function object <code>comp</code> for comparison.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for multiple values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::lower_bound(input.begin(), input.end(),\n                    values.begin(), values.end(), \n                    output.begin(),\n                    thrust::less<int>());\n\n// output is now [0, 1, 1, 2, 4, 5]\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1221
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "comp",
          "text": "The comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__vectorized__binary__search_1ga04b5a67cd0daf7be4b35c2bc75d22bee",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "lower_bound",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lower-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::lower_bound",
      "deleted": false,
      "details": "<code>lower&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of first position where value could be inserted without violating the ordering. This version of <code>lower&#95;bound</code> uses function object <code>comp</code> for comparison.\n\n\nThe following code snippet demonstrates how to use <code>lower&#95;bound</code> to search for multiple values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::lower_bound(input.begin(), input.end(),\n                    values.begin(), values.end(), \n                    output.begin(),\n                    thrust::less<int>());\n\n// output is now [0, 1, 1, 2, 4, 5]\n```",
      "explicit": false,
      "fullname": "thrust::lower_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1293
      },
      "name": "lower_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "comp",
          "text": "The comparison operator."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::lower_bound",
      "refid": "group__vectorized__binary__search_1ga30acecaad39c7d9f299f0cc515b762ce",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/lower_bound\">https://en.cppreference.com/w/cpp/algorithm/lower_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class InputIterator",
          "typePlain": "class InputIterator"
        },
        {
          "name": "",
          "type": "class OutputIterator",
          "typePlain": "class OutputIterator"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "lower_bound",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-lower-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of last position where value could be inserted without violating the ordering.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for multiple values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::upper_bound(thrust::device,\n                    input.begin(), input.end(),\n                    values.begin(), values.end(),\n                    output.begin());\n\n// output is now [1, 1, 2, 2, 5, 5]\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1367
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__vectorized__binary__search_1ga64d08ecd00ab164fe785a2416aa30941",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "upper_bound",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of last position where value could be inserted without violating the ordering.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for multiple values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::upper_bound(input.begin(), input.end(),\n                    values.begin(), values.end(),\n                    output.begin());\n\n// output is now [1, 1, 2, 2, 5, 5]\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1433
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__vectorized__binary__search_1gaaedf46dd0857b3f31725eb2a13ee0e26",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class InputIterator",
          "typePlain": "class InputIterator"
        },
        {
          "name": "",
          "type": "class OutputIterator",
          "typePlain": "class OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "upper_bound",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of first position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses function object <code>comp</code> for comparison.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for multiple values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::upper_bound(thrust::device,\n                    input.begin(), input.end(),\n                    values.begin(), values.end(), \n                    output.begin(),\n                    thrust::less<int>());\n\n// output is now [1, 1, 2, 2, 5, 5]\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1511
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "comp",
          "text": "The comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__vectorized__binary__search_1ga45cc7c0ff8450c54b6d43a28b787b0c0",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "upper_bound",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-upper-bound",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::upper_bound",
      "deleted": false,
      "details": "<code>upper&#95;bound</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. Specifically, it returns the index of first position where value could be inserted without violating the ordering. This version of <code>upper&#95;bound</code> uses function object <code>comp</code> for comparison.\n\n\nThe following code snippet demonstrates how to use <code>upper&#95;bound</code> to search for multiple values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<unsigned int> output(6);\n\nthrust::upper_bound(input.begin(), input.end(),\n                    values.begin(), values.end(), \n                    output.begin(),\n                    thrust::less<int>());\n\n// output is now [1, 1, 2, 2, 5, 5]\n```",
      "explicit": false,
      "fullname": "thrust::upper_bound",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1583
      },
      "name": "upper_bound",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "comp",
          "text": "The comparison operator."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::upper_bound",
      "refid": "group__vectorized__binary__search_1gabe5e2b1b20a3e1066d52a9831e20abe5",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/upper_bound\">https://en.cppreference.com/w/cpp/algorithm/upper_bound</a>",
        "<code>lower&#95;bound</code>",
        "<code>equal&#95;range</code>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__binary__search.html\">Binary Search</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class InputIterator",
          "typePlain": "class InputIterator"
        },
        {
          "name": "",
          "type": "class OutputIterator",
          "typePlain": "class OutputIterator"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is comparable to <code>ForwardIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and <code>ForwardIterator's</code> difference_type is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "upper_bound",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-upper-bound",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for multiple values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<bool> output(6);\n\nthrust::binary_search(thrust::device,\n                      input.begin(), input.end(),\n                      values.begin(), values.end(),\n                      output.begin());\n\n// output is now [true, false, true, false, true, false]\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1658
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__vectorized__binary__search_1ga64307ce5162346031df34fd09a7de1ff",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and bool is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "binary_search",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for multiple values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<bool> output(6);\n\nthrust::binary_search(input.begin(), input.end(),\n                      values.begin(), values.end(),\n                      output.begin());\n\n// output is now [true, false, true, false, true, false]\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1725
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__vectorized__binary__search_1gaca4b5ad62a005948659a605a73515d02",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class InputIterator",
          "typePlain": "class InputIterator"
        },
        {
          "name": "",
          "type": "class OutputIterator",
          "typePlain": "class OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and bool is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "binary_search",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. This version of <code>binary&#95;search</code> uses function object <code>comp</code> for comparison.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for multiple values in a ordered range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<bool> output(6);\n\nthrust::binary_search(thrust::device,\n                      input.begin(), input.end(),\n                      values.begin(), values.end(),\n                      output.begin(),\n                      thrust::less<T>());\n\n// output is now [true, false, true, false, true, false]\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1804
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "comp",
          "text": "The comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__vectorized__binary__search_1gad17d49fa72297cc0e6480df3bf3a9c2b",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and bool is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "binary_search",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-binary-search",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator values_first, InputIterator values_last, OutputIterator result, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::binary_search",
      "deleted": false,
      "details": "<code>binary&#95;search</code> is a vectorized version of binary search: for each iterator <code>v</code> in <code>[values&#95;first, values&#95;last)</code> it attempts to find the value <code>&#42;v</code> in an ordered range <code>[first, last)</code>. It returns <code>true</code> if an element that is equivalent to <code>value</code> is present in <code>[first, last)</code> and <code>false</code> if no such element exists. This version of <code>binary&#95;search</code> uses function object <code>comp</code> for comparison.\n\n\nThe following code snippet demonstrates how to use <code>binary&#95;search</code> to search for multiple values in a ordered range.\n\n\n\n```cpp\n#include <thrust/binary_search.h>\n#include <thrust/device_vector.h>\n#include <thrust/functional.h>\n...\nthrust::device_vector<int> input(5);\n\ninput[0] = 0;\ninput[1] = 2;\ninput[2] = 5;\ninput[3] = 7;\ninput[4] = 8;\n\nthrust::device_vector<int> values(6);\nvalues[0] = 0; \nvalues[1] = 1;\nvalues[2] = 2;\nvalues[3] = 3;\nvalues[4] = 8;\nvalues[5] = 9;\n\nthrust::device_vector<bool> output(6);\n\nthrust::binary_search(input.begin(), input.end(),\n                      values.begin(), values.end(),\n                      output.begin(),\n                      thrust::less<T>());\n\n// output is now [true, false, true, false, true, false]\n```",
      "explicit": false,
      "fullname": "thrust::binary_search",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/binary_search.h",
        "line": 1877
      },
      "name": "binary_search",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the ordered sequence. "
        },
        {
          "name": "last",
          "text": "The end of the ordered sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the search values sequence. "
        },
        {
          "name": "values_last",
          "text": "The end of the search values sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "comp",
          "text": "The comparison operator."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "values_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "values_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::binary_search",
      "refid": "group__vectorized__binary__search_1gac35a115642366fff80e85de54a9882c6",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/binary_search\">https://en.cppreference.com/w/cpp/algorithm/binary_search</a>",
        "<code>lower&#95;bound</code>",
        "<code>upper&#95;bound</code>",
        "<code>equal&#95;range</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class ForwardIterator",
          "typePlain": "class ForwardIterator"
        },
        {
          "name": "",
          "type": "class InputIterator",
          "typePlain": "class InputIterator"
        },
        {
          "name": "",
          "type": "class OutputIterator",
          "typePlain": "class OutputIterator"
        },
        {
          "name": "",
          "type": "class StrictWeakOrdering",
          "typePlain": "class StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator's</code><code>value&#95;type</code> is <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThanComparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. and bool is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "binary_search",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__vectorized__binary__search.html#function-binary-search",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-abs",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T thrust::abs",
      "deleted": false,
      "details": "Returns the magnitude (also known as absolute value) of a <code>complex</code>.",
      "explicit": false,
      "fullname": "thrust::abs",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/complex.h",
        "line": 471
      },
      "name": "abs",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> from which to calculate the absolute value. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::abs",
      "refid": "group__complex__numbers_1ga0b43968a88c901d080b2fd67ad5d777b",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "abs",
      "type": "__host__ __device__ T",
      "typePlain": "__host__ __device__ T",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-abs",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-arg",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T thrust::arg",
      "deleted": false,
      "details": "Returns the phase angle (also known as argument) in radians of a <code>complex</code>.",
      "explicit": false,
      "fullname": "thrust::arg",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/complex.h",
        "line": 479
      },
      "name": "arg",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> from which to calculate the phase angle. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::arg",
      "refid": "group__complex__numbers_1gaaf1fe0eb083839813e90a6f7cb6d7585",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "arg",
      "type": "__host__ __device__ T",
      "typePlain": "__host__ __device__ T",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-arg",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-norm",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T thrust::norm",
      "deleted": false,
      "details": "Returns the square of the magnitude of a <code>complex</code>.",
      "explicit": false,
      "fullname": "thrust::norm",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/complex.h",
        "line": 487
      },
      "name": "norm",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> from which to calculate the norm. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::norm",
      "refid": "group__complex__numbers_1ga72976ce81371a014d26a6ed5cf75fbc8",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "norm",
      "type": "__host__ __device__ T",
      "typePlain": "__host__ __device__ T",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-norm",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-conj",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::conj",
      "deleted": false,
      "details": "Returns the complex conjugate of a <code>complex</code>.",
      "explicit": false,
      "fullname": "thrust::conj",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 495
      },
      "name": "conj",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> from which to calculate the complex conjugate. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::conj",
      "refid": "group__complex__numbers_1ga6631ea0d7b423584620f31bacc4988dd",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "conj",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-conj",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-polar",
      "argsString": "(const T0 &m, const T1 &theta=T1())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::polar",
      "deleted": false,
      "details": "Returns a <code>complex</code> with the specified magnitude and phase.",
      "explicit": false,
      "fullname": "thrust::polar",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 505
      },
      "name": "polar",
      "override": false,
      "paramList": [
        {
          "name": "m",
          "text": "The magnitude of the returned <code>complex</code>. "
        },
        {
          "name": "theta",
          "text": "The phase of the returned <code>complex</code> in radians. "
        }
      ],
      "params": [
        {
          "name": "m",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "defval": "T1()",
          "defvalPlain": "T1()",
          "name": "theta",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::polar",
      "refid": "group__complex__numbers_1gaebeee869d137af1c8889844fb69a445c",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "polar",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-polar",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-proj",
      "argsString": "(const T &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::proj",
      "deleted": false,
      "details": "Returns the projection of a <code>complex</code> on the Riemann sphere. For all finite <code>complex</code> it returns the argument. For <code>complexs</code> with a non finite part returns (INFINITY,+/-0) where the sign of the zero matches the sign of the imaginary part of the argument.",
      "explicit": false,
      "fullname": "thrust::proj",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 516
      },
      "name": "proj",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::proj",
      "refid": "group__complex__numbers_1gaa3be3c2c7995227d62eb44d32f4ffc9f",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "proj",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-proj",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator+",
      "argsString": "(const complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator+",
      "deleted": false,
      "details": "Adds two <code>complex</code> numbers.\n\nThe value types of the two <code>complex</code> types should be compatible and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator+",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 533
      },
      "name": "operator+",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator+",
      "refid": "group__complex__numbers_1ga6621b6c641343a307b3b81055740b5d0",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator+",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator+",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator+",
      "argsString": "(const complex< T0 > &x, const T1 &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator+",
      "deleted": false,
      "details": "Adds a scalar to a <code>complex</code> number.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator+",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 546
      },
      "name": "operator+",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The scalar. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator+",
      "refid": "group__complex__numbers_1gab204b0c889668d33131f9d1345cd8327",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator+",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator+",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator+",
      "argsString": "(const T0 &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator+",
      "deleted": false,
      "details": "Adds a <code>complex</code> number to a scalar.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator+",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 559
      },
      "name": "operator+",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The scalar. "
        },
        {
          "name": "y",
          "text": "The <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator+",
      "refid": "group__complex__numbers_1gaa9760e659ac576fba8e159c84ed1f52d",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator+",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator+",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator-",
      "argsString": "(const complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator-",
      "deleted": false,
      "details": "Subtracts two <code>complex</code> numbers.\n\nThe value types of the two <code>complex</code> types should be compatible and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator-",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 572
      },
      "name": "operator-",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code> (minuend). "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code> (subtrahend). "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator-",
      "refid": "group__complex__numbers_1ga5cb5841ddbe5446170a47ae0509c4289",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator-",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator-",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator-",
      "argsString": "(const complex< T0 > &x, const T1 &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator-",
      "deleted": false,
      "details": "Subtracts a scalar from a <code>complex</code> number.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator-",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 585
      },
      "name": "operator-",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The <code>complex</code> (minuend). "
        },
        {
          "name": "y",
          "text": "The scalar (subtrahend). "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator-",
      "refid": "group__complex__numbers_1ga2eaa3cc05c5e9862c44f013e32a37182",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator-",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator-",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator-",
      "argsString": "(const T0 &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator-",
      "deleted": false,
      "details": "Subtracts a <code>complex</code> number from a scalar.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator-",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 598
      },
      "name": "operator-",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The scalar (minuend). "
        },
        {
          "name": "y",
          "text": "The <code>complex</code> (subtrahend). "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator-",
      "refid": "group__complex__numbers_1ga3878f5c8295de840b7f6a3a655e2f408",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator-",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator-",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator*",
      "argsString": "(const complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator*",
      "deleted": false,
      "details": "Multiplies two <code>complex</code> numbers.\n\nThe value types of the two <code>complex</code> types should be compatible and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator*",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 611
      },
      "name": "operator*",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator*",
      "refid": "group__complex__numbers_1ga726432797e9a7859743abadc1f0581e3",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator*",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator*",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator*",
      "argsString": "(const complex< T0 > &x, const T1 &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator*",
      "deleted": false,
      "details": "Multiplies a <code>complex</code> number by a scalar.",
      "explicit": false,
      "fullname": "thrust::operator*",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 621
      },
      "name": "operator*",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The scalar. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator*",
      "refid": "group__complex__numbers_1ga2385e4627f0d6f70d8abddff38eccf86",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator*",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator*",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator*",
      "argsString": "(const T0 &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator*",
      "deleted": false,
      "details": "Multiplies a scalar by a <code>complex</code> number.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator*",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 634
      },
      "name": "operator*",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The scalar. "
        },
        {
          "name": "y",
          "text": "The <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator*",
      "refid": "group__complex__numbers_1gaaf3dfe06b5851785428accef01a693a2",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator*",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator*",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator/",
      "argsString": "(const complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator/",
      "deleted": false,
      "details": "Divides two <code>complex</code> numbers.\n\nThe value types of the two <code>complex</code> types should be compatible and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator/",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 647
      },
      "name": "operator/",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The numerator (dividend). "
        },
        {
          "name": "y",
          "text": "The denomimator (divisor). "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator/",
      "refid": "group__complex__numbers_1ga565c8f115ce84fb5e23becac4d7aa9c1",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator/",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator/",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator/",
      "argsString": "(const complex< T0 > &x, const T1 &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator/",
      "deleted": false,
      "details": "Divides a <code>complex</code> number by a scalar.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator/",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 660
      },
      "name": "operator/",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The complex numerator (dividend). "
        },
        {
          "name": "y",
          "text": "The scalar denomimator (divisor). "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator/",
      "refid": "group__complex__numbers_1ga00a2fb948690eb468b44838938f20851",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator/",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator/",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator/",
      "argsString": "(const T0 &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::operator/",
      "deleted": false,
      "details": "Divides a scalar by a <code>complex</code> number.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::operator/",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 673
      },
      "name": "operator/",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The scalar numerator (dividend). "
        },
        {
          "name": "y",
          "text": "The complex denomimator (divisor). "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator/",
      "refid": "group__complex__numbers_1ga9b465aca695b1e382abacb90a8687f85",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator/",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator/",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator+",
      "argsString": "(const complex< T > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::operator+",
      "deleted": false,
      "details": "Unary plus, returns its <code>complex</code> argument.",
      "explicit": false,
      "fullname": "thrust::operator+",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 686
      },
      "name": "operator+",
      "override": false,
      "paramList": [
        {
          "name": "y",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator+",
      "refid": "group__complex__numbers_1gab38470651d9fe16801d5747e07a20522",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "operator+",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator+",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator-",
      "argsString": "(const complex< T > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::operator-",
      "deleted": false,
      "details": "Unary minus, returns the additive inverse (negation) of its <code>complex</code> argument.",
      "explicit": false,
      "fullname": "thrust::operator-",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 696
      },
      "name": "operator-",
      "override": false,
      "paramList": [
        {
          "name": "y",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator-",
      "refid": "group__complex__numbers_1ga8b334dc9d340938d97ad7d72e98046c9",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "operator-",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator-",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exp",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::exp",
      "deleted": false,
      "details": "Returns the complex exponential of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::exp",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 708
      },
      "name": "exp",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exp",
      "refid": "group__complex__numbers_1ga4805d546bc43474fcd6881907ff8d3c9",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "exp",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-exp",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-log",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::log",
      "deleted": false,
      "details": "Returns the complex natural logarithm of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::log",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 716
      },
      "name": "log",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::log",
      "refid": "group__complex__numbers_1ga641a3104f4a9668d663e36dfecb0fee8",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "log",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-log",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-log10",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::log10",
      "deleted": false,
      "details": "Returns the complex base 10 logarithm of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::log10",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 724
      },
      "name": "log10",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::log10",
      "refid": "group__complex__numbers_1ga334c8ba74d10ad186e299ac18cb3cf1c",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "log10",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-log10",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-pow",
      "argsString": "(const complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::pow",
      "deleted": false,
      "details": "Returns a <code>complex</code> number raised to another.\n\nThe value types of the two <code>complex</code> types should be compatible and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::pow",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 741
      },
      "name": "pow",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The base. "
        },
        {
          "name": "y",
          "text": "The exponent. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::pow",
      "refid": "group__complex__numbers_1ga9c22c8c31bc3d1ec935a8e092a0ac62e",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "pow",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-pow",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-pow",
      "argsString": "(const complex< T0 > &x, const T1 &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::pow",
      "deleted": false,
      "details": "Returns a <code>complex</code> number raised to a scalar.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::pow",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 754
      },
      "name": "pow",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The base. "
        },
        {
          "name": "y",
          "text": "The exponent. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::pow",
      "refid": "group__complex__numbers_1gabdf9630f078d013fd0e66b6a9540c7a8",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "pow",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-pow",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-pow",
      "argsString": "(const T0 &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type > thrust::pow",
      "deleted": false,
      "details": "Returns a scalar raised to a <code>complex</code> number.\n\nThe value type of the <code>complex</code> should be compatible with the scalar and the type of the returned <code>complex</code> is the promoted type of the two arguments.",
      "explicit": false,
      "fullname": "thrust::pow",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 767
      },
      "name": "pow",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The base. "
        },
        {
          "name": "y",
          "text": "The exponent. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::pow",
      "refid": "group__complex__numbers_1ga9d400d559c8d95e298958b9d47cb41e0",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "pow",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "typePlain": "__host__ __device__ complex< typename detail::promoted_numerical_type< T0, T1 >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-pow",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sqrt",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::sqrt",
      "deleted": false,
      "details": "Returns the complex square root of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::sqrt",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 775
      },
      "name": "sqrt",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sqrt",
      "refid": "group__complex__numbers_1gac712ff527eabf8cbb2ecc420dc9bad3e",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "sqrt",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-sqrt",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-cos",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::cos",
      "deleted": false,
      "details": "Returns the complex cosine of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::cos",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 786
      },
      "name": "cos",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::cos",
      "refid": "group__complex__numbers_1gafa40207874a517e419c1d29de83bfa0a",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "cos",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-cos",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sin",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::sin",
      "deleted": false,
      "details": "Returns the complex sine of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::sin",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 794
      },
      "name": "sin",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sin",
      "refid": "group__complex__numbers_1gae1328255ada95fedcc394721f5899c54",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "sin",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-sin",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tan",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::tan",
      "deleted": false,
      "details": "Returns the complex tangent of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::tan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 802
      },
      "name": "tan",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tan",
      "refid": "group__complex__numbers_1ga08c065f31edb7bfc69579cba6d21fc57",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "tan",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-tan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-cosh",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::cosh",
      "deleted": false,
      "details": "Returns the complex hyperbolic cosine of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::cosh",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 814
      },
      "name": "cosh",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::cosh",
      "refid": "group__complex__numbers_1gaaed5e4415e30e931402af7dec9f280b5",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "cosh",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-cosh",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sinh",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::sinh",
      "deleted": false,
      "details": "Returns the complex hyperbolic sine of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::sinh",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 822
      },
      "name": "sinh",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sinh",
      "refid": "group__complex__numbers_1ga0cad9c06c002a36f31111df4b0754a43",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "sinh",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-sinh",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tanh",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::tanh",
      "deleted": false,
      "details": "Returns the complex hyperbolic tangent of a <code>complex</code> number.",
      "explicit": false,
      "fullname": "thrust::tanh",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 830
      },
      "name": "tanh",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tanh",
      "refid": "group__complex__numbers_1gac8917cdf406a97b3f4217aeff02c01cd",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "tanh",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-tanh",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-acos",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::acos",
      "deleted": false,
      "details": "Returns the complex arc cosine of a <code>complex</code> number.\n\nThe range of the real part of the result is [0, Pi] and the range of the imaginary part is [-inf, +inf]",
      "explicit": false,
      "fullname": "thrust::acos",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 845
      },
      "name": "acos",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::acos",
      "refid": "group__complex__numbers_1ga2e872deec2468e961bcefe4fdcef2e3a",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "acos",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-acos",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-asin",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::asin",
      "deleted": false,
      "details": "Returns the complex arc sine of a <code>complex</code> number.\n\nThe range of the real part of the result is [-Pi/2, Pi/2] and the range of the imaginary part is [-inf, +inf]",
      "explicit": false,
      "fullname": "thrust::asin",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 856
      },
      "name": "asin",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::asin",
      "refid": "group__complex__numbers_1ga7829ac4686e1f52f0c2ba424194d421e",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "asin",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-asin",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-atan",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::atan",
      "deleted": false,
      "details": "Returns the complex arc tangent of a <code>complex</code> number.\n\nThe range of the real part of the result is [-Pi/2, Pi/2] and the range of the imaginary part is [-inf, +inf]",
      "explicit": false,
      "fullname": "thrust::atan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 867
      },
      "name": "atan",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::atan",
      "refid": "group__complex__numbers_1ga208f54c7f272d8f79727d4d17fd54bca",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "atan",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-atan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-acosh",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::acosh",
      "deleted": false,
      "details": "Returns the complex inverse hyperbolic cosine of a <code>complex</code> number.\n\nThe range of the real part of the result is [0, +inf] and the range of the imaginary part is [-Pi, Pi]",
      "explicit": false,
      "fullname": "thrust::acosh",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 882
      },
      "name": "acosh",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::acosh",
      "refid": "group__complex__numbers_1ga415d6a014cefd4032c4434830061e837",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "acosh",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-acosh",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-asinh",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::asinh",
      "deleted": false,
      "details": "Returns the complex inverse hyperbolic sine of a <code>complex</code> number.\n\nThe range of the real part of the result is [-inf, +inf] and the range of the imaginary part is [-Pi/2, Pi/2]",
      "explicit": false,
      "fullname": "thrust::asinh",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 893
      },
      "name": "asinh",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::asinh",
      "refid": "group__complex__numbers_1ga6a787bef52398ed2f2f748b60043dd02",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "asinh",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-asinh",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-atanh",
      "argsString": "(const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ complex< T > thrust::atanh",
      "deleted": false,
      "details": "Returns the complex inverse hyperbolic tangent of a <code>complex</code> number.\n\nThe range of the real part of the result is [-inf, +inf] and the range of the imaginary part is [-Pi/2, Pi/2]",
      "explicit": false,
      "fullname": "thrust::atanh",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 904
      },
      "name": "atanh",
      "override": false,
      "paramList": [
        {
          "name": "z",
          "text": "The <code>complex</code> argument. "
        }
      ],
      "params": [
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::atanh",
      "refid": "group__complex__numbers_1ga726a6bdec3ede6d0ca7560773e1ae254",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "atanh",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T >",
      "typePlain": "__host__ __device__ complex< T >",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-atanh",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<<",
      "argsString": "(std::basic_ostream< CharT, Traits > &os, const complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "std::basic_ostream< CharT, Traits > & thrust::operator<<",
      "deleted": false,
      "details": "Writes to an output stream a <code>complex</code> number in the form (real, imaginary).",
      "explicit": false,
      "fullname": "thrust::operator<<",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/complex.h",
        "line": 904
      },
      "name": "operator<<",
      "override": false,
      "paramList": [
        {
          "name": "os",
          "text": "The output stream. "
        },
        {
          "name": "z",
          "text": "The <code>complex</code> number to output. "
        }
      ],
      "params": [
        {
          "name": "os",
          "type": "std::basic_ostream< CharT, Traits > &",
          "typePlain": "std::basic_ostream< CharT, Traits > &"
        },
        {
          "name": "z",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "const complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<<",
      "refid": "group__complex__numbers_1ga040f9fbb88115eebdb8dd423c5e7e134",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename CharT",
          "typePlain": "typename CharT"
        },
        {
          "name": "",
          "type": "typename Traits",
          "typePlain": "typename Traits"
        }
      ],
      "title": "operator<<",
      "type": "std::basic_ostream< CharT, Traits > &",
      "typePlain": "std::basic_ostream< CharT, Traits > &",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator<<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>>",
      "argsString": "(std::basic_istream< CharT, Traits > &is, complex< T > &z)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ std::basic_istream< CharT, Traits > & thrust::operator>>",
      "deleted": false,
      "details": "Reads a <code>complex</code> number from an input stream.\n\nThe recognized formats are:\n\n* real\n* (real)\n* (real, imaginary)\nThe values read must be convertible to the <code>complex's</code><code>value&#95;type</code>",
      "explicit": false,
      "fullname": "thrust::operator>>",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/complex.h",
        "line": 934
      },
      "name": "operator>>",
      "override": false,
      "paramList": [
        {
          "name": "is",
          "text": "The input stream. "
        },
        {
          "name": "z",
          "text": "The <code>complex</code> number to set. "
        }
      ],
      "params": [
        {
          "name": "is",
          "type": "std::basic_istream< CharT, Traits > &",
          "typePlain": "std::basic_istream< CharT, Traits > &"
        },
        {
          "name": "z",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T > &",
          "typePlain": "complex< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>>",
      "refid": "group__complex__numbers_1ga5285c99b59a0fb180f48ce7296a26c09",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename CharT",
          "typePlain": "typename CharT"
        },
        {
          "name": "",
          "type": "typename Traits",
          "typePlain": "typename Traits"
        }
      ],
      "title": "operator>>",
      "type": "__host__ std::basic_istream< CharT, Traits > &",
      "typePlain": "__host__ std::basic_istream< CharT, Traits > &",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator>>",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator==",
      "deleted": false,
      "details": "Returns true if two <code>complex</code> numbers are equal and false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 947
      },
      "name": "operator==",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "group__complex__numbers_1gafcd9fc41bcf64a4d329825269c2e6d65",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator==",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const complex< T0 > &x, const std::complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator==",
      "deleted": false,
      "details": "Returns true if two <code>complex</code> numbers are equal and false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 956
      },
      "name": "operator==",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const std::complex< T1 > &",
          "typePlain": "const std::complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "group__complex__numbers_1gaf94e038d90dc63d56115262f956a07ad",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator==",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const std::complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator==",
      "deleted": false,
      "details": "Returns true if two <code>complex</code> numbers are equal and false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 965
      },
      "name": "operator==",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const std::complex< T0 > &",
          "typePlain": "const std::complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "group__complex__numbers_1ga4ddf25a701c5aadb6c959a2cda1c1458",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator==",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const T0 &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator==",
      "deleted": false,
      "details": "Returns true if the imaginary part of the <code>complex</code> number is zero and the real part is equal to the scalar. Returns false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 975
      },
      "name": "operator==",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The scalar. "
        },
        {
          "name": "y",
          "text": "The <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "group__complex__numbers_1gafcd3df3dc470bbe445395eb8d4199d74",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator==",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const complex< T0 > &x, const T1 &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator==",
      "deleted": false,
      "details": "Returns true if the imaginary part of the <code>complex</code> number is zero and the real part is equal to the scalar. Returns false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 985
      },
      "name": "operator==",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The scalar. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "group__complex__numbers_1gabad99161005481883b2658ad4212af95",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator==",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator!=",
      "deleted": false,
      "details": "Returns true if two <code>complex</code> numbers are different and false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 994
      },
      "name": "operator!=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "group__complex__numbers_1ga342f74aa7a11eba35866a2349e346096",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator!=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const complex< T0 > &x, const std::complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator!=",
      "deleted": false,
      "details": "Returns true if two <code>complex</code> numbers are different and false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 1003
      },
      "name": "operator!=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const std::complex< T1 > &",
          "typePlain": "const std::complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "group__complex__numbers_1gae39d2484d48ac6237ae6bb89238e57fa",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator!=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const std::complex< T0 > &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator!=",
      "deleted": false,
      "details": "Returns true if two <code>complex</code> numbers are different and false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 1012
      },
      "name": "operator!=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The second <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const std::complex< T0 > &",
          "typePlain": "const std::complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "group__complex__numbers_1gac83260c7462d2b0be0abb07418460b9a",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator!=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const T0 &x, const complex< T1 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator!=",
      "deleted": false,
      "details": "Returns true if the imaginary part of the <code>complex</code> number is not zero or the real part is different from the scalar. Returns false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 1022
      },
      "name": "operator!=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The scalar. "
        },
        {
          "name": "y",
          "text": "The <code>complex</code>. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T1 > &",
          "typePlain": "const complex< T1 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "group__complex__numbers_1ga3e41b07055a0d89757b5776da98391fa",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator!=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const complex< T0 > &x, const T1 &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator!=",
      "deleted": false,
      "details": "Returns true if the imaginary part of the <code>complex</code> number is not zero or the real part is different from the scalar. Returns false otherwise.",
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/complex.h",
        "line": 1032
      },
      "name": "operator!=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The <code>complex</code>. "
        },
        {
          "name": "y",
          "text": "The scalar. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1complex.html\">complex</a>< T0 > &",
          "typePlain": "const complex< T0 > &"
        },
        {
          "name": "y",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "group__complex__numbers_1ga8cde522c1ae56e695b9d58793c053fe1",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "operator!=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__complex__numbers.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::copy",
      "deleted": false,
      "details": "<code>copy</code> copies elements from the range [<code>first</code>, <code>last</code>) to the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>)). That is, it performs the assignments *<code>result</code> = *<code>first</code>, *(<code>result</code> + <code>1</code>) = *(<code>first</code> + <code>1</code>), and so on. Generally, for every integer <code>n</code> from <code>0</code> to <code>last</code> - <code>first</code>, <code>copy</code> performs the assignment *(<code>result</code> + <code>n</code>) = *(<code>first</code> + <code>n</code>). Unlike <code>std::copy</code>, <code>copy</code> offers no guarantee on order of operation. As a result, calling <code>copy</code> with overlapping source and destination ranges has undefined behavior.\n\nThe return value is <code>result</code> + (<code>last</code> - <code>first</code>).\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>copy</code> to copy from one range to another using the <code>thrust::device</code> parallelization policy:\n\n\n\n```cpp\n#include <thrust/copy.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n\nthrust::device_vector<int> vec0(100);\nthrust::device_vector<int> vec1(100);\n...\n\nthrust::copy(thrust::device, vec0.begin(), vec0.end(), vec1.begin());\n\n// vec1 is now a copy of vec0\n```",
      "explicit": false,
      "fullname": "thrust::copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 84
      },
      "name": "copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to copy. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy. "
        },
        {
          "name": "result",
          "text": "The destination sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>result</code> may be equal to <code>first</code>, but <code>result</code> shall not be in the range <code>[first, last)</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy",
      "refid": "group__copying_1ga3e43fb8472db501412452fa27b931ee2",
      "returns": [
        "The end of the destination sequence. "
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/copy\">https://en.cppreference.com/w/cpp/algorithm/copy</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "copy",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy-n",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, Size n, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::copy_n",
      "deleted": false,
      "details": "<code>copy&#95;n</code> copies elements from the range <code>[first, first + n)</code> to the range <code>[result, result + n)</code>. That is, it performs the assignments <code>&#42;result = &#42;first, &#42;(result + 1) = &#42;(first + 1)</code>, and so on. Generally, for every integer <code>i</code> from <code>0</code> to <code>n</code>, <code>copy</code> performs the assignment *(<code>result</code> + <code>i</code>) = *(<code>first</code> + <code>i</code>). Unlike <code>std::copy&#95;n</code>, <code>copy&#95;n</code> offers no guarantee on order of operation. As a result, calling <code>copy&#95;n</code> with overlapping source and destination ranges has undefined behavior.\n\nThe return value is <code>result</code> + <code>n</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>copy</code> to copy from one range to another using the <code>thrust::device</code> parallelization policy:\n\n\n\n```cpp\n#include <thrust/copy.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nsize_t n = 100;\nthrust::device_vector<int> vec0(n);\nthrust::device_vector<int> vec1(n);\n...\nthrust::copy_n(thrust::device, vec0.begin(), n, vec1.begin());\n\n// vec1 is now a copy of vec0\n```",
      "explicit": false,
      "fullname": "thrust::copy_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 137
      },
      "name": "copy_n",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range to copy. "
        },
        {
          "name": "n",
          "text": "The number of elements to copy. "
        },
        {
          "name": "result",
          "text": "The beginning destination range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>result</code> may be equal to <code>first</code>, but <code>result</code> shall not be in the range <code>[first, first + n)</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy_n",
      "refid": "group__copying_1gad7de8cc38a5a9196b9ebf11fee69052b",
      "returns": [
        "The end of the destination range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/copy_n\">https://en.cppreference.com/w/cpp/algorithm/copy_n</a>",
        "thrust::copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Size",
          "text": "is an integral type. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "copy_n",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-copy-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::copy",
      "deleted": false,
      "details": "<code>copy</code> copies elements from the range [<code>first</code>, <code>last</code>) to the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>)). That is, it performs the assignments *<code>result</code> = *<code>first</code>, *(<code>result</code> + <code>1</code>) = *(<code>first</code> + <code>1</code>), and so on. Generally, for every integer <code>n</code> from <code>0</code> to <code>last</code> - <code>first</code>, <code>copy</code> performs the assignment *(<code>result</code> + <code>n</code>) = *(<code>first</code> + <code>n</code>). Unlike <code>std::copy</code>, <code>copy</code> offers no guarantee on order of operation. As a result, calling <code>copy</code> with overlapping source and destination ranges has undefined behavior.\n\nThe return value is <code>result</code> + (<code>last</code> - <code>first</code>).\n\n\nThe following code snippet demonstrates how to use <code>copy</code> to copy from one range to another.\n\n\n\n```cpp\n#include <thrust/copy.h>\n#include <thrust/device_vector.h>\n...\n\nthrust::device_vector<int> vec0(100);\nthrust::device_vector<int> vec1(100);\n...\n\nthrust::copy(vec0.begin(), vec0.end(),\n             vec1.begin());\n\n// vec1 is now a copy of vec0\n```",
      "explicit": false,
      "fullname": "thrust::copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 185
      },
      "name": "copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to copy. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy. "
        },
        {
          "name": "result",
          "text": "The destination sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>result</code> may be equal to <code>first</code>, but <code>result</code> shall not be in the range <code>[first, last)</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy",
      "refid": "group__copying_1ga24ccfaaa706a9163ec5117758fdb71b9",
      "returns": [
        "The end of the destination sequence. "
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/copy\">https://en.cppreference.com/w/cpp/algorithm/copy</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "copy",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy-n",
      "argsString": "(InputIterator first, Size n, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::copy_n",
      "deleted": false,
      "details": "<code>copy&#95;n</code> copies elements from the range <code>[first, first + n)</code> to the range <code>[result, result + n)</code>. That is, it performs the assignments <code>&#42;result = &#42;first, &#42;(result + 1) = &#42;(first + 1)</code>, and so on. Generally, for every integer <code>i</code> from <code>0</code> to <code>n</code>, <code>copy</code> performs the assignment *(<code>result</code> + <code>i</code>) = *(<code>first</code> + <code>i</code>). Unlike <code>std::copy&#95;n</code>, <code>copy&#95;n</code> offers no guarantee on order of operation. As a result, calling <code>copy&#95;n</code> with overlapping source and destination ranges has undefined behavior.\n\nThe return value is <code>result</code> + <code>n</code>.\n\n\nThe following code snippet demonstrates how to use <code>copy</code> to copy from one range to another.\n\n\n\n```cpp\n#include <thrust/copy.h>\n#include <thrust/device_vector.h>\n...\nsize_t n = 100;\nthrust::device_vector<int> vec0(n);\nthrust::device_vector<int> vec1(n);\n...\nthrust::copy_n(vec0.begin(), n, vec1.begin());\n\n// vec1 is now a copy of vec0\n```",
      "explicit": false,
      "fullname": "thrust::copy_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 230
      },
      "name": "copy_n",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range to copy. "
        },
        {
          "name": "n",
          "text": "The number of elements to copy. "
        },
        {
          "name": "result",
          "text": "The beginning destination range. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>result</code> may be equal to <code>first</code>, but <code>result</code> shall not be in the range <code>[first, first + n)</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy_n",
      "refid": "group__copying_1gab3d33f1aa1d078b5f6b579f07313d058",
      "returns": [
        "The end of the destination range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/copy_n\">https://en.cppreference.com/w/cpp/algorithm/copy_n</a>",
        "thrust::copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Size",
          "text": "is an integral type. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "copy_n",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-copy-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::copy_if",
      "deleted": false,
      "details": "This version of <code>copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that any element which causes <code>pred</code> to be <code>false</code> is not copied. <code>copy&#95;if</code> is stable, meaning that the relative order of elements that are copied is unchanged.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>copy&#95;if</code> performs the assignment <code>&#42;result = &#42;(first+n)</code> and <code>result</code> is advanced one position if <code>pred(&#42;(first+n))</code>. Otherwise, no assignment occurs and <code>result</code> is not advanced.\n\nThe algorithm's execution is parallelized as determined by <code>system</code>.\n\n\nThe following code snippet demonstrates how to use <code>copy&#95;if</code> to perform stream compaction to copy even numbers to an output range using the <code>thrust::host</code> parallelization policy:\n\n\n\n```cpp\n#include <thrust/copy.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint result[4];\n\nthrust::copy_if(thrust::host, V, V + N, result, is_even());\n\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-2, 0, 0, 2}\n```",
      "explicit": false,
      "fullname": "thrust::copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 300
      },
      "name": "copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence from which to copy. "
        },
        {
          "name": "last",
          "text": "The end of the sequence from which to copy. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence into which to copy. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first, last)</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy_if",
      "refid": "group__stream__compaction_1ga695e974946e56f2ecfb20e9ec4fb7cca",
      "returns": [
        "<code>result + n</code>, where <code>n</code> is equal to the number of times <code>pred</code> evaluated to <code>true</code> in the range <code>[first, last)</code>."
      ],
      "see": [
        "<code>remove&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy-if",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::copy_if",
      "deleted": false,
      "details": "This version of <code>copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that any element which causes <code>pred</code> to <code>false</code> is not copied. <code>copy&#95;if</code> is stable, meaning that the relative order of elements that are copied is unchanged.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>copy&#95;if</code> performs the assignment <code>&#42;result = &#42;(first+n)</code> and <code>result</code> is advanced one position if <code>pred(&#42;(first+n))</code>. Otherwise, no assignment occurs and <code>result</code> is not advanced.\n\n\nThe following code snippet demonstrates how to use <code>copy&#95;if</code> to perform stream compaction to copy even numbers to an output range.\n\n\n\n```cpp\n#include <thrust/copy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint result[4];\n\nthrust::copy_if(V, V + N, result, is_even());\n\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-2, 0, 0, 2}\n```",
      "explicit": false,
      "fullname": "thrust::copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 362
      },
      "name": "copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence from which to copy. "
        },
        {
          "name": "last",
          "text": "The end of the sequence from which to copy. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence into which to copy. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first, last)</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy_if",
      "refid": "group__stream__compaction_1gafd4cd96b998ad2b3c336be1e24dc1f67",
      "returns": [
        "<code>result + n</code>, where <code>n</code> is equal to the number of times <code>pred</code> evaluated to <code>true</code> in the range <code>[first, last)</code>."
      ],
      "see": [
        "<code>remove&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::copy_if",
      "deleted": false,
      "details": "This version of <code>copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that any element whose corresponding stencil element causes <code>pred</code> to be <code>false</code> is not copied. <code>copy&#95;if</code> is stable, meaning that the relative order of elements that are copied is unchanged.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>copy&#95;if</code> performs the assignment <code>&#42;result = &#42;(first+n)</code> and <code>result</code> is advanced one position if <code>pred(&#42;(stencil+n))</code>. Otherwise, no assignment occurs and <code>result</code> is not advanced.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>copy&#95;if</code> to perform stream compaction to copy numbers to an output range when corresponding stencil elements are even using the <code>thrust::host</code> execution policy:\n\n\n\n```cpp\n#include <thrust/copy.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint N = 6;\nint data[N]    = { 0, 1,  2, 3, 4, 5};\nint stencil[N] = {-2, 0, -1, 0, 1, 2};\nint result[4];\n\nthrust::copy_if(thrust::host, data, data + N, stencil, result, is_even());\n\n// data remains    = { 0, 1,  2, 3, 4, 5};\n// stencil remains = {-2, 0, -1, 0, 1, 2};\n// result is now     { 0, 1,  3, 5}\n```",
      "explicit": false,
      "fullname": "thrust::copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 431
      },
      "name": "copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence from which to copy. "
        },
        {
          "name": "last",
          "text": "The end of the sequence from which to copy. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence into which to copy. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[stencil, stencil + (last-first))</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap. ",
        "The ranges <code>[stencil, stencil + (last - first))</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy_if",
      "refid": "group__stream__compaction_1gac1155c0eddf9d5145776bd454732415b",
      "returns": [
        "<code>result + n</code>, where <code>n</code> is equal to the number of times <code>pred</code> evaluated to <code>true</code> in the range <code>[stencil, stencil + (last-first))</code>."
      ],
      "see": [
        "<code>remove&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/OutputIterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-copy-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::copy_if",
      "deleted": false,
      "details": "This version of <code>copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that any element whose corresponding stencil element causes <code>pred</code> to be <code>false</code> is not copied. <code>copy&#95;if</code> is stable, meaning that the relative order of elements that are copied is unchanged.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>copy&#95;if</code> performs the assignment <code>&#42;result = &#42;(first+n)</code> and <code>result</code> is advanced one position if <code>pred(&#42;(stencil+n))</code>. Otherwise, no assignment occurs and <code>result</code> is not advanced.\n\n\nThe following code snippet demonstrates how to use <code>copy&#95;if</code> to perform stream compaction to copy numbers to an output range when corresponding stencil elements are even:\n\n\n\n```cpp\n#include <thrust/copy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint N = 6;\nint data[N]    = { 0, 1,  2, 3, 4, 5};\nint stencil[N] = {-2, 0, -1, 0, 1, 2};\nint result[4];\n\nthrust::copy_if(data, data + N, stencil, result, is_even());\n\n// data remains    = { 0, 1,  2, 3, 4, 5};\n// stencil remains = {-2, 0, -1, 0, 1, 2};\n// result is now     { 0, 1,  3, 5}\n```",
      "explicit": false,
      "fullname": "thrust::copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/copy.h",
        "line": 499
      },
      "name": "copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence from which to copy. "
        },
        {
          "name": "last",
          "text": "The end of the sequence from which to copy. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence into which to copy. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[stencil, stencil + (last-first))</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap. ",
        "The ranges <code>[stencil, stencil + (last - first))</code> and <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::copy_if",
      "refid": "group__stream__compaction_1ga36d9d6ed8e17b442c1fd8dc40bd515d5",
      "returns": [
        "<code>result + n</code>, where <code>n</code> is equal to the number of times <code>pred</code> evaluated to <code>true</code> in the range <code>[stencil, stencil + (last-first))</code>."
      ],
      "see": [
        "<code>remove&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/OutputIterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-count",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, const EqualityComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< InputIterator >::difference_type thrust::count",
      "deleted": false,
      "details": "<code>count</code> finds the number of elements in <code>[first,last)</code> that are equal to <code>value</code>. More precisely, <code>count</code> returns the number of iterators <code>i</code> in <code>[first, last)</code> such that <code>&#42;i == value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>count</code> to count the number of instances in a range of a value of interest using the <code>thrust::device</code> execution policy:\n\n\n\n```cpp\n#include <thrust/count.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n// put 3 1s in a device_vector\nthrust::device_vector<int> vec(5,0);\nvec[1] = 1;\nvec[3] = 1;\nvec[4] = 1;\n\n// count the 1s\nint result = thrust::count(thrust::device, vec.begin(), vec.end(), 1);\n// result == 3\n```",
      "explicit": false,
      "fullname": "thrust::count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/count.h",
        "line": 84
      },
      "name": "count",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "value",
          "text": "The value to be counted. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "value",
          "type": "const EqualityComparable &",
          "typePlain": "const EqualityComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::count",
      "refid": "group__counting_1gadcc5ee87e006d41f417e8f8e97be2b52",
      "returns": [
        "The number of elements equal to <code>value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/count\">https://en.cppreference.com/w/cpp/algorithm/count</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename EqualityComparable",
          "typePlain": "typename EqualityComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be a model of must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "EqualityComparable",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a> and can be compared for equality with <code>InputIterator's</code><code>value&#95;type</code>"
        }
      ],
      "title": "count",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< InputIterator >::difference_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< InputIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__counting.html#function-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-count",
      "argsString": "(InputIterator first, InputIterator last, const EqualityComparable &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::iterator_traits< InputIterator >::difference_type thrust::count",
      "deleted": false,
      "details": "<code>count</code> finds the number of elements in <code>[first,last)</code> that are equal to <code>value</code>. More precisely, <code>count</code> returns the number of iterators <code>i</code> in <code>[first, last)</code> such that <code>&#42;i == value</code>.\n\n\nThe following code snippet demonstrates how to use <code>count</code> to count the number of instances in a range of a value of interest. \n\n```cpp\n#include <thrust/count.h>\n#include <thrust/device_vector.h>\n...\n// put 3 1s in a device_vector\nthrust::device_vector<int> vec(5,0);\nvec[1] = 1;\nvec[3] = 1;\nvec[4] = 1;\n\n// count the 1s\nint result = thrust::count(vec.begin(), vec.end(), 1);\n// result == 3\n```",
      "explicit": false,
      "fullname": "thrust::count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/count.h",
        "line": 121
      },
      "name": "count",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "value",
          "text": "The value to be counted. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "value",
          "type": "const EqualityComparable &",
          "typePlain": "const EqualityComparable &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::count",
      "refid": "group__counting_1ga44673d327c2caf92e51d0b479044fd4e",
      "returns": [
        "The number of elements equal to <code>value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/count\">https://en.cppreference.com/w/cpp/algorithm/count</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename EqualityComparable",
          "typePlain": "typename EqualityComparable"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be a model of must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "EqualityComparable",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a> and can be compared for equality with <code>InputIterator's</code><code>value&#95;type</code>"
        }
      ],
      "title": "count",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< InputIterator >::difference_type",
      "typePlain": "thrust::iterator_traits< InputIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__counting.html#function-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-count-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< InputIterator >::difference_type thrust::count_if",
      "deleted": false,
      "details": "<code>count&#95;if</code> finds the number of elements in <code>[first,last)</code> for which a predicate is <code>true</code>. More precisely, <code>count&#95;if</code> returns the number of iterators <code>i</code> in <code>[first, last)</code> such that <code>pred(&#42;i) == true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>count</code> to count the number of odd numbers in a range using the <code>thrust::device</code> execution policy:\n\n\n\n```cpp\n#include <thrust/count.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_odd\n{\n  __host__ __device__\n  bool operator()(int &x)\n  {\n    return x & 1;\n  }\n};\n...\n// fill a device_vector with even & odd numbers\nthrust::device_vector<int> vec(5);\nvec[0] = 0;\nvec[1] = 1;\nvec[2] = 2;\nvec[3] = 3;\nvec[4] = 4;\n\n// count the odd elements in vec\nint result = thrust::count_if(thrust::device, vec.begin(), vec.end(), is_odd());\n// result == 2\n```",
      "explicit": false,
      "fullname": "thrust::count_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/count.h",
        "line": 175
      },
      "name": "count_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "The predicate. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::count_if",
      "refid": "group__counting_1ga870002a18569b26ea38150e497f13381",
      "returns": [
        "The number of elements where <code>pred</code> is <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/count\">https://en.cppreference.com/w/cpp/algorithm/count</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "count_if",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< InputIterator >::difference_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< InputIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__counting.html#function-count-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-count-if",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::iterator_traits< InputIterator >::difference_type thrust::count_if",
      "deleted": false,
      "details": "<code>count&#95;if</code> finds the number of elements in <code>[first,last)</code> for which a predicate is <code>true</code>. More precisely, <code>count&#95;if</code> returns the number of iterators <code>i</code> in <code>[first, last)</code> such that <code>pred(&#42;i) == true</code>.\n\n\nThe following code snippet demonstrates how to use <code>count</code> to count the number of odd numbers in a range. \n\n```cpp\n#include <thrust/count.h>\n#include <thrust/device_vector.h>\n...\nstruct is_odd\n{\n  __host__ __device__\n  bool operator()(int &x)\n  {\n    return x & 1;\n  }\n};\n...\n// fill a device_vector with even & odd numbers\nthrust::device_vector<int> vec(5);\nvec[0] = 0;\nvec[1] = 1;\nvec[2] = 2;\nvec[3] = 3;\nvec[4] = 4;\n\n// count the odd elements in vec\nint result = thrust::count_if(vec.begin(), vec.end(), is_odd());\n// result == 2\n```",
      "explicit": false,
      "fullname": "thrust::count_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/count.h",
        "line": 222
      },
      "name": "count_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "The predicate. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::count_if",
      "refid": "group__counting_1ga632cfedf61f2107f734814da1f3b4c3e",
      "returns": [
        "The number of elements where <code>pred</code> is <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/count\">https://en.cppreference.com/w/cpp/algorithm/count</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "count_if",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< InputIterator >::difference_type",
      "typePlain": "thrust::iterator_traits< InputIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__counting.html#function-count-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-delete",
      "argsString": "(thrust::device_ptr< T > ptr, const size_t n=1)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::device_delete",
      "deleted": false,
      "details": "<code>device&#95;delete</code> deletes a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> allocated with <code>device&#95;new</code>.",
      "explicit": false,
      "fullname": "thrust::device_delete",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/device_delete.h",
        "line": 44
      },
      "name": "device_delete",
      "override": false,
      "paramList": [
        {
          "name": "ptr",
          "text": "The <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to delete, assumed to have been allocated with <code>device&#95;new</code>. "
        },
        {
          "name": "n",
          "text": "The number of objects to destroy at <code>ptr</code>. Defaults to <code>1</code> similar to <code>device&#95;new</code>."
        }
      ],
      "params": [
        {
          "name": "ptr",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">thrust::device_ptr</a>< T >",
          "typePlain": "thrust::device_ptr< T >"
        },
        {
          "defval": "1",
          "defvalPlain": "1",
          "name": "n",
          "type": "const size_t",
          "typePlain": "const size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_delete",
      "refid": "group__memory__management_1ga1c393e01036d27ed0c0ab2a1750957dc",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>",
        "device_new "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_delete",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-delete",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-free",
      "argsString": "(thrust::device_ptr< void > ptr)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::device_free",
      "deleted": false,
      "details": "<code>device&#95;free</code> deallocates memory allocated by the function <code>device&#95;malloc</code>.\n\n\nThe following code snippet demonstrates how to use <code>device&#95;free</code> to deallocate memory allocated by <code>device&#95;malloc</code>.\n\n\n\n```cpp\n#include <thrust/device_malloc.h>\n#include <thrust/device_free.h>\n...\n// allocate some integers with device_malloc\nconst int N = 100;\nthrust::device_ptr<int> int_array = thrust::device_malloc<int>(N);\n\n// manipulate integers\n...\n\n// deallocate with device_free\nthrust::device_free(int_array);\n```",
      "explicit": false,
      "fullname": "thrust::device_free",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 13,
        "file": "thrust/device_free.h",
        "line": 57
      },
      "name": "device_free",
      "override": false,
      "paramList": [
        {
          "name": "ptr",
          "text": "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> pointing to memory to be deallocated."
        }
      ],
      "params": [
        {
          "name": "ptr",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">thrust::device_ptr</a>< void >",
          "typePlain": "thrust::device_ptr< void >"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_free",
      "refid": "group__memory__management_1ga1a350740a6ade432f3781096df91f162",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>",
        "device_malloc "
      ],
      "static": false,
      "strong": false,
      "title": "device_free",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-free",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-make-unique",
      "argsString": "(Args &&... args) THRUST_TRAILING_RETURN(decltype(uninitialized_allocate_unique< T >(device_allocator< T >",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ auto thrust::device_make_unique",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::device_make_unique",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 43,
        "bodyFile": "thrust/device_make_unique.h",
        "bodyStart": 41,
        "column": 6,
        "file": "thrust/device_make_unique.h",
        "line": 41
      },
      "name": "device_make_unique",
      "override": false,
      "params": [
        {
          "name": "args",
          "type": "Args &&...",
          "typePlain": "Args &&..."
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_make_unique",
      "refid": "device__make__unique_8h_1a5dcecfbe6b0c0aed0553691463033bcd",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Args",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "device_make_unique",
      "type": "__host__ auto",
      "typePlain": "__host__ auto",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-device-make-unique",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-malloc",
      "argsString": "(const std::size_t n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::device_ptr< void > thrust::device_malloc",
      "deleted": false,
      "details": "This version of <code>device&#95;malloc</code> allocates sequential device storage for bytes.\n\n\nThe following code snippet demonstrates how to use <code>device&#95;malloc</code> to allocate a range of device memory.\n\n\n\n```cpp\n#include <thrust/device_malloc.h>\n#include <thrust/device_free.h>\n...\n// allocate some memory with device_malloc\nconst int N = 100;\nthrust::device_ptr<void> void_ptr = thrust::device_malloc(N);\n\n// manipulate memory\n...\n\n// deallocate with device_free\nthrust::device_free(void_ptr);\n```",
      "explicit": false,
      "fullname": "thrust::device_malloc",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 27,
        "file": "thrust/device_malloc.h",
        "line": 61
      },
      "name": "device_malloc",
      "override": false,
      "paramList": [
        {
          "name": "n",
          "text": "The number of bytes to allocate sequentially in device memory. "
        }
      ],
      "params": [
        {
          "name": "n",
          "type": "const std::size_t",
          "typePlain": "const std::size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_malloc",
      "refid": "group__memory__management_1gae72d05ffd1c43049d17788db298467e8",
      "returns": [
        "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to the newly allocated memory."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>",
        "device_free "
      ],
      "static": false,
      "strong": false,
      "title": "device_malloc",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">thrust::device_ptr</a>< void >",
      "typePlain": "thrust::device_ptr< void >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-malloc",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-malloc",
      "argsString": "(const std::size_t n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::device_ptr< T > thrust::device_malloc",
      "deleted": false,
      "details": "This version of <code>device&#95;malloc</code> allocates sequential device storage for new objects of the given type.\n\n\nThe following code snippet demonstrates how to use <code>device&#95;malloc</code> to allocate a range of device memory.\n\n\n\n```cpp\n#include <thrust/device_malloc.h>\n#include <thrust/device_free.h>\n...\n// allocate some integers with device_malloc\nconst int N = 100;\nthrust::device_ptr<int> int_array = thrust::device_malloc<int>(N);\n\n// manipulate integers\n...\n\n// deallocate with device_free\nthrust::device_free(int_array);\n```",
      "explicit": false,
      "fullname": "thrust::device_malloc",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 29,
        "file": "thrust/device_malloc.h",
        "line": 92
      },
      "name": "device_malloc",
      "override": false,
      "paramList": [
        {
          "name": "n",
          "text": "The number of objects of type T to allocate sequentially in device memory. "
        }
      ],
      "params": [
        {
          "name": "n",
          "type": "const std::size_t",
          "typePlain": "const std::size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_malloc",
      "refid": "group__memory__management_1ga16490f90e8e83033b0b8ca5bd36353db",
      "returns": [
        "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to the newly allocated memory."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>",
        "device_free "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_malloc",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">thrust::device_ptr</a>< T >",
      "typePlain": "thrust::device_ptr< T >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-malloc",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-malloc",
      "argsString": "(const std::size_t n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "device_ptr< T > thrust::device_malloc",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::device_malloc",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 23,
        "file": "thrust/device_malloc_allocator.h",
        "line": 35
      },
      "name": "device_malloc",
      "override": false,
      "params": [
        {
          "name": "n",
          "type": "const std::size_t",
          "typePlain": "const std::size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_malloc",
      "refid": "device__malloc__allocator_8h_1a45b46200ffdb02a4ef9191103e6f12b9",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_malloc",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T >",
      "typePlain": "device_ptr< T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-device-malloc",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-new",
      "argsString": "(device_ptr< void > p, const size_t n=1)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "device_ptr< T > thrust::device_new",
      "deleted": false,
      "details": "<code>device&#95;new</code> implements the placement <code>new</code> operator for types resident in device memory. <code>device&#95;new</code> calls <code>T</code>'s null constructor on a array of objects in device memory. No memory is allocated by this function.",
      "explicit": false,
      "fullname": "thrust::device_new",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/device_new.h",
        "line": 50
      },
      "name": "device_new",
      "override": false,
      "paramList": [
        {
          "name": "p",
          "text": "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to a region of device memory into which to construct one or many <code>T</code>s. "
        },
        {
          "name": "n",
          "text": "The number of objects to construct at <code>p</code>. "
        }
      ],
      "params": [
        {
          "name": "p",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< void >",
          "typePlain": "device_ptr< void >"
        },
        {
          "defval": "1",
          "defvalPlain": "1",
          "name": "n",
          "type": "const size_t",
          "typePlain": "const size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_new",
      "refid": "group__memory__management_1ga86a38bc1d1e0801e1a7b9abe186645ba",
      "returns": [
        "p, casted to <code>T</code>'s type."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_new",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T >",
      "typePlain": "device_ptr< T >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-new",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-new",
      "argsString": "(device_ptr< void > p, const T &exemplar, const size_t n=1)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "device_ptr< T > thrust::device_new",
      "deleted": false,
      "details": "<code>device&#95;new</code> implements the placement new operator for types resident in device memory. <code>device&#95;new</code> calls <code>T</code>'s copy constructor on a array of objects in device memory. No memory is allocated by this function.",
      "explicit": false,
      "fullname": "thrust::device_new",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/device_new.h",
        "line": 68
      },
      "name": "device_new",
      "override": false,
      "paramList": [
        {
          "name": "p",
          "text": "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to a region of device memory into which to construct one or many <code>T</code>s. "
        },
        {
          "name": "exemplar",
          "text": "The value from which to copy. "
        },
        {
          "name": "n",
          "text": "The number of objects to construct at <code>p</code>. "
        }
      ],
      "params": [
        {
          "name": "p",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< void >",
          "typePlain": "device_ptr< void >"
        },
        {
          "name": "exemplar",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "defval": "1",
          "defvalPlain": "1",
          "name": "n",
          "type": "const size_t",
          "typePlain": "const size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_new",
      "refid": "group__memory__management_1ga6b0c18a0fdeba5cf935fd45af68a421e",
      "returns": [
        "p, casted to <code>T</code>'s type."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>",
        "fill "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_new",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T >",
      "typePlain": "device_ptr< T >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-new",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-new",
      "argsString": "(const size_t n=1)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "device_ptr< T > thrust::device_new",
      "deleted": false,
      "details": "<code>device&#95;new</code> implements the new operator for types resident in device memory. It allocates device memory large enough to hold <code>n</code> new objects of type <code>T</code>.",
      "explicit": false,
      "fullname": "thrust::device_new",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/device_new.h",
        "line": 79
      },
      "name": "device_new",
      "override": false,
      "paramList": [
        {
          "name": "n",
          "text": "The number of objects to allocate. Defaults to <code>1</code>. "
        }
      ],
      "params": [
        {
          "defval": "1",
          "defvalPlain": "1",
          "name": "n",
          "type": "const size_t",
          "typePlain": "const size_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_new",
      "refid": "group__memory__management_1gac414af4b15c3216bad91a1cf27287753",
      "returns": [
        "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to the newly allocated region of device memory. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_new",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T >",
      "typePlain": "device_ptr< T >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-new",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<<",
      "argsString": "(std::basic_ostream< CharT, Traits > &os, device_ptr< T > const &dp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ std::basic_ostream< CharT, Traits > & thrust::operator<<",
      "deleted": false,
      "details": "Write the address that a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> points to to an output stream.",
      "explicit": false,
      "fullname": "thrust::operator<<",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/device_ptr.h",
        "line": 179
      },
      "name": "operator<<",
      "override": false,
      "paramList": [
        {
          "name": "os",
          "text": "The output stream. "
        },
        {
          "name": "dp",
          "text": "The <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to output."
        }
      ],
      "params": [
        {
          "name": "os",
          "type": "std::basic_ostream< CharT, Traits > &",
          "typePlain": "std::basic_ostream< CharT, Traits > &"
        },
        {
          "name": "dp",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T > const &",
          "typePlain": "device_ptr< T > const &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<<",
      "refid": "group__memory__management_1gad524df6cd5b37a5e268b3ac299727431",
      "returns": [
        "<code>os</code>. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename CharT",
          "typePlain": "typename CharT"
        },
        {
          "name": "",
          "type": "typename Traits",
          "typePlain": "typename Traits"
        }
      ],
      "title": "operator<<",
      "type": "__host__ std::basic_ostream< CharT, Traits > &",
      "typePlain": "__host__ std::basic_ostream< CharT, Traits > &",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-operator<<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-pointer-cast",
      "argsString": "(T *ptr)",
      "brief": "Create a <code>device&#95;ptr</code> from a raw pointer. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ device_ptr< T > thrust::device_pointer_cast",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::device_pointer_cast",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 12,
        "file": "thrust/device_ptr.h",
        "line": 194
      },
      "name": "device_pointer_cast",
      "override": false,
      "paramList": [
        {
          "name": "ptr",
          "text": "A raw pointer to a <code>T</code> in device memory."
        }
      ],
      "params": [
        {
          "name": "ptr",
          "type": "T *",
          "typePlain": "T *"
        }
      ],
      "pre": [
        "<code>ptr</code> points to a location in device memory."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_pointer_cast",
      "refid": "group__memory__management_1gae0d8eafae56389ebb93acddab751e849",
      "returns": [
        "A <code>device&#95;ptr&lt;T&gt;</code> pointing to <code>ptr</code>. "
      ],
      "static": false,
      "strong": false,
      "summary": "Create a device_ptr from a raw pointer. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "Any type. "
        }
      ],
      "title": "device_pointer_cast",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T >",
      "typePlain": "__host__ __device__ device_ptr< T >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-pointer-cast",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-device-pointer-cast",
      "argsString": "(device_ptr< T > const &dptr)",
      "brief": "Create a <code>device&#95;ptr</code> from another <code>device&#95;ptr</code>. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ device_ptr< T > thrust::device_pointer_cast",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::device_pointer_cast",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 12,
        "file": "thrust/device_ptr.h",
        "line": 203
      },
      "name": "device_pointer_cast",
      "override": false,
      "paramList": [
        {
          "name": "dptr",
          "text": "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device&#95;ptr</a></code> to a <code>T</code>. "
        }
      ],
      "params": [
        {
          "name": "dptr",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T > const &",
          "typePlain": "device_ptr< T > const &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::device_pointer_cast",
      "refid": "group__memory__management_1gaae8877ee375bd853c3fb175650de72bc",
      "static": false,
      "strong": false,
      "summary": "Create a device_ptr from another device_ptr. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "Any type. "
        }
      ],
      "title": "device_pointer_cast",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__ptr.html\">device_ptr</a>< T >",
      "typePlain": "__host__ __device__ device_ptr< T >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-device-pointer-cast",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap",
      "argsString": "(device_reference< T > &x, device_reference< T > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::swap",
      "deleted": false,
      "details": "swaps the value of one <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device&#95;reference</a></code> with another. <code>x</code> The first <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device&#95;reference</a></code> of interest. <code>y</code> The second <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device&#95;reference</a></code> of interest. ",
      "explicit": false,
      "fullname": "thrust::swap",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 968,
        "bodyFile": "thrust/device_reference.h",
        "bodyStart": 965,
        "column": 6,
        "file": "thrust/device_reference.h",
        "line": 965
      },
      "name": "swap",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device_reference</a>< T > &",
          "typePlain": "device_reference< T > &"
        },
        {
          "name": "y",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device_reference</a>< T > &",
          "typePlain": "device_reference< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap",
      "refid": "group__memory__management_1gaa677af4b24a5b9067359809a1f5df3e7",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "swap",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-swap",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<<",
      "argsString": "(std::basic_ostream< charT, traits > &os, const device_reference< T > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "std::basic_ostream< charT, traits > & thrust::operator<<",
      "deleted": false,
      "details": "Writes to an output stream the value of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device&#95;reference</a></code>.",
      "explicit": false,
      "fullname": "thrust::operator<<",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/device_reference.h",
        "line": 965
      },
      "name": "operator<<",
      "override": false,
      "paramList": [
        {
          "name": "os",
          "text": "The output stream. "
        },
        {
          "name": "y",
          "text": "The <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device&#95;reference</a></code> to output. "
        }
      ],
      "params": [
        {
          "name": "os",
          "type": "std::basic_ostream< charT, traits > &",
          "typePlain": "std::basic_ostream< charT, traits > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__reference.html\">device_reference</a>< T > &",
          "typePlain": "const device_reference< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<<",
      "refid": "group__memory__management_1gaa889fe30a5e2776131314ec5612e58ad",
      "returns": [
        "os. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename charT",
          "typePlain": "typename charT"
        },
        {
          "name": "",
          "type": "typename traits",
          "typePlain": "typename traits"
        }
      ],
      "title": "operator<<",
      "type": "std::basic_ostream< charT, traits > &",
      "typePlain": "std::basic_ostream< charT, traits > &",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-operator<<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap",
      "argsString": "(device_vector< T, Alloc > &a, device_vector< T, Alloc > &b)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::swap",
      "deleted": false,
      "details": "Exchanges the values of two vectors. <code>x</code> The first <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> of interest. <code>y</code> The second <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> of interest. ",
      "explicit": false,
      "fullname": "thrust::swap",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 486,
        "bodyFile": "thrust/device_vector.h",
        "bodyStart": 483,
        "column": 8,
        "file": "thrust/device_vector.h",
        "line": 483
      },
      "name": "swap",
      "override": false,
      "params": [
        {
          "name": "a",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device_vector</a>< T, Alloc > &",
          "typePlain": "device_vector< T, Alloc > &"
        },
        {
          "name": "b",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device_vector</a>< T, Alloc > &",
          "typePlain": "device_vector< T, Alloc > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap",
      "refid": "group__containers_1ga9b8fee20df6bdcd66e3dc378843d2893",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Alloc",
          "typePlain": "typename Alloc"
        }
      ],
      "title": "swap",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__containers.html#function-swap",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-distance",
      "argsString": "(InputIterator first, InputIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< InputIterator >::difference_type thrust::distance",
      "deleted": false,
      "details": "<code>distance</code> finds the distance between <code>first</code> and <code>last</code>, i.e. the number of times that <code>first</code> must be incremented until it is equal to <code>last</code>.\n\n\nThe following code snippet demonstrates how to use <code>distance</code> to compute the distance to one iterator from another.\n\n\n\n```cpp\n#include <thrust/distance.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> vec(13);\nthrust::device_vector<int>::iterator iter1 = vec.begin();\nthrust::device_vector<int>::iterator iter2 = iter1 + 7;\n\nint d = thrust::distance(iter1, iter2);\n\n// d is 7\n```",
      "explicit": false,
      "fullname": "thrust::distance",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/distance.h",
        "line": 67
      },
      "name": "distance",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of an input range of interest. "
        },
        {
          "name": "last",
          "text": "The end of an input range of interest. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        }
      ],
      "pre": [
        "If <code>InputIterator</code> meets the requirements of random access iterator, <code>last</code> shall be reachable from <code>first</code> or <code>first</code> shall be reachable from <code>last</code>; otherwise, <code>last</code> shall be reachable from <code>first</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::distance",
      "refid": "group__iterators_1gac44f7373f1ec2ff90c72d019b5a1043f",
      "returns": [
        "The distance between the beginning and end of the input range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/iterator/distance\">https://en.cppreference.com/w/cpp/iterator/distance</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>."
        }
      ],
      "title": "distance",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< InputIterator >::difference_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< InputIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__iterators.html#function-distance",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::equal",
      "deleted": false,
      "details": "<code>equal</code> returns <code>true</code> if the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> are identical when compared element-by-element, and otherwise returns <code>false</code>.\n\nThis version of <code>equal</code> returns <code>true</code> if and only if for every iterator <code>i</code> in <code>[first1, last1)</code>, <code>&#42;i == &#42;(first2 + (i - first1))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal</code> to test two ranges for equality using the <code>thrust::host</code> execution policy:\n\n\n\n```cpp\n#include <thrust/equal.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {3, 1, 4, 1, 5, 9, 3};\nint A2[7] = {3, 1, 4, 2, 8, 5, 7};\n...\nbool result = thrust::equal(thrust::host, A1, A1 + 7, A2);\n\n// result == false\n```",
      "explicit": false,
      "fullname": "thrust::equal",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/equal.h",
        "line": 79
      },
      "name": "equal",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal",
      "refid": "group__comparisons_1gad90af5f86ba9092cd92c0ae4ebd8d677",
      "returns": [
        "<code>true</code>, if the sequences are equal; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal\">https://en.cppreference.com/w/cpp/algorithm/equal</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and <code>InputIterator1's</code><code>value&#95;type</code> can be compared for equality with <code>InputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and <code>InputIterator2's</code><code>value&#95;type</code> can be compared for equality with <code>InputIterator1's</code><code>value&#95;type</code>."
        }
      ],
      "title": "equal",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__comparisons.html#function-equal",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::equal",
      "deleted": false,
      "details": "<code>equal</code> returns <code>true</code> if the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> are identical when compared element-by-element, and otherwise returns <code>false</code>.\n\nThis version of <code>equal</code> returns <code>true</code> if and only if for every iterator <code>i</code> in <code>[first1, last1)</code>, <code>&#42;i == &#42;(first2 + (i - first1))</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal</code> to test two ranges for equality.\n\n\n\n```cpp\n#include <thrust/equal.h>\n...\nint A1[7] = {3, 1, 4, 1, 5, 9, 3};\nint A2[7] = {3, 1, 4, 2, 8, 5, 7};\n...\nbool result = thrust::equal(A1, A1 + 7, A2);\n\n// result == false\n```",
      "explicit": false,
      "fullname": "thrust::equal",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/equal.h",
        "line": 118
      },
      "name": "equal",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal",
      "refid": "group__comparisons_1ga82ba7c515fe521e5b36eb7f94b391ee2",
      "returns": [
        "<code>true</code>, if the sequences are equal; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal\">https://en.cppreference.com/w/cpp/algorithm/equal</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and <code>InputIterator1's</code><code>value&#95;type</code> can be compared for equality with <code>InputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and <code>InputIterator2's</code><code>value&#95;type</code> can be compared for equality with <code>InputIterator1's</code><code>value&#95;type</code>."
        }
      ],
      "title": "equal",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__comparisons.html#function-equal",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::equal",
      "deleted": false,
      "details": "<code>equal</code> returns <code>true</code> if the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> are identical when compared element-by-element, and otherwise returns <code>false</code>.\n\nThis version of <code>equal</code> returns <code>true</code> if and only if for every iterator <code>i</code> in <code>[first1, last1)</code>, <code>binary&#95;pred(&#42;i, &#42;(first2 + (i - first1)))</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal</code> to compare the elements in two ranges modulo 2 using the <code>thrust::host</code> execution policy.\n\n\n\n```cpp\n#include <thrust/equal.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct compare_modulo_two\n{\n  __host__ __device__\n  bool operator()(int x, int y) const\n  {\n    return (x % 2) == (y % 2);\n  }\n};\n...\nint x[6] = {0, 2, 4, 6, 8, 10};\nint y[6] = {1, 3, 5, 7, 9, 11};\n\nbool result = thrust::equal(x, x + 6, y, compare_modulo_two());\n\n// result is false\n```",
      "explicit": false,
      "fullname": "thrust::equal",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/equal.h",
        "line": 175
      },
      "name": "equal",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "binary_pred",
          "text": "Binary predicate used to test element equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal",
      "refid": "group__comparisons_1gaa40938be2dcb3d467eb9d1ba8873e16d",
      "returns": [
        "<code>true</code>, if the sequences are equal; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal\">https://en.cppreference.com/w/cpp/algorithm/equal</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "equal",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__comparisons.html#function-equal",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-equal",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::equal",
      "deleted": false,
      "details": "<code>equal</code> returns <code>true</code> if the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> are identical when compared element-by-element, and otherwise returns <code>false</code>.\n\nThis version of <code>equal</code> returns <code>true</code> if and only if for every iterator <code>i</code> in <code>[first1, last1)</code>, <code>binary&#95;pred(&#42;i, &#42;(first2 + (i - first1)))</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>equal</code> to compare the elements in two ranges modulo 2.\n\n\n\n```cpp\n#include <thrust/equal.h>\n\nstruct compare_modulo_two\n{\n  __host__ __device__\n  bool operator()(int x, int y) const\n  {\n    return (x % 2) == (y % 2);\n  }\n};\n...\nint x[6] = {0, 2, 4, 6, 8, 10};\nint y[6] = {1, 3, 5, 7, 9, 11};\n\nbool result = thrust::equal(x, x + 5, y, compare_modulo_two());\n\n// result is true\n```",
      "explicit": false,
      "fullname": "thrust::equal",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/equal.h",
        "line": 225
      },
      "name": "equal",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "binary_pred",
          "text": "Binary predicate used to test element equality. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::equal",
      "refid": "group__comparisons_1ga4e78ee4bcd8f90e3ff1dae8f59b9e153",
      "returns": [
        "<code>true</code>, if the sequences are equal; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/equal\">https://en.cppreference.com/w/cpp/algorithm/equal</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "equal",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__comparisons.html#function-equal",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-thrust-prevent-macro-substitution",
      "argsString": "(const T &lhs, const T &rhs, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T min thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "deleted": false,
      "details": "This version of <code>min</code> returns the smaller of two values, given a comparison operation. \nThe following code snippet demonstrates how to use <code>min</code> to compute the smaller of two key-value objects.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n...\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value a = {13, 0};\nkey_value b = { 7, 1);\n\nkey_value smaller = thrust::min(a, b, compare_key_value());\n\n// smaller is {7, 1}\n```",
      "explicit": false,
      "fullname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/extrema.h",
        "line": 73
      },
      "name": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "note": [
        "Returns the first argument when the arguments are equivalent. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "lhs",
          "text": "The first value to compare. "
        },
        {
          "name": "rhs",
          "text": "The second value to compare. "
        },
        {
          "name": "comp",
          "text": "A comparison operation. "
        }
      ],
      "params": [
        {
          "name": "lhs",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "rhs",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "refid": "extrema_8h_1a74e563a98f01171193a1f002b376654c",
      "returns": [
        "The smaller element."
      ],
      "see": [
        "max "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "is convertible to <code>BinaryPredicate's</code> first argument type and to its second argument type. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a>."
        }
      ],
      "title": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "type": "__host__ __device__ T min",
      "typePlain": "__host__ __device__ T min",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-thrust-prevent-macro-substitution",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-thrust-prevent-macro-substitution",
      "argsString": "(const T &lhs, const T &rhs)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T min thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "deleted": false,
      "details": "This version of <code>min</code> returns the smaller of two values. \nThe following code snippet demonstrates how to use <code>min</code> to compute the smaller of two integers.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n...\nint a = 13;\nint b = 7;\n\nint smaller = thrust::min(a, b);\n\n// smaller is 7\n```",
      "explicit": false,
      "fullname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/extrema.h",
        "line": 102
      },
      "name": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "note": [
        "Returns the first argument when the arguments are equivalent. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "lhs",
          "text": "The first value to compare. "
        },
        {
          "name": "rhs",
          "text": "The second value to compare. "
        }
      ],
      "params": [
        {
          "name": "lhs",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "rhs",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "refid": "extrema_8h_1a5ed15a68c2a3af204195eae1325bd14e",
      "returns": [
        "The smaller element."
      ],
      "see": [
        "max "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "type": "__host__ __device__ T min",
      "typePlain": "__host__ __device__ T min",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-thrust-prevent-macro-substitution",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-thrust-prevent-macro-substitution",
      "argsString": "(const T &lhs, const T &rhs, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T max thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "deleted": false,
      "details": "This version of <code>max</code> returns the larger of two values, given a comparison operation. \nThe following code snippet demonstrates how to use <code>max</code> to compute the larger of two key-value objects.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n...\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value a = {13, 0};\nkey_value b = { 7, 1);\n\nkey_value larger = thrust::max(a, b, compare_key_value());\n\n// larger is {13, 0}\n```",
      "explicit": false,
      "fullname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/extrema.h",
        "line": 149
      },
      "name": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "note": [
        "Returns the first argument when the arguments are equivalent. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "lhs",
          "text": "The first value to compare. "
        },
        {
          "name": "rhs",
          "text": "The second value to compare. "
        },
        {
          "name": "comp",
          "text": "A comparison operation. "
        }
      ],
      "params": [
        {
          "name": "lhs",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "rhs",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "refid": "extrema_8h_1a3011ca61370fd609988479a584b75cad",
      "returns": [
        "The larger element."
      ],
      "see": [
        "min "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "is convertible to <code>BinaryPredicate's</code> first argument type and to its second argument type. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a>."
        }
      ],
      "title": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "type": "__host__ __device__ T max",
      "typePlain": "__host__ __device__ T max",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-thrust-prevent-macro-substitution",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-thrust-prevent-macro-substitution",
      "argsString": "(const T &lhs, const T &rhs)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T max thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "deleted": false,
      "details": "This version of <code>max</code> returns the larger of two values. \nThe following code snippet demonstrates how to use <code>max</code> to compute the larger of two integers.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n...\nint a = 13;\nint b = 7;\n\nint larger = thrust::min(a, b);\n\n// larger is 13\n```",
      "explicit": false,
      "fullname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/extrema.h",
        "line": 178
      },
      "name": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "note": [
        "Returns the first argument when the arguments are equivalent. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "lhs",
          "text": "The first value to compare. "
        },
        {
          "name": "rhs",
          "text": "The second value to compare. "
        }
      ],
      "params": [
        {
          "name": "lhs",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "rhs",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::THRUST_PREVENT_MACRO_SUBSTITUTION",
      "refid": "extrema_8h_1adcead732f72e8e5b0b65275ab2d413c9",
      "returns": [
        "The larger element."
      ],
      "see": [
        "min "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "THRUST_PREVENT_MACRO_SUBSTITUTION",
      "type": "__host__ __device__ T max",
      "typePlain": "__host__ __device__ T max",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-thrust-prevent-macro-substitution",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-min-element",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::min_element",
      "deleted": false,
      "details": "<code>min&#95;element</code> finds the smallest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value smaller than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>min&#95;element</code> differ in how they define whether one element is less than another. This version compares objects using <code>operator&lt;</code>. Specifically, this version of <code>min&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>&#42;j &lt; &#42;i</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n#include <thrust/execution_policy.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint *result = thrust::min_element(thrust::host, data, data + 6);\n\n// result is data + 1\n// *result is 0\n```",
      "explicit": false,
      "fullname": "thrust::min_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 227
      },
      "name": "min_element",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::min_element",
      "refid": "group__extrema_1gab6f4900fa17fa2c6596eea628b6055b7",
      "returns": [
        "An iterator pointing to the smallest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/min_element\">https://en.cppreference.com/w/cpp/algorithm/min_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "min_element",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-min-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-min-element",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::min_element",
      "deleted": false,
      "details": "<code>min&#95;element</code> finds the smallest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value smaller than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>min&#95;element</code> differ in how they define whether one element is less than another. This version compares objects using <code>operator&lt;</code>. Specifically, this version of <code>min&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>&#42;j &lt; &#42;i</code> is <code>false</code>.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint *result = thrust::min_element(data, data + 6);\n\n// result is data + 1\n// *result is 0\n```",
      "explicit": false,
      "fullname": "thrust::min_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 264
      },
      "name": "min_element",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::min_element",
      "refid": "group__extrema_1gaa9dcee5e36206a3ef7215a4b3984e002",
      "returns": [
        "An iterator pointing to the smallest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/min_element\">https://en.cppreference.com/w/cpp/algorithm/min_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "min_element",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-min-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-min-element",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::min_element",
      "deleted": false,
      "details": "<code>min&#95;element</code> finds the smallest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value smaller than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>min&#95;element</code> differ in how they define whether one element is less than another. This version compares objects using a function object <code>comp</code>. Specifically, this version of <code>min&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>comp(&#42;j, &#42;i)</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>min&#95;element</code> to find the smallest element of a collection of key-value pairs using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/extrema.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value data[4] = { {4,5}, {0,7}, {2,3}, {6,1} };\n\nkey_value *smallest = thrust::min_element(thrust::host, data, data + 4, compare_key_value());\n\n// smallest == data + 1\n// *smallest == {0,7}\n```",
      "explicit": false,
      "fullname": "thrust::min_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 330
      },
      "name": "min_element",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "A binary predicate used for comparison. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::min_element",
      "refid": "group__extrema_1ga63b3af65a8e214fe8509aa0755379572",
      "returns": [
        "An iterator pointing to the smallest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/min_element\">https://en.cppreference.com/w/cpp/algorithm/min_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>comp's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "min_element",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-min-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-min-element",
      "argsString": "(ForwardIterator first, ForwardIterator last, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::min_element",
      "deleted": false,
      "details": "<code>min&#95;element</code> finds the smallest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value smaller than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>min&#95;element</code> differ in how they define whether one element is less than another. This version compares objects using a function object <code>comp</code>. Specifically, this version of <code>min&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>comp(&#42;j, &#42;i)</code> is <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>min&#95;element</code> to find the smallest element of a collection of key-value pairs.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value data[4] = { {4,5}, {0,7}, {2,3}, {6,1} };\n\nkey_value *smallest = thrust::min_element(data, data + 4, compare_key_value());\n\n// smallest == data + 1\n// *smallest == {0,7}\n```",
      "explicit": false,
      "fullname": "thrust::min_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 389
      },
      "name": "min_element",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "A binary predicate used for comparison. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::min_element",
      "refid": "group__extrema_1ga90f5158cab04adeb3f1b8b5e4acdbbcc",
      "returns": [
        "An iterator pointing to the smallest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/min_element\">https://en.cppreference.com/w/cpp/algorithm/min_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>comp's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "min_element",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-min-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-max-element",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::max_element",
      "deleted": false,
      "details": "<code>max&#95;element</code> finds the largest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value larger than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>max&#95;element</code> differ in how they define whether one element is greater than another. This version compares objects using <code>operator&lt;</code>. Specifically, this version of <code>max&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>&#42;i &lt; &#42;j</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n#include <thrust/execution_policy.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint *result = thrust::max_element(thrust::host, data, data + 6);\n\n// *result == 3\n```",
      "explicit": false,
      "fullname": "thrust::max_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 432
      },
      "name": "max_element",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::max_element",
      "refid": "group__extrema_1ga61788a3dcc7aed6a32fb5bb81484a050",
      "returns": [
        "An iterator pointing to the largest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/max_element\">https://en.cppreference.com/w/cpp/algorithm/max_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "A",
          "text": "Thrust backend system. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "max_element",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-max-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-max-element",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::max_element",
      "deleted": false,
      "details": "<code>max&#95;element</code> finds the largest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value larger than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>max&#95;element</code> differ in how they define whether one element is greater than another. This version compares objects using <code>operator&lt;</code>. Specifically, this version of <code>max&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>&#42;i &lt; &#42;j</code> is <code>false</code>.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint *result = thrust::max_element(data, data + 6);\n\n// *result == 3\n```",
      "explicit": false,
      "fullname": "thrust::max_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 468
      },
      "name": "max_element",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::max_element",
      "refid": "group__extrema_1gabc0550e56644df298a6b7a5824f1a166",
      "returns": [
        "An iterator pointing to the largest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/max_element\">https://en.cppreference.com/w/cpp/algorithm/max_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "max_element",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-max-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-max-element",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::max_element",
      "deleted": false,
      "details": "<code>max&#95;element</code> finds the largest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value larger than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>max&#95;element</code> differ in how they define whether one element is less than another. This version compares objects using a function object <code>comp</code>. Specifically, this version of <code>max&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>comp(&#42;i, &#42;j)</code> is <code>false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>max&#95;element</code> to find the largest element of a collection of key-value pairs using the <code>thrust::host</code> execution policy for parallelization.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value data[4] = { {4,5}, {0,7}, {2,3}, {6,1} };\n\nkey_value *largest = thrust::max_element(thrust::host, data, data + 4, compare_key_value());\n\n// largest == data + 3\n// *largest == {6,1}\n```",
      "explicit": false,
      "fullname": "thrust::max_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 534
      },
      "name": "max_element",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "A binary predicate used for comparison. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::max_element",
      "refid": "group__extrema_1ga95135967da9f11bfe1c6a83436456d76",
      "returns": [
        "An iterator pointing to the largest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/max_element\">https://en.cppreference.com/w/cpp/algorithm/max_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>comp's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "max_element",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-max-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-max-element",
      "argsString": "(ForwardIterator first, ForwardIterator last, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::max_element",
      "deleted": false,
      "details": "<code>max&#95;element</code> finds the largest element in the range <code>[first, last)</code>. It returns the first iterator <code>i</code> in <code>[first, last)</code> such that no other iterator in <code>[first, last)</code> points to a value larger than <code>&#42;i</code>. The return value is <code>last</code> if and only if <code>[first, last)</code> is an empty range.\n\nThe two versions of <code>max&#95;element</code> differ in how they define whether one element is less than another. This version compares objects using a function object <code>comp</code>. Specifically, this version of <code>max&#95;element</code> returns the first iterator <code>i</code> in <code>[first, last)</code> such that, for every iterator <code>j</code> in <code>[first, last)</code>, <code>comp(&#42;i, &#42;j)</code> is <code>false</code>.\n\n\nThe following code snippet demonstrates how to use <code>max&#95;element</code> to find the largest element of a collection of key-value pairs.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value data[4] = { {4,5}, {0,7}, {2,3}, {6,1} };\n\nkey_value *largest = thrust::max_element(data, data + 4, compare_key_value());\n\n// largest == data + 3\n// *largest == {6,1}\n```",
      "explicit": false,
      "fullname": "thrust::max_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/extrema.h",
        "line": 593
      },
      "name": "max_element",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "A binary predicate used for comparison. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::max_element",
      "refid": "group__extrema_1gadd477c531dc4a4bf847f70ce73d01464",
      "returns": [
        "An iterator pointing to the largest element of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/max_element\">https://en.cppreference.com/w/cpp/algorithm/max_element</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>comp's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "max_element",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-max-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-minmax-element",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator > thrust::minmax_element",
      "deleted": false,
      "details": "<code>minmax&#95;element</code> finds the smallest and largest elements in the range <code>[first, last)</code>. It returns a pair of iterators <code>(imin, imax)</code> where <code>imin</code> is the same iterator returned by <code>min&#95;element</code> and <code>imax</code> is the same iterator returned by <code>max&#95;element</code>. This function is potentially more efficient than separate calls to <code>min&#95;element</code> and <code>max&#95;element</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n#include <thrust/execution_policy.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nthrust::pair<int *, int *> result = thrust::minmax_element(thrust::host, data, data + 6);\n\n// result.first is data + 1\n// result.second is data + 5\n// *result.first is 0\n// *result.second is 3\n```",
      "explicit": false,
      "fullname": "thrust::minmax_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/extrema.h",
        "line": 634
      },
      "name": "minmax_element",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::minmax_element",
      "refid": "group__extrema_1ga834400610b53b873496da0ce9b619ab0",
      "returns": [
        "A pair of iterator pointing to the smallest and largest elements of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "min_element ",
        "max_element ",
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "minmax_element",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-minmax-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-minmax-element",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator, ForwardIterator > thrust::minmax_element",
      "deleted": false,
      "details": "<code>minmax&#95;element</code> finds the smallest and largest elements in the range <code>[first, last)</code>. It returns a pair of iterators <code>(imin, imax)</code> where <code>imin</code> is the same iterator returned by <code>min&#95;element</code> and <code>imax</code> is the same iterator returned by <code>max&#95;element</code>. This function is potentially more efficient than separate calls to <code>min&#95;element</code> and <code>max&#95;element</code>.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nthrust::pair<int *, int *> result = thrust::minmax_element(data, data + 6);\n\n// result.first is data + 1\n// result.second is data + 5\n// *result.first is 0\n// *result.second is 3\n```",
      "explicit": false,
      "fullname": "thrust::minmax_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/extrema.h",
        "line": 668
      },
      "name": "minmax_element",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::minmax_element",
      "refid": "group__extrema_1ga8664e0a8003d013bfce387f17622752d",
      "returns": [
        "A pair of iterator pointing to the smallest and largest elements of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "min_element ",
        "max_element ",
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "minmax_element",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-minmax-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-minmax-element",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator > thrust::minmax_element",
      "deleted": false,
      "details": "<code>minmax&#95;element</code> finds the smallest and largest elements in the range <code>[first, last)</code>. It returns a pair of iterators <code>(imin, imax)</code> where <code>imin</code> is the same iterator returned by <code>min&#95;element</code> and <code>imax</code> is the same iterator returned by <code>max&#95;element</code>. This function is potentially more efficient than separate calls to <code>min&#95;element</code> and <code>max&#95;element</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>minmax&#95;element</code> to find the smallest and largest elements of a collection of key-value pairs using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/extrema.h>\n#include <thrust/pair.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value data[4] = { {4,5}, {0,7}, {2,3}, {6,1} };\n\nthrust::pair<key_value*,key_value*> extrema = thrust::minmax_element(thrust::host, data, data + 4, compare_key_value());\n\n// extrema.first   == data + 1\n// *extrema.first  == {0,7}\n// extrema.second  == data + 3\n// *extrema.second == {6,1}\n```",
      "explicit": false,
      "fullname": "thrust::minmax_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/extrema.h",
        "line": 733
      },
      "name": "minmax_element",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "A binary predicate used for comparison. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::minmax_element",
      "refid": "group__extrema_1gaab4eaec464e29e0ee5b21a597aafcda8",
      "returns": [
        "A pair of iterator pointing to the smallest and largest elements of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "min_element ",
        "max_element ",
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>comp's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "minmax_element",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-minmax-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-minmax-element",
      "argsString": "(ForwardIterator first, ForwardIterator last, BinaryPredicate comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator, ForwardIterator > thrust::minmax_element",
      "deleted": false,
      "details": "<code>minmax&#95;element</code> finds the smallest and largest elements in the range <code>[first, last)</code>. It returns a pair of iterators <code>(imin, imax)</code> where <code>imin</code> is the same iterator returned by <code>min&#95;element</code> and <code>imax</code> is the same iterator returned by <code>max&#95;element</code>. This function is potentially more efficient than separate calls to <code>min&#95;element</code> and <code>max&#95;element</code>.\n\n\nThe following code snippet demonstrates how to use <code>minmax&#95;element</code> to find the smallest and largest elements of a collection of key-value pairs.\n\n\n\n```cpp\n#include <thrust/extrema.h>\n#include <thrust/pair.h>\n\nstruct key_value\n{\n  int key;\n  int value;\n};\n\nstruct compare_key_value\n{\n  __host__ __device__\n  bool operator()(key_value lhs, key_value rhs)\n  {\n    return lhs.key < rhs.key;\n  }\n};\n\n...\nkey_value data[4] = { {4,5}, {0,7}, {2,3}, {6,1} };\n\nthrust::pair<key_value*,key_value*> extrema = thrust::minmax_element(data, data + 4, compare_key_value());\n\n// extrema.first   == data + 1\n// *extrema.first  == {0,7}\n// extrema.second  == data + 3\n// *extrema.second == {6,1}\n```",
      "explicit": false,
      "fullname": "thrust::minmax_element",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/extrema.h",
        "line": 790
      },
      "name": "minmax_element",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "A binary predicate used for comparison. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::minmax_element",
      "refid": "group__extrema_1ga709342df5762ec61236e5d1f1b8eecd5",
      "returns": [
        "A pair of iterator pointing to the smallest and largest elements of the range <code>[first, last)</code>, if it is not an empty range; <code>last</code>, otherwise."
      ],
      "see": [
        "min_element ",
        "max_element ",
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1840.pdf</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>comp's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "minmax_element",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator, ForwardIterator >",
      "typePlain": "thrust::pair< ForwardIterator, ForwardIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__extrema.html#function-minmax-element",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-fill",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::fill",
      "deleted": false,
      "details": "<code>fill</code> assigns the value <code>value</code> to every element in the range <code>[first, last)</code>. That is, for every iterator <code>i</code> in <code>[first, last)</code>, it performs the assignment <code>&#42;i = value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>fill</code> to set a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">thrust::device_vector</a>'s elements to a given value using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/fill.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> v(4);\nthrust::fill(thrust::device, v.begin(), v.end(), 137);\n\n// v[0] == 137, v[1] == 137, v[2] == 137, v[3] == 137\n```",
      "explicit": false,
      "fullname": "thrust::fill",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/fill.h",
        "line": 74
      },
      "name": "fill",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "value",
          "text": "The value to be copied."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::fill",
      "refid": "group__filling_1gae2637d0d68bfdde69b3081039ba22796",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/fill\">https://en.cppreference.com/w/cpp/algorithm/fill</a>",
        "<code>fill&#95;n</code>",
        "<code>uninitialized&#95;fill</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T's</code><code>value&#95;type</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "fill",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-fill",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-fill",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::fill",
      "deleted": false,
      "details": "<code>fill</code> assigns the value <code>value</code> to every element in the range <code>[first, last)</code>. That is, for every iterator <code>i</code> in <code>[first, last)</code>, it performs the assignment <code>&#42;i = value</code>.\n\n\nThe following code snippet demonstrates how to use <code>fill</code> to set a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">thrust::device_vector</a>'s elements to a given value.\n\n\n\n```cpp\n#include <thrust/fill.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> v(4);\nthrust::fill(v.begin(), v.end(), 137);\n\n// v[0] == 137, v[1] == 137, v[2] == 137, v[3] == 137\n```",
      "explicit": false,
      "fullname": "thrust::fill",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/fill.h",
        "line": 113
      },
      "name": "fill",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "value",
          "text": "The value to be copied."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::fill",
      "refid": "group__filling_1gaeb67a048e8397f31f745dec0ad80f9c4",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/fill\">https://en.cppreference.com/w/cpp/algorithm/fill</a>",
        "<code>fill&#95;n</code>",
        "<code>uninitialized&#95;fill</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T's</code><code>value&#95;type</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "fill",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-fill",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-fill-n",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, OutputIterator first, Size n, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::fill_n",
      "deleted": false,
      "details": "<code>fill&#95;n</code> assigns the value <code>value</code> to every element in the range <code>[first, first+n)</code>. That is, for every iterator <code>i</code> in <code>[first, first+n)</code>, it performs the assignment <code>&#42;i = value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>fill</code> to set a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">thrust::device_vector</a>'s elements to a given value using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/fill.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> v(4);\nthrust::fill_n(thrust::device, v.begin(), v.size(), 137);\n\n// v[0] == 137, v[1] == 137, v[2] == 137, v[3] == 137\n```",
      "explicit": false,
      "fullname": "thrust::fill_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/fill.h",
        "line": 156
      },
      "name": "fill_n",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "n",
          "text": "The size of the sequence. "
        },
        {
          "name": "value",
          "text": "The value to be copied. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::fill_n",
      "refid": "group__filling_1ga7b7650471fc9da4d339ad8fc7b959393",
      "returns": [
        "<code>first + n</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/fill_n\">https://en.cppreference.com/w/cpp/algorithm/fill_n</a>",
        "<code>fill</code>",
        "<code>uninitialized&#95;fill&#95;n</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;type</code>."
        }
      ],
      "title": "fill_n",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-fill-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-fill-n",
      "argsString": "(OutputIterator first, Size n, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::fill_n",
      "deleted": false,
      "details": "<code>fill&#95;n</code> assigns the value <code>value</code> to every element in the range <code>[first, first+n)</code>. That is, for every iterator <code>i</code> in <code>[first, first+n)</code>, it performs the assignment <code>&#42;i = value</code>.\n\n\nThe following code snippet demonstrates how to use <code>fill</code> to set a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">thrust::device_vector</a>'s elements to a given value.\n\n\n\n```cpp\n#include <thrust/fill.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> v(4);\nthrust::fill_n(v.begin(), v.size(), 137);\n\n// v[0] == 137, v[1] == 137, v[2] == 137, v[3] == 137\n```",
      "explicit": false,
      "fullname": "thrust::fill_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/fill.h",
        "line": 195
      },
      "name": "fill_n",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "n",
          "text": "The size of the sequence. "
        },
        {
          "name": "value",
          "text": "The value to be copied. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::fill_n",
      "refid": "group__filling_1gaba85984f8afa1842e59589f2f58abae6",
      "returns": [
        "<code>first + n</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/fill_n\">https://en.cppreference.com/w/cpp/algorithm/fill_n</a>",
        "<code>fill</code>",
        "<code>uninitialized&#95;fill&#95;n</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;type</code>."
        }
      ],
      "title": "fill_n",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-fill-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator thrust::find",
      "deleted": false,
      "details": "<code>find</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>&#42;i == value</code> or <code>last</code> if no such iterator exists.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find(thrust::device, input.begin(), input.end(), 3); // returns input.first() + 2\niter = thrust::find(thrust::device, input.begin(), input.end(), 5); // returns input.first() + 1\niter = thrust::find(thrust::device, input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::find",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 79
      },
      "name": "find",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "value",
          "text": "The value to find. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::find",
      "refid": "group__searching_1ga9f1931503e4faffefd2f9d97c974f933",
      "returns": [
        "The first iterator <code>i</code> such that <code>&#42;i == value</code> or <code>last</code>."
      ],
      "see": [
        "find_if ",
        "mismatch "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is equality comparable to type <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">EqualityComparable</a>."
        }
      ],
      "title": "find",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-find",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find",
      "argsString": "(InputIterator first, InputIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator thrust::find",
      "deleted": false,
      "details": "<code>find</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>&#42;i == value</code> or <code>last</code> if no such iterator exists.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find(input.begin(), input.end(), 3); // returns input.first() + 2\niter = thrust::find(input.begin(), input.end(), 5); // returns input.first() + 1\niter = thrust::find(input.begin(), input.end(), 9); // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::find",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 120
      },
      "name": "find",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "value",
          "text": "The value to find. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::find",
      "refid": "group__searching_1ga99c7a59cef5b9f4cdbc70f37b2e221be",
      "returns": [
        "The first iterator <code>i</code> such that <code>&#42;i == value</code> or <code>last</code>."
      ],
      "see": [
        "find_if ",
        "mismatch "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is equality comparable to type <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">EqualityComparable</a>."
        }
      ],
      "title": "find",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-find",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator thrust::find_if",
      "deleted": false,
      "details": "<code>find&#95;if</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code> or <code>last</code> if no such iterator exists.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if(thrust::device, input.begin(), input.end(), greater_than_four()); // returns input.first() + 1\n\niter = thrust::find_if(thrust::device, input.begin(), input.end(), greater_than_ten());  // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::find_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 186
      },
      "name": "find_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::find_if",
      "refid": "group__searching_1gaa79b4c03009926ee393421c53a510aeb",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>true</code>, or <code>last</code>."
      ],
      "see": [
        "find ",
        "find_if_not ",
        "mismatch "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-find-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find-if",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator thrust::find_if",
      "deleted": false,
      "details": "<code>find&#95;if</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code> or <code>last</code> if no such iterator exists.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if(input.begin(), input.end(), greater_than_four()); // returns input.first() + 1\n\niter = thrust::find_if(input.begin(), input.end(), greater_than_ten());  // returns input.end()\n```",
      "explicit": false,
      "fullname": "thrust::find_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 246
      },
      "name": "find_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::find_if",
      "refid": "group__searching_1gaf14c2f2682afa14c68b09170707a2e48",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>true</code>, or <code>last</code>."
      ],
      "see": [
        "find ",
        "find_if_not ",
        "mismatch "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-find-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find-if-not",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator thrust::find_if_not",
      "deleted": false,
      "details": "<code>find&#95;if&#95;not</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>false</code> or <code>last</code> if no such iterator exists.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if_not(thrust::device, input.begin(), input.end(), greater_than_four()); // returns input.first()\n\niter = thrust::find_if_not(thrust::device, input.begin(), input.end(), greater_than_ten());  // returns input.first()\n```",
      "explicit": false,
      "fullname": "thrust::find_if_not",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 312
      },
      "name": "find_if_not",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::find_if_not",
      "refid": "group__searching_1ga83319e13f59c2d44a4e5e9e21cfb8423",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>false</code>, or <code>last</code>."
      ],
      "see": [
        "find ",
        "find_if ",
        "mismatch "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if_not",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-find-if-not",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-find-if-not",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator thrust::find_if_not",
      "deleted": false,
      "details": "<code>find&#95;if&#95;not</code> returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>false</code> or <code>last</code> if no such iterator exists.\n\n\n\n```cpp\n#include <thrust/find.h>\n#include <thrust/device_vector.h>\n\nstruct greater_than_four\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 4;\n  }\n};\n\nstruct greater_than_ten\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x > 10;\n  }\n};\n\n...\nthrust::device_vector<int> input(4);\n\ninput[0] = 0;\ninput[1] = 5;\ninput[2] = 3;\ninput[3] = 7;\n\nthrust::device_vector<int>::iterator iter;\n\niter = thrust::find_if_not(input.begin(), input.end(), greater_than_four()); // returns input.first()\n\niter = thrust::find_if_not(input.begin(), input.end(), greater_than_ten());  // returns input.first()\n```",
      "explicit": false,
      "fullname": "thrust::find_if_not",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/find.h",
        "line": 372
      },
      "name": "find_if_not",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence to search. "
        },
        {
          "name": "last",
          "text": "End of the sequence to search. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::find_if_not",
      "refid": "group__searching_1ga258cd709976cfdbb7f990859a64ad4c6",
      "returns": [
        "The first iterator <code>i</code> such that <code>pred(&#42;i)</code> is <code>false</code>, or <code>last</code>."
      ],
      "see": [
        "find ",
        "find_if ",
        "mismatch "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "find_if_not",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-find-if-not",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-for-each",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, UnaryFunction f)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator thrust::for_each",
      "deleted": false,
      "details": "<code>for&#95;each</code> applies the function object <code>f</code> to each element in the range <code>[first, last)</code>; <code>f's</code> return value, if any, is ignored. Unlike the C++ Standard Template Library function <code>std::for&#95;each</code>, this version offers no guarantee on order of execution. For this reason, this version of <code>for&#95;each</code> does not return a copy of the function object.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>for&#95;each</code> to print the elements of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">thrust::device&#95;vector</a></code> using the <code>thrust::device</code> parallelization policy:\n\n\n\n```cpp\n#include <thrust/for_each.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdio>\n...\n\nstruct printf_functor\n{\n  __host__ __device__\n  void operator()(int x)\n  {\n    // note that using printf in a __device__ function requires\n    // code compiled for a GPU with compute capability 2.0 or\n    // higher (nvcc --arch=sm_20)\n    printf(\"%d\\n\", x);\n  }\n};\n...\nthrust::device_vector<int> d_vec(3);\nd_vec[0] = 0; d_vec[1] = 1; d_vec[2] = 2;\n\nthrust::for_each(thrust::device, d_vec.begin(), d_vec.end(), printf_functor());\n\n// 0 1 2 is printed to standard output in some unspecified order\n```",
      "explicit": false,
      "fullname": "thrust::for_each",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/for_each.h",
        "line": 93
      },
      "name": "for_each",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "f",
          "text": "The function object to apply to the range <code>[first, last)</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "f",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::for_each",
      "refid": "group__modifying_1ga14cba62489aee67ffa6348eb74997b57",
      "returns": [
        "last"
      ],
      "see": [
        "for_each_n ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/for_each\">https://en.cppreference.com/w/cpp/algorithm/for_each</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/InputIterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a>, and <code>UnaryFunction</code> does not apply any non-constant operation through its argument."
        }
      ],
      "title": "for_each",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__modifying.html#function-for-each",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-for-each-n",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, Size n, UnaryFunction f)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ InputIterator thrust::for_each_n",
      "deleted": false,
      "details": "<code>for&#95;each&#95;n</code> applies the function object <code>f</code> to each element in the range <code>[first, first + n)</code>; <code>f's</code> return value, if any, is ignored. Unlike the C++ Standard Template Library function <code>std::for&#95;each</code>, this version offers no guarantee on order of execution.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>for&#95;each&#95;n</code> to print the elements of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> using the <code>thrust::device</code> parallelization policy.\n\n\n\n```cpp\n#include <thrust/for_each.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdio>\n\nstruct printf_functor\n{\n  __host__ __device__\n  void operator()(int x)\n  {\n    // note that using printf in a __device__ function requires\n    // code compiled for a GPU with compute capability 2.0 or\n    // higher (nvcc --arch=sm_20)\n    printf(\"%d\\n\", x);\n  }\n};\n...\nthrust::device_vector<int> d_vec(3);\nd_vec[0] = 0; d_vec[1] = 1; d_vec[2] = 2;\n\nthrust::for_each_n(thrust::device, d_vec.begin(), d_vec.size(), printf_functor());\n\n// 0 1 2 is printed to standard output in some unspecified order\n```",
      "explicit": false,
      "fullname": "thrust::for_each_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/for_each.h",
        "line": 157
      },
      "name": "for_each_n",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "n",
          "text": "The size of the input sequence. "
        },
        {
          "name": "f",
          "text": "The function object to apply to the range <code>[first, first + n)</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "f",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::for_each_n",
      "refid": "group__modifying_1ga00ad46c06f41dd29601d44d3c6c25819",
      "returns": [
        "<code>first + n</code>"
      ],
      "see": [
        "for_each ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/for_each\">https://en.cppreference.com/w/cpp/algorithm/for_each</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/InputIterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Size",
          "text": "is an integral type. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a>, and <code>UnaryFunction</code> does not apply any non-constant operation through its argument."
        }
      ],
      "title": "for_each_n",
      "type": "__host__ __device__ InputIterator",
      "typePlain": "__host__ __device__ InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__modifying.html#function-for-each-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-for-each",
      "argsString": "(InputIterator first, InputIterator last, UnaryFunction f)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator thrust::for_each",
      "deleted": false,
      "details": "<code>for&#95;each</code> applies the function object <code>f</code> to each element in the range <code>[first, last)</code>; <code>f's</code> return value, if any, is ignored. Unlike the C++ Standard Template Library function <code>std::for&#95;each</code>, this version offers no guarantee on order of execution. For this reason, this version of <code>for&#95;each</code> does not return a copy of the function object.\n\n\nThe following code snippet demonstrates how to use <code>for&#95;each</code> to print the elements of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code>.\n\n\n\n```cpp\n#include <thrust/for_each.h>\n#include <thrust/device_vector.h>\n#include <stdio.h>\n\nstruct printf_functor\n{\n  __host__ __device__\n  void operator()(int x)\n  {\n    // note that using printf in a __device__ function requires\n    // code compiled for a GPU with compute capability 2.0 or\n    // higher (nvcc --arch=sm_20)\n    printf(\"%d\\n\", x);\n  }\n};\n...\nthrust::device_vector<int> d_vec(3);\nd_vec[0] = 0; d_vec[1] = 1; d_vec[2] = 2;\n\nthrust::for_each(d_vec.begin(), d_vec.end(), printf_functor());\n\n// 0 1 2 is printed to standard output in some unspecified order\n```",
      "explicit": false,
      "fullname": "thrust::for_each",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/for_each.h",
        "line": 212
      },
      "name": "for_each",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "f",
          "text": "The function object to apply to the range <code>[first, last)</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "f",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::for_each",
      "refid": "group__modifying_1ga263741e1287daa9edbac8d56c95070ba",
      "returns": [
        "last"
      ],
      "see": [
        "for_each_n ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/for_each\">https://en.cppreference.com/w/cpp/algorithm/for_each</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/InputIterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a>, and <code>UnaryFunction</code> does not apply any non-constant operation through its argument."
        }
      ],
      "title": "for_each",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__modifying.html#function-for-each",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-for-each-n",
      "argsString": "(InputIterator first, Size n, UnaryFunction f)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "InputIterator thrust::for_each_n",
      "deleted": false,
      "details": "<code>for&#95;each&#95;n</code> applies the function object <code>f</code> to each element in the range <code>[first, first + n)</code>; <code>f's</code> return value, if any, is ignored. Unlike the C++ Standard Template Library function <code>std::for&#95;each</code>, this version offers no guarantee on order of execution.\n\n\nThe following code snippet demonstrates how to use <code>for&#95;each&#95;n</code> to print the elements of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code>.\n\n\n\n```cpp\n#include <thrust/for_each.h>\n#include <thrust/device_vector.h>\n#include <stdio.h>\n\nstruct printf_functor\n{\n  __host__ __device__\n  void operator()(int x)\n  {\n    // note that using printf in a __device__ function requires\n    // code compiled for a GPU with compute capability 2.0 or\n    // higher (nvcc --arch=sm_20)\n    printf(\"%d\\n\", x);\n  }\n};\n...\nthrust::device_vector<int> d_vec(3);\nd_vec[0] = 0; d_vec[1] = 1; d_vec[2] = 2;\n\nthrust::for_each_n(d_vec.begin(), d_vec.size(), printf_functor());\n\n// 0 1 2 is printed to standard output in some unspecified order\n```",
      "explicit": false,
      "fullname": "thrust::for_each_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 15,
        "file": "thrust/for_each.h",
        "line": 268
      },
      "name": "for_each_n",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "n",
          "text": "The size of the input sequence. "
        },
        {
          "name": "f",
          "text": "The function object to apply to the range <code>[first, first + n)</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "f",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::for_each_n",
      "refid": "group__modifying_1ga4c825347127313bc87b33731c907739a",
      "returns": [
        "<code>first + n</code>"
      ],
      "see": [
        "for_each ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/for_each\">https://en.cppreference.com/w/cpp/algorithm/for_each</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/InputIterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Size",
          "text": "is an integral type. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a>, and <code>UnaryFunction</code> does not apply any non-constant operation through its argument."
        }
      ],
      "title": "for_each_n",
      "type": "InputIterator",
      "typePlain": "InputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__modifying.html#function-for-each-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-not1",
      "argsString": "(const Predicate &pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ unary_negate< Predicate > thrust::not1",
      "deleted": false,
      "details": "<code>not1</code> is a helper function to simplify the creation of Adaptable Predicates: it takes an Adaptable Predicate <code>pred</code> as an argument and returns a new Adaptable Predicate that represents the negation of <code>pred</code>. That is: if <code>pred</code> is an object of a type which models Adaptable Predicate, then the the type of the result <code>npred</code> of <code>not1(pred)</code> is also a model of Adaptable Predicate and <code>npred(x)</code> always returns the same value as <code>!pred(x)</code>.",
      "explicit": false,
      "fullname": "thrust::not1",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/functional.h",
        "line": 1540
      },
      "name": "not1",
      "override": false,
      "paramList": [
        {
          "name": "pred",
          "text": "The Adaptable Predicate to negate. "
        }
      ],
      "params": [
        {
          "name": "pred",
          "type": "const Predicate &",
          "typePlain": "const Predicate &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::not1",
      "refid": "group__function__object__adaptors_1gaba34048de443b0f683f4a119f1f1f7ca",
      "returns": [
        "A new object, <code>npred</code> such that <code>npred(x)</code> always returns the same value as <code>!pred(x)</code>."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1unary__negate.html\">unary_negate</a>",
        "not2 "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_negate\">Adaptable Predicate</a>."
        }
      ],
      "title": "not1",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1unary__negate.html\">unary_negate</a>< Predicate >",
      "typePlain": "__host__ __device__ unary_negate< Predicate >",
      "url": "{{ site.baseurl }}/api/groups/group__function__object__adaptors.html#function-not1",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-not2",
      "argsString": "(const BinaryPredicate &pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ binary_negate< BinaryPredicate > thrust::not2",
      "deleted": false,
      "details": "<code>not2</code> is a helper function to simplify the creation of Adaptable Binary Predicates: it takes an Adaptable Binary Predicate <code>pred</code> as an argument and returns a new Adaptable Binary Predicate that represents the negation of <code>pred</code>. That is: if <code>pred</code> is an object of a type which models Adaptable Binary Predicate, then the the type of the result <code>npred</code> of <code>not2(pred)</code> is also a model of Adaptable Binary Predicate and <code>npred(x,y)</code> always returns the same value as <code>!pred(x,y)</code>.",
      "explicit": false,
      "fullname": "thrust::not2",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/functional.h",
        "line": 1598
      },
      "name": "not2",
      "override": false,
      "paramList": [
        {
          "name": "pred",
          "text": "The Adaptable Binary Predicate to negate. "
        }
      ],
      "params": [
        {
          "name": "pred",
          "type": "const BinaryPredicate &",
          "typePlain": "const BinaryPredicate &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::not2",
      "refid": "group__function__object__adaptors_1ga39726986b82a730e75d891472d36792a",
      "returns": [
        "A new object, <code>npred</code> such that <code>npred(x,y)</code> always returns the same value as <code>!pred(x,y)</code>."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1binary__negate.html\">binary_negate</a>",
        "not1 "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "Binary",
          "text": "Predicate is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/AdaptableBinaryPredicate\">Adaptable Binary Predicate</a>."
        }
      ],
      "title": "not2",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1binary__negate.html\">binary_negate</a>< BinaryPredicate >",
      "typePlain": "__host__ __device__ binary_negate< BinaryPredicate >",
      "url": "{{ site.baseurl }}/api/groups/group__function__object__adaptors.html#function-not2",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-gather",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator map_first, InputIterator map_last, RandomAccessIterator input_first, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::gather",
      "deleted": false,
      "details": "<code>gather</code> copies elements from a source array into a destination range according to a map. For each input iterator <code>i</code> in the range <code>[map&#95;first, map&#95;last)</code>, the value <code>input&#95;first[&#42;i]</code> is assigned to <code>&#42;(result + (i - map&#95;first))</code>. <code>RandomAccessIterator</code> must permit random access.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>gather</code> to reorder a range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/gather.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n// mark even indices with a 1; odd indices with a 0\nint values[10] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// gather all even indices into the first half of the range\n// and odd indices to the last half of the range\nint map[10]   = {0, 2, 4, 6, 8, 1, 3, 5, 7, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10);\nthrust::gather(thrust::device,\n               d_map.begin(), d_map.end(),\n               d_values.begin(),\n               d_output.begin());\n// d_output is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::gather",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/gather.h",
        "line": 88
      },
      "name": "gather",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "map_first",
          "text": "Beginning of the range of gather locations. "
        },
        {
          "name": "map_last",
          "text": "End of the range of gather locations. "
        },
        {
          "name": "input_first",
          "text": "Beginning of the source range. "
        },
        {
          "name": "result",
          "text": "Beginning of the destination range."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "map_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "map_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "input_first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[map&#95;first, map&#95;last)</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The input data shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::gather",
      "refid": "group__gathering_1ga86722e76264fb600d659c1adef5d51b2",
      "remark": [
        "<code>gather</code> is the inverse of thrust::scatter."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a> and <code>RandomAccessIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "gather",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__gathering.html#function-gather",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-gather",
      "argsString": "(InputIterator map_first, InputIterator map_last, RandomAccessIterator input_first, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::gather",
      "deleted": false,
      "details": "<code>gather</code> copies elements from a source array into a destination range according to a map. For each input iterator <code>i</code> in the range <code>[map&#95;first, map&#95;last)</code>, the value <code>input&#95;first[&#42;i]</code> is assigned to <code>&#42;(result + (i - map&#95;first))</code>. <code>RandomAccessIterator</code> must permit random access.\n\n\nThe following code snippet demonstrates how to use <code>gather</code> to reorder a range.\n\n\n\n```cpp\n#include <thrust/gather.h>\n#include <thrust/device_vector.h>\n...\n// mark even indices with a 1; odd indices with a 0\nint values[10] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// gather all even indices into the first half of the range\n// and odd indices to the last half of the range\nint map[10]   = {0, 2, 4, 6, 8, 1, 3, 5, 7, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10);\nthrust::gather(d_map.begin(), d_map.end(),\n               d_values.begin(),\n               d_output.begin());\n// d_output is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::gather",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/gather.h",
        "line": 140
      },
      "name": "gather",
      "override": false,
      "paramList": [
        {
          "name": "map_first",
          "text": "Beginning of the range of gather locations. "
        },
        {
          "name": "map_last",
          "text": "End of the range of gather locations. "
        },
        {
          "name": "input_first",
          "text": "Beginning of the source range. "
        },
        {
          "name": "result",
          "text": "Beginning of the destination range."
        }
      ],
      "params": [
        {
          "name": "map_first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "map_last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "input_first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[map&#95;first, map&#95;last)</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The input data shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::gather",
      "refid": "group__gathering_1ga6fdb1fe3ff0d9ce01f41a72fa94c56df",
      "remark": [
        "<code>gather</code> is the inverse of thrust::scatter."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a> and <code>RandomAccessIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "gather",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__gathering.html#function-gather",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-gather-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 map_first, InputIterator1 map_last, InputIterator2 stencil, RandomAccessIterator input_first, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::gather_if",
      "deleted": false,
      "details": "<code>gather&#95;if</code> conditionally copies elements from a source array into a destination range according to a map. For each input iterator <code>i</code> in the range <code>[map&#95;first, map&#95;last)</code>, such that the value of <code>&#42;(stencil + (i - map&#95;first))</code> is <code>true</code>, the value <code>input&#95;first[&#42;i]</code> is assigned to <code>&#42;(result + (i - map&#95;first))</code>. <code>RandomAccessIterator</code> must permit random access.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>gather&#95;if</code> to gather selected values from an input range using the <code>thrust::device</code> execution policy:\n\n\n\n```cpp\n#include <thrust/gather.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n\nint values[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// select elements at even-indexed locations\nint stencil[10] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};\nthrust::device_vector<int> d_stencil(stencil, stencil + 10);\n\n// map all even indices into the first half of the range\n// and odd indices to the last half of the range\nint map[10]   = {0, 2, 4, 6, 8, 1, 3, 5, 7, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10, 7);\nthrust::gather_if(thrust::device,\n                  d_map.begin(), d_map.end(),\n                  d_stencil.begin(),\n                  d_values.begin(),\n                  d_output.begin());\n// d_output is now {0, 7, 4, 7, 8, 7, 3, 7, 7, 7}\n```",
      "explicit": false,
      "fullname": "thrust::gather_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/gather.h",
        "line": 209
      },
      "name": "gather_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "map_first",
          "text": "Beginning of the range of gather locations. "
        },
        {
          "name": "map_last",
          "text": "End of the range of gather locations. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the range of predicate values. "
        },
        {
          "name": "input_first",
          "text": "Beginning of the source range. "
        },
        {
          "name": "result",
          "text": "Beginning of the destination range."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "map_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "input_first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[map&#95;first, map&#95;last)</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The range <code>[stencil, stencil + (map&#95;last - map&#95;first))</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The input data shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::gather_if",
      "refid": "group__gathering_1gab487e68db682dd1b8437be2669a9b8c2",
      "remark": [
        "<code>gather&#95;if</code> is the inverse of <code>scatter&#95;if</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>bool</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a> and <code>RandomAccessIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "gather_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__gathering.html#function-gather-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-gather-if",
      "argsString": "(InputIterator1 map_first, InputIterator1 map_last, InputIterator2 stencil, RandomAccessIterator input_first, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::gather_if",
      "deleted": false,
      "details": "<code>gather&#95;if</code> conditionally copies elements from a source array into a destination range according to a map. For each input iterator <code>i</code> in the range <code>[map&#95;first, map&#95;last)</code>, such that the value of <code>&#42;(stencil + (i - map&#95;first))</code> is <code>true</code>, the value <code>input&#95;first[&#42;i]</code> is assigned to <code>&#42;(result + (i - map&#95;first))</code>. <code>RandomAccessIterator</code> must permit random access.\n\n\nThe following code snippet demonstrates how to use <code>gather&#95;if</code> to gather selected values from an input range.\n\n\n\n```cpp\n#include <thrust/gather.h>\n#include <thrust/device_vector.h>\n...\n\nint values[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// select elements at even-indexed locations\nint stencil[10] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};\nthrust::device_vector<int> d_stencil(stencil, stencil + 10);\n\n// map all even indices into the first half of the range\n// and odd indices to the last half of the range\nint map[10]   = {0, 2, 4, 6, 8, 1, 3, 5, 7, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10, 7);\nthrust::gather_if(d_map.begin(), d_map.end(),\n                  d_stencil.begin(),\n                  d_values.begin(),\n                  d_output.begin());\n// d_output is now {0, 7, 4, 7, 8, 7, 3, 7, 7, 7}\n```",
      "explicit": false,
      "fullname": "thrust::gather_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/gather.h",
        "line": 272
      },
      "name": "gather_if",
      "override": false,
      "paramList": [
        {
          "name": "map_first",
          "text": "Beginning of the range of gather locations. "
        },
        {
          "name": "map_last",
          "text": "End of the range of gather locations. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the range of predicate values. "
        },
        {
          "name": "input_first",
          "text": "Beginning of the source range. "
        },
        {
          "name": "result",
          "text": "Beginning of the destination range."
        }
      ],
      "params": [
        {
          "name": "map_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "input_first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[map&#95;first, map&#95;last)</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The range <code>[stencil, stencil + (map&#95;last - map&#95;first))</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The input data shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::gather_if",
      "refid": "group__gathering_1gaf7acd33a67b2313a651ee19f3ac5cd04",
      "remark": [
        "<code>gather&#95;if</code> is the inverse of <code>scatter&#95;if</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>bool</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a> and <code>RandomAccessIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "gather_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__gathering.html#function-gather-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-gather-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 map_first, InputIterator1 map_last, InputIterator2 stencil, RandomAccessIterator input_first, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::gather_if",
      "deleted": false,
      "details": "<code>gather&#95;if</code> conditionally copies elements from a source array into a destination range according to a map. For each input iterator <code>i</code> in the range <code>[map&#95;first, map&#95;last)</code> such that the value of <code>pred(&#42;(stencil + (i - map&#95;first)))</code> is <code>true</code>, the value <code>input&#95;first[&#42;i]</code> is assigned to <code>&#42;(result + (i - map&#95;first))</code>. <code>RandomAccessIterator</code> must permit random access.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>gather&#95;if</code> to gather selected values from an input range based on an arbitrary selection function using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/gather.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\n\nint values[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// we will select an element when our stencil is even\nint stencil[10] = {0, 3, 4, 1, 4, 1, 2, 7, 8, 9};\nthrust::device_vector<int> d_stencil(stencil, stencil + 10);\n\n// map all even indices into the first half of the range\n// and odd indices to the last half of the range\nint map[10]   = {0, 2, 4, 6, 8, 1, 3, 5, 7, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10, 7);\nthrust::gather_if(thrust::device,\n                  d_map.begin(), d_map.end(),\n                  d_stencil.begin(),\n                  d_values.begin(),\n                  d_output.begin(),\n                  is_even());\n// d_output is now {0, 7, 4, 7, 8, 7, 3, 7, 7, 7}\n```",
      "explicit": false,
      "fullname": "thrust::gather_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/gather.h",
        "line": 355
      },
      "name": "gather_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "map_first",
          "text": "Beginning of the range of gather locations. "
        },
        {
          "name": "map_last",
          "text": "End of the range of gather locations. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the range of predicate values. "
        },
        {
          "name": "input_first",
          "text": "Beginning of the source range. "
        },
        {
          "name": "result",
          "text": "Beginning of the destination range. "
        },
        {
          "name": "pred",
          "text": "Predicate to apply to the stencil values."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "map_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "input_first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[map&#95;first, map&#95;last)</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The range <code>[stencil, stencil + (map&#95;last - map&#95;first))</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The input data shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::gather_if",
      "refid": "group__gathering_1gaf9f82c5f9cb7ee4bbafc827b86c50cda",
      "remark": [
        "<code>gather&#95;if</code> is the inverse of <code>scatter&#95;if</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a> and <code>RandomAccessIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "gather_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__gathering.html#function-gather-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-gather-if",
      "argsString": "(InputIterator1 map_first, InputIterator1 map_last, InputIterator2 stencil, RandomAccessIterator input_first, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::gather_if",
      "deleted": false,
      "details": "<code>gather&#95;if</code> conditionally copies elements from a source array into a destination range according to a map. For each input iterator <code>i</code> in the range <code>[map&#95;first, map&#95;last)</code> such that the value of <code>pred(&#42;(stencil + (i - map&#95;first)))</code> is <code>true</code>, the value <code>input&#95;first[&#42;i]</code> is assigned to <code>&#42;(result + (i - map&#95;first))</code>. <code>RandomAccessIterator</code> must permit random access.\n\n\nThe following code snippet demonstrates how to use <code>gather&#95;if</code> to gather selected values from an input range based on an arbitrary selection function.\n\n\n\n```cpp\n#include <thrust/gather.h>\n#include <thrust/device_vector.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\n\nint values[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// we will select an element when our stencil is even\nint stencil[10] = {0, 3, 4, 1, 4, 1, 2, 7, 8, 9};\nthrust::device_vector<int> d_stencil(stencil, stencil + 10);\n\n// map all even indices into the first half of the range\n// and odd indices to the last half of the range\nint map[10]   = {0, 2, 4, 6, 8, 1, 3, 5, 7, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10, 7);\nthrust::gather_if(d_map.begin(), d_map.end(),\n                  d_stencil.begin(),\n                  d_values.begin(),\n                  d_output.begin(),\n                  is_even());\n// d_output is now {0, 7, 4, 7, 8, 7, 3, 7, 7, 7}\n```",
      "explicit": false,
      "fullname": "thrust::gather_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/gather.h",
        "line": 432
      },
      "name": "gather_if",
      "override": false,
      "paramList": [
        {
          "name": "map_first",
          "text": "Beginning of the range of gather locations. "
        },
        {
          "name": "map_last",
          "text": "End of the range of gather locations. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the range of predicate values. "
        },
        {
          "name": "input_first",
          "text": "Beginning of the source range. "
        },
        {
          "name": "result",
          "text": "Beginning of the destination range. "
        },
        {
          "name": "pred",
          "text": "Predicate to apply to the stencil values."
        }
      ],
      "params": [
        {
          "name": "map_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "input_first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[map&#95;first, map&#95;last)</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The range <code>[stencil, stencil + (map&#95;last - map&#95;first))</code> shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>. ",
        "The input data shall not overlap the range <code>[result, result + (map&#95;last - map&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::gather_if",
      "refid": "group__gathering_1ga99684dec614e14ccc4b2b6b896324b81",
      "remark": [
        "<code>gather&#95;if</code> is the inverse of <code>scatter&#95;if</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a> and <code>RandomAccessIterator's</code><code>value&#95;type</code> must be convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "gather_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__gathering.html#function-gather-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::generate",
      "deleted": false,
      "details": "<code>generate</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,last)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdlib>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate(thrust::host, v.begin(), v.end(), rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "thrust::generate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/generate.h",
        "line": 74
      },
      "name": "generate",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "last",
          "text": "The last element in the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,last)</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate",
      "refid": "group__transformations_1ga12910ae45ed109cf3eef7df63573e063",
      "see": [
        "generate_n ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "generate",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate",
      "argsString": "(ForwardIterator first, ForwardIterator last, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::generate",
      "deleted": false,
      "details": "<code>generate</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,last)</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code>.\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdlib>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate(v.begin(), v.end(), rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "thrust::generate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/generate.h",
        "line": 114
      },
      "name": "generate",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "last",
          "text": "The last element in the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,last)</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate",
      "refid": "group__transformations_1gaa6d990b511b9a2d92599d35bd58e7e9f",
      "see": [
        "generate_n ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "generate",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate-n",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, OutputIterator first, Size n, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::generate_n",
      "deleted": false,
      "details": "<code>generate&#95;n</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,first + n)</code>. The return value is <code>first + n</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <thrust/execution_policy.h>\n#include <cstdlib>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate_n(thrust::host, v.begin(), 10, rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "thrust::generate_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/generate.h",
        "line": 160
      },
      "name": "generate_n",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "n",
          "text": "The size of the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,first + n)</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate_n",
      "refid": "group__transformations_1ga13215ccf8a505b1dd1996b2ac3a52bd1",
      "see": [
        "generate ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Size",
          "text": "is an integral type (either signed or unsigned). "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "generate_n",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-generate-n",
      "argsString": "(OutputIterator first, Size n, Generator gen)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::generate_n",
      "deleted": false,
      "details": "<code>generate&#95;n</code> assigns the result of invoking <code>gen</code>, a function object that takes no arguments, to each element in the range <code>[first,first + n)</code>. The return value is <code>first + n</code>.\n\n\nThe following code snippet demonstrates how to fill a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> with random numbers, using the standard C library function <code>rand</code>.\n\n\n\n```cpp\n#include <thrust/generate.h>\n#include <thrust/host_vector.h>\n#include <stdlib.h>\n...\nthrust::host_vector<int> v(10);\nsrand(13);\nthrust::generate_n(v.begin(), 10, rand);\n\n// the elements of v are now pseudo-random numbers\n```",
      "explicit": false,
      "fullname": "thrust::generate_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/generate.h",
        "line": 200
      },
      "name": "generate_n",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element in the range of interest. "
        },
        {
          "name": "n",
          "text": "The size of the range of interest. "
        },
        {
          "name": "gen",
          "text": "A function argument, taking no parameters, used to generate values to assign to elements in the range <code>[first,first + n)</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "gen",
          "type": "Generator",
          "typePlain": "Generator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::generate_n",
      "refid": "group__transformations_1gaed80b4c08f4ebbd7598cd2cea418e2b3",
      "see": [
        "generate ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/generate\">https://en.cppreference.com/w/cpp/algorithm/generate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename Generator",
          "typePlain": "typename Generator"
        }
      ],
      "templateParamsList": [
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Size",
          "text": "is an integral type (either signed or unsigned). "
        },
        {
          "name": "Generator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional\">Generator</a>, and <code>Generator's</code><code>result&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>."
        }
      ],
      "title": "generate_n",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-generate-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap",
      "argsString": "(host_vector< T, Alloc > &a, host_vector< T, Alloc > &b)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::swap",
      "deleted": false,
      "details": "Exchanges the values of two vectors. <code>x</code> The first <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> of interest. <code>y</code> The second <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host&#95;vector</a></code> of interest. ",
      "explicit": false,
      "fullname": "thrust::swap",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 508,
        "bodyFile": "thrust/host_vector.h",
        "bodyStart": 505,
        "column": 8,
        "file": "thrust/host_vector.h",
        "line": 505
      },
      "name": "swap",
      "override": false,
      "params": [
        {
          "name": "a",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host_vector</a>< T, Alloc > &",
          "typePlain": "host_vector< T, Alloc > &"
        },
        {
          "name": "b",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1host__vector.html\">host_vector</a>< T, Alloc > &",
          "typePlain": "host_vector< T, Alloc > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap",
      "refid": "group__host__containers_1ga2d69d9d0a30180fe96b24c84d997a376",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Alloc",
          "typePlain": "typename Alloc"
        }
      ],
      "title": "swap",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__host__containers.html#function-swap",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inner-product",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputType init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputType thrust::inner_product",
      "deleted": false,
      "details": "<code>inner&#95;product</code> calculates an inner product of the ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code>.\n\nSpecifically, this version of <code>inner&#95;product</code> computes the sum <code>init + (&#42;first1 &#42; &#42;first2) + (&#42;(first1+1) &#42; &#42;(first2+1)) + ... </code>\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code demonstrates how to use <code>inner&#95;product</code> to compute the dot product of two vectors using the <code>thrust::host</code> execution policy for parallelization.\n\n\n\n```cpp\n#include <thrust/inner_product.h>\n#include <thrust/execution_policy.h>\n...\nfloat vec1[3] = {1.0f, 2.0f, 5.0f};\nfloat vec2[3] = {4.0f, 1.0f, 5.0f};\n\nfloat result = thrust::inner_product(thrust::host, vec1, vec1 + 3, vec2, 0.0f);\n\n// result == 31.0f\n```",
      "explicit": false,
      "fullname": "thrust::inner_product",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 12,
        "file": "thrust/inner_product.h",
        "line": 83
      },
      "name": "inner_product",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "init",
          "text": "Initial value of the result. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "init",
          "type": "OutputType",
          "typePlain": "OutputType"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inner_product",
      "refid": "group__transformed__reductions_1ga321192d85c5f510e52300ae762c7e995",
      "returns": [
        "The inner product of sequences <code>[first1, last1)</code> and <code>[first2, last2)</code> plus <code>init</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/inner_product\">https://en.cppreference.com/w/cpp/algorithm/inner_product</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputType",
          "typePlain": "typename OutputType"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputType",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and if <code>x</code> is an object of type <code>OutputType</code>, and <code>y</code> is an object of <code>InputIterator1's</code><code>value&#95;type</code>, and <code>z</code> is an object of <code>InputIterator2's</code><code>value&#95;type</code>, then <code>x + y &#42; z</code> is defined and is convertible to <code>OutputType</code>."
        }
      ],
      "title": "inner_product",
      "type": "__host__ __device__ OutputType",
      "typePlain": "__host__ __device__ OutputType",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__reductions.html#function-inner-product",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inner-product",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputType init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputType thrust::inner_product",
      "deleted": false,
      "details": "<code>inner&#95;product</code> calculates an inner product of the ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code>.\n\nSpecifically, this version of <code>inner&#95;product</code> computes the sum <code>init + (&#42;first1 &#42; &#42;first2) + (&#42;(first1+1) &#42; &#42;(first2+1)) + ... </code>\n\nUnlike the C++ Standard Template Library function <code>std::inner&#95;product</code>, this version offers no guarantee on order of execution.\n\n\nThe following code demonstrates how to use <code>inner&#95;product</code> to compute the dot product of two vectors.\n\n\n\n```cpp\n#include <thrust/inner_product.h>\n...\nfloat vec1[3] = {1.0f, 2.0f, 5.0f};\nfloat vec2[3] = {4.0f, 1.0f, 5.0f};\n\nfloat result = thrust::inner_product(vec1, vec1 + 3, vec2, 0.0f);\n\n// result == 31.0f\n```",
      "explicit": false,
      "fullname": "thrust::inner_product",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 12,
        "file": "thrust/inner_product.h",
        "line": 130
      },
      "name": "inner_product",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "init",
          "text": "Initial value of the result. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "init",
          "type": "OutputType",
          "typePlain": "OutputType"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inner_product",
      "refid": "group__transformed__reductions_1ga295676877375893891b3e06fac5be34a",
      "returns": [
        "The inner product of sequences <code>[first1, last1)</code> and <code>[first2, last2)</code> plus <code>init</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/inner_product\">https://en.cppreference.com/w/cpp/algorithm/inner_product</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputType",
          "typePlain": "typename OutputType"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputType",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and if <code>x</code> is an object of type <code>OutputType</code>, and <code>y</code> is an object of <code>InputIterator1's</code><code>value&#95;type</code>, and <code>z</code> is an object of <code>InputIterator2's</code><code>value&#95;type</code>, then <code>x + y &#42; z</code> is defined and is convertible to <code>OutputType</code>."
        }
      ],
      "title": "inner_product",
      "type": "OutputType",
      "typePlain": "OutputType",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__reductions.html#function-inner-product",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inner-product",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputType init, BinaryFunction1 binary_op1, BinaryFunction2 binary_op2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputType thrust::inner_product",
      "deleted": false,
      "details": "<code>inner&#95;product</code> calculates an inner product of the ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code>.\n\nThis version of <code>inner&#95;product</code> is identical to the first, except that is uses two user-supplied function objects instead of <code>operator+</code> and <code>operator&#42;</code>.\n\nSpecifically, this version of <code>inner&#95;product</code> computes the sum <code>binary&#95;op1( init, binary&#95;op2(&#42;first1, &#42;first2) ), ... </code>\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/inner_product.h>\n#include <thrust/execution_policy.h>\n...\nfloat vec1[3] = {1.0f, 2.0f, 5.0f};\nfloat vec2[3] = {4.0f, 1.0f, 5.0f};\n\nfloat init = 0.0f;\nthrust::plus<float>       binary_op1;\nthrust::multiplies<float> binary_op2;\n\nfloat result = thrust::inner_product(thrust::host, vec1, vec1 + 3, vec2, init, binary_op1, binary_op2);\n\n// result == 31.0f\n```",
      "explicit": false,
      "fullname": "thrust::inner_product",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 12,
        "file": "thrust/inner_product.h",
        "line": 191
      },
      "name": "inner_product",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "init",
          "text": "Initial value of the result. "
        },
        {
          "name": "binary_op1",
          "text": "Generalized addition operation. "
        },
        {
          "name": "binary_op2",
          "text": "Generalized multiplication operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "init",
          "type": "OutputType",
          "typePlain": "OutputType"
        },
        {
          "name": "binary_op1",
          "type": "BinaryFunction1",
          "typePlain": "BinaryFunction1"
        },
        {
          "name": "binary_op2",
          "type": "BinaryFunction2",
          "typePlain": "BinaryFunction2"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inner_product",
      "refid": "group__transformed__reductions_1ga13f18496e409c64a0cbf21e19c3bdad2",
      "returns": [
        "The inner product of sequences <code>[first1, last1)</code> and <code>[first2, last2)</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/inner_product\">https://en.cppreference.com/w/cpp/algorithm/inner_product</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputType",
          "typePlain": "typename OutputType"
        },
        {
          "name": "",
          "type": "typename BinaryFunction1",
          "typePlain": "typename BinaryFunction1"
        },
        {
          "name": "",
          "type": "typename BinaryFunction2",
          "typePlain": "typename BinaryFunction2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction2's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction2's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "OutputType",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>OutputType</code> is convertible to <code>BinaryFunction1's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryFunction1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction1's</code><code>return&#95;type</code> is convertible to <code>OutputType</code>. "
        },
        {
          "name": "BinaryFunction2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction2's</code><code>return&#95;type</code> is convertible to <code>BinaryFunction1's</code><code>second&#95;argument&#95;type</code>."
        }
      ],
      "title": "inner_product",
      "type": "__host__ __device__ OutputType",
      "typePlain": "__host__ __device__ OutputType",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__reductions.html#function-inner-product",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inner-product",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputType init, BinaryFunction1 binary_op1, BinaryFunction2 binary_op2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputType thrust::inner_product",
      "deleted": false,
      "details": "<code>inner&#95;product</code> calculates an inner product of the ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code>.\n\nThis version of <code>inner&#95;product</code> is identical to the first, except that is uses two user-supplied function objects instead of <code>operator+</code> and <code>operator&#42;</code>.\n\nSpecifically, this version of <code>inner&#95;product</code> computes the sum <code>binary&#95;op1( init, binary&#95;op2(&#42;first1, &#42;first2) ), ... </code>\n\nUnlike the C++ Standard Template Library function <code>std::inner&#95;product</code>, this version offers no guarantee on order of execution.\n\n\n\n```cpp\n#include <thrust/inner_product.h>\n...\nfloat vec1[3] = {1.0f, 2.0f, 5.0f};\nfloat vec2[3] = {4.0f, 1.0f, 5.0f};\n\nfloat init = 0.0f;\nthrust::plus<float>       binary_op1;\nthrust::multiplies<float> binary_op2;\n\nfloat result = thrust::inner_product(vec1, vec1 + 3, vec2, init, binary_op1, binary_op2);\n\n// result == 31.0f\n```",
      "explicit": false,
      "fullname": "thrust::inner_product",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 12,
        "file": "thrust/inner_product.h",
        "line": 250
      },
      "name": "inner_product",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "init",
          "text": "Initial value of the result. "
        },
        {
          "name": "binary_op1",
          "text": "Generalized addition operation. "
        },
        {
          "name": "binary_op2",
          "text": "Generalized multiplication operation. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "init",
          "type": "OutputType",
          "typePlain": "OutputType"
        },
        {
          "name": "binary_op1",
          "type": "BinaryFunction1",
          "typePlain": "BinaryFunction1"
        },
        {
          "name": "binary_op2",
          "type": "BinaryFunction2",
          "typePlain": "BinaryFunction2"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inner_product",
      "refid": "group__transformed__reductions_1gad9df36f7648745ca572037727b66b48d",
      "returns": [
        "The inner product of sequences <code>[first1, last1)</code> and <code>[first2, last2)</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/inner_product\">https://en.cppreference.com/w/cpp/algorithm/inner_product</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputType",
          "typePlain": "typename OutputType"
        },
        {
          "name": "",
          "type": "typename BinaryFunction1",
          "typePlain": "typename BinaryFunction1"
        },
        {
          "name": "",
          "type": "typename BinaryFunction2",
          "typePlain": "typename BinaryFunction2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction2's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction2's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "OutputType",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>OutputType</code> is convertible to <code>BinaryFunction1's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryFunction1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction1's</code><code>return&#95;type</code> is convertible to <code>OutputType</code>. "
        },
        {
          "name": "BinaryFunction2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction2's</code><code>return&#95;type</code> is convertible to <code>BinaryFunction1's</code><code>second&#95;argument&#95;type</code>."
        }
      ],
      "title": "inner_product",
      "type": "OutputType",
      "typePlain": "OutputType",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__reductions.html#function-inner-product",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-constant-iterator",
      "argsString": "(ValueT x, IndexT i=int())",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ constant_iterator< ValueT, IndexT > thrust::make_constant_iterator",
      "deleted": false,
      "details": "This version of <code>make&#95;constant&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a></code> from values given for both value and index. The type of <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a></code> may be inferred by the compiler from the types of its parameters.",
      "explicit": false,
      "fullname": "thrust::make_constant_iterator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 224,
        "bodyFile": "thrust/iterator/constant_iterator.h",
        "bodyStart": 221,
        "column": 19,
        "file": "thrust/iterator/constant_iterator.h",
        "line": 221
      },
      "name": "make_constant_iterator",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The value of the returned <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a>'s</code> constant value. "
        },
        {
          "name": "i",
          "text": "The index of the returned <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a></code> within a sequence. The type of this parameter defaults to <code>int</code>. In the default case, the value of this parameter is <code>0</code>."
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "ValueT",
          "typePlain": "ValueT"
        },
        {
          "defval": "int()",
          "defvalPlain": "int()",
          "name": "i",
          "type": "IndexT",
          "typePlain": "IndexT"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_constant_iterator",
      "refid": "group__fancyiterator_1ga832a571f1e970c62f0a233547aac2645",
      "returns": [
        "A new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a></code> with constant value & index as given by <code>x</code> & <code>i</code>."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ValueT",
          "typePlain": "typename ValueT"
        },
        {
          "name": "",
          "type": "typename IndexT",
          "typePlain": "typename IndexT"
        }
      ],
      "title": "make_constant_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant_iterator</a>< ValueT, IndexT >",
      "typePlain": "__host__ __device__ constant_iterator< ValueT, IndexT >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-constant-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-constant-iterator",
      "argsString": "(V x)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ constant_iterator< V > thrust::make_constant_iterator",
      "deleted": false,
      "details": "This version of <code>make&#95;constant&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a></code> using only a parameter for the desired constant value. The value of the returned <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a>'s</code> index is set to <code>0</code>.",
      "explicit": false,
      "fullname": "thrust::make_constant_iterator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 241,
        "bodyFile": "thrust/iterator/constant_iterator.h",
        "bodyStart": 238,
        "column": 19,
        "file": "thrust/iterator/constant_iterator.h",
        "line": 238
      },
      "name": "make_constant_iterator",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The value of the returned <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a>'s</code> constant value. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "V",
          "typePlain": "V"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_constant_iterator",
      "refid": "group__fancyiterator_1ga205446936f9da381f20ee34828dd7c66",
      "returns": [
        "A new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant&#95;iterator</a></code> with constant value equal to <code>x</code> and index equal to <code>0</code>. "
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename V",
          "typePlain": "typename V"
        }
      ],
      "title": "make_constant_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant_iterator</a>< V >",
      "typePlain": "__host__ __device__ constant_iterator< V >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-constant-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-counting-iterator",
      "argsString": "(Incrementable x)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ counting_iterator< Incrementable > thrust::make_counting_iterator",
      "deleted": false,
      "details": "<code>make&#95;counting&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1counting__iterator.html\">counting&#95;iterator</a></code> using an initial value for its <code>Incrementable</code> counter.",
      "explicit": false,
      "fullname": "thrust::make_counting_iterator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 237,
        "bodyFile": "thrust/iterator/counting_iterator.h",
        "bodyStart": 234,
        "column": 19,
        "file": "thrust/iterator/counting_iterator.h",
        "line": 234
      },
      "name": "make_counting_iterator",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The initial value of the new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1counting__iterator.html\">counting&#95;iterator</a>'s</code> counter. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "Incrementable",
          "typePlain": "Incrementable"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_counting_iterator",
      "refid": "group__fancyiterator_1gaba5c1b2b52014fdb68097b56666d4630",
      "returns": [
        "A new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1counting__iterator.html\">counting&#95;iterator</a></code> whose counter has been initialized to <code>x</code>. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename Incrementable",
          "typePlain": "typename Incrementable"
        }
      ],
      "title": "make_counting_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1counting__iterator.html\">counting_iterator</a>< Incrementable >",
      "typePlain": "__host__ __device__ counting_iterator< Incrementable >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-counting-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-discard-iterator",
      "argsString": "(discard_iterator<>::difference_type i=discard_iterator<>::difference_type(0))",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ discard_iterator thrust::make_discard_iterator",
      "deleted": false,
      "details": "<code>make&#95;discard&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1discard__iterator.html\">discard&#95;iterator</a></code> from an optional index parameter.",
      "explicit": false,
      "fullname": "thrust::make_discard_iterator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 163,
        "bodyFile": "thrust/iterator/discard_iterator.h",
        "bodyStart": 160,
        "column": 2,
        "file": "thrust/iterator/discard_iterator.h",
        "line": 160
      },
      "name": "make_discard_iterator",
      "override": false,
      "paramList": [
        {
          "name": "i",
          "text": "The index of the returned <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1discard__iterator.html\">discard&#95;iterator</a></code> within a range. In the default case, the value of this parameter is <code>0</code>."
        }
      ],
      "params": [
        {
          "defval": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1discard__iterator.html\">discard_iterator</a><>::difference_type(0)",
          "defvalPlain": "discard_iterator<>::difference_type(0)",
          "name": "i",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1discard__iterator.html\">discard_iterator</a><>::difference_type",
          "typePlain": "discard_iterator<>::difference_type"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_discard_iterator",
      "refid": "group__fancyiterator_1ga9c95ea281f5a4a0e3c4ff345baaa3a16",
      "returns": [
        "A new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1discard__iterator.html\">discard&#95;iterator</a></code> with index as given by <code>i</code>."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1constant__iterator.html\">constant_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "title": "make_discard_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1discard__iterator.html\">discard_iterator</a>",
      "typePlain": "__host__ __device__ discard_iterator",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-discard-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-permutation-iterator",
      "argsString": "(ElementIterator e, IndexIterator i)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ permutation_iterator< ElementIterator, IndexIterator > thrust::make_permutation_iterator",
      "deleted": false,
      "details": "<code>make&#95;permutation&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1permutation__iterator.html\">permutation&#95;iterator</a></code> from an <code>ElementIterator</code> pointing to a range of elements to \"permute\" and an <code>IndexIterator</code> pointing to a range of indices defining an indexing scheme on the values.",
      "explicit": false,
      "fullname": "thrust::make_permutation_iterator",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 207,
        "bodyFile": "thrust/iterator/permutation_iterator.h",
        "bodyStart": 204,
        "column": 22,
        "file": "thrust/iterator/permutation_iterator.h",
        "line": 204
      },
      "name": "make_permutation_iterator",
      "override": false,
      "paramList": [
        {
          "name": "e",
          "text": "An <code>ElementIterator</code> pointing to a range of values. "
        },
        {
          "name": "i",
          "text": "An <code>IndexIterator</code> pointing to an indexing scheme to use on <code>e</code>. "
        }
      ],
      "params": [
        {
          "name": "e",
          "type": "ElementIterator",
          "typePlain": "ElementIterator"
        },
        {
          "name": "i",
          "type": "IndexIterator",
          "typePlain": "IndexIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_permutation_iterator",
      "refid": "group__fancyiterator_1ga009cbf131b31838096a4c43bfeb5c6b2",
      "returns": [
        "A new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1permutation__iterator.html\">permutation&#95;iterator</a></code> which permutes the range <code>e</code> by <code>i</code>. "
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1permutation__iterator.html\">permutation_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ElementIterator",
          "typePlain": "typename ElementIterator"
        },
        {
          "name": "",
          "type": "typename IndexIterator",
          "typePlain": "typename IndexIterator"
        }
      ],
      "title": "make_permutation_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1permutation__iterator.html\">permutation_iterator</a>< ElementIterator, IndexIterator >",
      "typePlain": "__host__ __device__ permutation_iterator< ElementIterator, IndexIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-permutation-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-reverse-iterator",
      "argsString": "(BidirectionalIterator x)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ reverse_iterator< BidirectionalIterator > thrust::make_reverse_iterator",
      "deleted": false,
      "details": "<code>make&#95;reverse&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html\">reverse&#95;iterator</a></code> from a <code>BidirectionalIterator</code> pointing to a range of elements to reverse.",
      "explicit": false,
      "fullname": "thrust::make_reverse_iterator",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/iterator/reverse_iterator.h",
        "line": 225
      },
      "name": "make_reverse_iterator",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "A <code>BidirectionalIterator</code> pointing to a range to reverse. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_reverse_iterator",
      "refid": "group__fancyiterator_1ga9a7552d48bb0501b948cd17eeb49aaaf",
      "returns": [
        "A new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html\">reverse&#95;iterator</a></code> which reverses the range <code>x</code>. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename BidirectionalIterator",
          "typePlain": "typename BidirectionalIterator"
        }
      ],
      "title": "make_reverse_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html\">reverse_iterator</a>< BidirectionalIterator >",
      "typePlain": "__host__ __device__ reverse_iterator< BidirectionalIterator >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-reverse-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-transform-input-output-iterator",
      "argsString": "(Iterator io, InputFunction input_function, OutputFunction output_function)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "transform_input_output_iterator< InputFunction, OutputFunction, Iterator > __host__ __device__ thrust::make_transform_input_output_iterator",
      "deleted": false,
      "details": "<code>make&#95;transform&#95;input&#95;output&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__input__output__iterator.html\">transform&#95;input&#95;output&#95;iterator</a></code> from an <code>Iterator</code> a <code>InputFunction</code> and a <code>OutputFunction</code>",
      "explicit": false,
      "fullname": "thrust::make_transform_input_output_iterator",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 153,
        "bodyFile": "thrust/iterator/transform_input_output_iterator.h",
        "bodyStart": 150,
        "column": 1,
        "file": "thrust/iterator/transform_input_output_iterator.h",
        "line": 150
      },
      "name": "make_transform_input_output_iterator",
      "override": false,
      "paramList": [
        {
          "name": "io",
          "text": "An <code>Iterator</code> pointing to where the input to <code>InputFunction</code> will be read from and the result of <code>OutputFunction</code> will be written to "
        },
        {
          "name": "input_function",
          "text": "An <code>InputFunction</code> to be executed on values read from the iterator "
        },
        {
          "name": "output_function",
          "text": "An <code>OutputFunction</code> to be executed on values written to the iterator "
        }
      ],
      "params": [
        {
          "name": "io",
          "type": "Iterator",
          "typePlain": "Iterator"
        },
        {
          "name": "input_function",
          "type": "InputFunction",
          "typePlain": "InputFunction"
        },
        {
          "name": "output_function",
          "type": "OutputFunction",
          "typePlain": "OutputFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_transform_input_output_iterator",
      "refid": "group__fancyiterator_1gac2a0778aa8ed709a77cb885681521392",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__input__output__iterator.html\">transform_input_output_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputFunction",
          "typePlain": "typename InputFunction"
        },
        {
          "name": "",
          "type": "typename OutputFunction",
          "typePlain": "typename OutputFunction"
        },
        {
          "name": "",
          "type": "typename Iterator",
          "typePlain": "typename Iterator"
        }
      ],
      "title": "make_transform_input_output_iterator",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__input__output__iterator.html\">transform_input_output_iterator</a>< InputFunction, OutputFunction, Iterator > __host__ __device__",
      "typePlain": "transform_input_output_iterator< InputFunction, OutputFunction, Iterator > __host__ __device__",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-transform-input-output-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-transform-iterator",
      "argsString": "(Iterator it, AdaptableUnaryFunction fun)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ transform_iterator< AdaptableUnaryFunction, Iterator > thrust::make_transform_iterator",
      "deleted": false,
      "details": "<code>make&#95;transform&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__iterator.html\">transform&#95;iterator</a></code> from an <code>Iterator</code> and <code>AdaptableUnaryFunction</code>.",
      "explicit": false,
      "fullname": "thrust::make_transform_iterator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 346,
        "bodyFile": "thrust/iterator/transform_iterator.h",
        "bodyStart": 343,
        "column": 1,
        "file": "thrust/iterator/transform_iterator.h",
        "line": 343
      },
      "name": "make_transform_iterator",
      "override": false,
      "paramList": [
        {
          "name": "it",
          "text": "The <code>Iterator</code> pointing to the input range of the newly created <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__iterator.html\">transform&#95;iterator</a></code>. "
        },
        {
          "name": "fun",
          "text": "The <code>AdaptableUnaryFunction</code> used to transform the range pointed to by <code>it</code> in the newly created <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__iterator.html\">transform&#95;iterator</a></code>. "
        }
      ],
      "params": [
        {
          "name": "it",
          "type": "Iterator",
          "typePlain": "Iterator"
        },
        {
          "name": "fun",
          "type": "AdaptableUnaryFunction",
          "typePlain": "AdaptableUnaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_transform_iterator",
      "refid": "group__fancyiterator_1gab2f05c189b469454d0adebeb70f0cd6a",
      "returns": [
        "A new <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__iterator.html\">transform&#95;iterator</a></code> which transforms the range at <code>it</code> by <code>fun</code>. "
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__iterator.html\">transform_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class AdaptableUnaryFunction",
          "typePlain": "class AdaptableUnaryFunction"
        },
        {
          "name": "",
          "type": "class Iterator",
          "typePlain": "class Iterator"
        }
      ],
      "title": "make_transform_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__iterator.html\">transform_iterator</a>< AdaptableUnaryFunction, Iterator >",
      "typePlain": "__host__ __device__ transform_iterator< AdaptableUnaryFunction, Iterator >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-transform-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-transform-output-iterator",
      "argsString": "(OutputIterator out, UnaryFunction fun)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "transform_output_iterator< UnaryFunction, OutputIterator > __host__ __device__ thrust::make_transform_output_iterator",
      "deleted": false,
      "details": "<code>make&#95;transform&#95;output&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__output__iterator.html\">transform&#95;output&#95;iterator</a></code> from an <code>OutputIterator</code> and <code>UnaryFunction</code>.",
      "explicit": false,
      "fullname": "thrust::make_transform_output_iterator",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 153,
        "bodyFile": "thrust/iterator/transform_output_iterator.h",
        "bodyStart": 150,
        "column": 1,
        "file": "thrust/iterator/transform_output_iterator.h",
        "line": 150
      },
      "name": "make_transform_output_iterator",
      "override": false,
      "paramList": [
        {
          "name": "out",
          "text": "The <code>OutputIterator</code> pointing to the output range of the newly created <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__output__iterator.html\">transform&#95;output&#95;iterator</a></code>"
        },
        {
          "name": "fun",
          "text": "The <code>UnaryFunction</code> transform the object before assigning it to <code>out</code> by the newly created <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__output__iterator.html\">transform&#95;output&#95;iterator</a></code>"
        }
      ],
      "params": [
        {
          "name": "out",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "fun",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_transform_output_iterator",
      "refid": "group__fancyiterator_1gad178702003ccdb45f10600a0c60cc297",
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__output__iterator.html\">transform_output_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "title": "make_transform_output_iterator",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1transform__output__iterator.html\">transform_output_iterator</a>< UnaryFunction, OutputIterator > __host__ __device__",
      "typePlain": "transform_output_iterator< UnaryFunction, OutputIterator > __host__ __device__",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-transform-output-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-zip-iterator",
      "argsString": "(thrust::tuple< Iterators... > t)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ zip_iterator< thrust::tuple< Iterators... > > thrust::make_zip_iterator",
      "deleted": false,
      "details": "<code>make&#95;zip&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip&#95;iterator</a></code> from a <code>tuple</code> of iterators.",
      "explicit": false,
      "fullname": "thrust::make_zip_iterator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/iterator/zip_iterator.h",
        "line": 233
      },
      "name": "make_zip_iterator",
      "override": false,
      "paramList": [
        {
          "name": "t",
          "text": "The <code>tuple</code> of iterators to copy. "
        }
      ],
      "params": [
        {
          "name": "t",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">thrust::tuple</a>< Iterators... >",
          "typePlain": "thrust::tuple< Iterators... >"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_zip_iterator",
      "refid": "group__fancyiterator_1gaf95142abd03fefd8aca9dea1c1b68719",
      "returns": [
        "A newly created <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip&#95;iterator</a></code> which zips the iterators encapsulated in <code>t</code>."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "Iterators",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "make_zip_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip_iterator</a>< <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">thrust::tuple</a>< Iterators... > >",
      "typePlain": "__host__ __device__ zip_iterator< thrust::tuple< Iterators... > >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-zip-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-zip-iterator",
      "argsString": "(Iterators... its)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ zip_iterator< thrust::tuple< Iterators... > > thrust::make_zip_iterator",
      "deleted": false,
      "details": "<code>make&#95;zip&#95;iterator</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip&#95;iterator</a></code> from iterators.",
      "explicit": false,
      "fullname": "thrust::make_zip_iterator",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/iterator/zip_iterator.h",
        "line": 246
      },
      "name": "make_zip_iterator",
      "override": false,
      "paramList": [
        {
          "name": "its",
          "text": "The iterators to copy. "
        }
      ],
      "params": [
        {
          "name": "its",
          "type": "Iterators...",
          "typePlain": "Iterators..."
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_zip_iterator",
      "refid": "group__fancyiterator_1ga1db12a3d0d3bb9af0bde424a90d8c04b",
      "returns": [
        "A newly created <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip&#95;iterator</a></code> which zips the iterators."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip_iterator</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "Iterators",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "make_zip_iterator",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__iterator.html\">zip_iterator</a>< <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">thrust::tuple</a>< Iterators... > >",
      "typePlain": "__host__ __device__ zip_iterator< thrust::tuple< Iterators... > >",
      "url": "{{ site.baseurl }}/api/groups/group__fancyiterator.html#function-make-zip-iterator",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-all-of",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::all_of",
      "deleted": false,
      "details": "<code>all&#95;of</code> determines whether all elements in a range satify a predicate. Specifically, <code>all&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::all_of(thrust::host, A, A + 2, thrust::identity<bool>()); // returns true\nthrust::all_of(thrust::host, A, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::all_of(thrust::host, A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::all_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 75
      },
      "name": "all_of",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::all_of",
      "refid": "group__logical_1ga084fd0d3e070824248ffadf46f5f7765",
      "returns": [
        "<code>true</code>, if all elements satisfy the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "any_of ",
        "none_of ",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "all_of",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__logical.html#function-all-of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-all-of",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::all_of",
      "deleted": false,
      "details": "<code>all&#95;of</code> determines whether all elements in a range satify a predicate. Specifically, <code>all&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::all_of(A, A + 2, thrust::identity<bool>()); // returns true\nthrust::all_of(A, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::all_of(A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::all_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 110
      },
      "name": "all_of",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::all_of",
      "refid": "group__logical_1gab2ec420fbc55976ebefecad00acb2b40",
      "returns": [
        "<code>true</code>, if all elements satisfy the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "any_of ",
        "none_of ",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "all_of",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__logical.html#function-all-of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-any-of",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::any_of",
      "deleted": false,
      "details": "<code>any&#95;of</code> determines whether any element in a range satifies a predicate. Specifically, <code>any&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for any iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::any_of(thrust::host, A, A + 2, thrust::identity<bool>()); // returns true\nthrust::any_of(thrust::host, A, A + 3, thrust::identity<bool>()); // returns true\n\nthrust::any_of(thrust::host, A + 2, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::any_of(thrust::host, A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::any_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 152
      },
      "name": "any_of",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::any_of",
      "refid": "group__logical_1ga37bb33079f2becfcda2f0d6cad4d3efc",
      "returns": [
        "<code>true</code>, if any element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "all_of ",
        "none_of ",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "any_of",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__logical.html#function-any-of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-any-of",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::any_of",
      "deleted": false,
      "details": "<code>any&#95;of</code> determines whether any element in a range satifies a predicate. Specifically, <code>any&#95;of</code> returns <code>true</code> if <code>pred(&#42;i)</code> is <code>true</code> for any iterator <code>i</code> in the range <code>[first, last)</code> and <code>false</code> otherwise.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::any_of(A, A + 2, thrust::identity<bool>()); // returns true\nthrust::any_of(A, A + 3, thrust::identity<bool>()); // returns true\n\nthrust::any_of(A + 2, A + 3, thrust::identity<bool>()); // returns false\n\n// empty range\nthrust::any_of(A, A, thrust::identity<bool>()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::any_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 188
      },
      "name": "any_of",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::any_of",
      "refid": "group__logical_1ga55fa5c5afc62720119dc1d244fc40d5b",
      "returns": [
        "<code>true</code>, if any element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "all_of ",
        "none_of ",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "any_of",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__logical.html#function-any-of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-none-of",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::none_of",
      "deleted": false,
      "details": "<code>none&#95;of</code> determines whether no element in a range satifies a predicate. Specifically, <code>none&#95;of</code> returns <code>true</code> if there is no iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code>, and <code>false</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::none_of(thrust::host, A, A + 2, thrust::identity<bool>()); // returns false\nthrust::none_of(thrust::host, A, A + 3, thrust::identity<bool>()); // returns false\n\nthrust::none_of(thrust::host, A + 2, A + 3, thrust::identity<bool>()); // returns true\n\n// empty range\nthrust::none_of(thrust::host, A, A, thrust::identity<bool>()); // returns true\n```",
      "explicit": false,
      "fullname": "thrust::none_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 230
      },
      "name": "none_of",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::none_of",
      "refid": "group__logical_1ga0597bc81880a6f8e1050da853f1000c1",
      "returns": [
        "<code>true</code>, if no element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "all_of ",
        "any_of ",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "none_of",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__logical.html#function-none-of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-none-of",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::none_of",
      "deleted": false,
      "details": "<code>none&#95;of</code> determines whether no element in a range satifies a predicate. Specifically, <code>none&#95;of</code> returns <code>true</code> if there is no iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;i)</code> is <code>true</code>, and <code>false</code> otherwise.\n\n\n\n```cpp\n#include <thrust/logical.h>\n#include <thrust/functional.h>\n...\nbool A[3] = {true, true, false};\n\nthrust::none_of(A, A + 2, thrust::identity<bool>()); // returns false\nthrust::none_of(A, A + 3, thrust::identity<bool>()); // returns false\n\nthrust::none_of(A + 2, A + 3, thrust::identity<bool>()); // returns true\n\n// empty range\nthrust::none_of(A, A, thrust::identity<bool>()); // returns true\n```",
      "explicit": false,
      "fullname": "thrust::none_of",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/logical.h",
        "line": 266
      },
      "name": "none_of",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate used to test range elements. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::none_of",
      "refid": "group__logical_1gab2296f35374d339646d94a8d560aebf3",
      "returns": [
        "<code>true</code>, if no element satisfies the predicate; <code>false</code>, otherwise."
      ],
      "see": [
        "all_of ",
        "any_of ",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "none_of",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__logical.html#function-none-of",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-malloc",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &system, std::size_t n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ pointer< void, DerivedPolicy > thrust::malloc",
      "deleted": false,
      "details": "This version of <code>malloc</code> allocates untyped uninitialized storage associated with a given system.\n\n\nThe following code snippet demonstrates how to use <code>malloc</code> to allocate a range of memory associated with Thrust's device system.\n\n\n\n```cpp\n#include <thrust/memory.h>\n...\n// allocate some memory with thrust::malloc\nconst int N = 100;\nthrust::device_system_tag device_sys;\nthrust::pointer<void,thrust::device_space_tag> void_ptr = thrust::malloc(device_sys, N);\n\n// manipulate memory\n...\n\n// deallocate void_ptr with thrust::free\nthrust::free(device_sys, void_ptr);\n```",
      "explicit": false,
      "fullname": "thrust::malloc",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/memory.h",
        "line": 174
      },
      "name": "malloc",
      "override": false,
      "paramList": [
        {
          "name": "system",
          "text": "The Thrust system with which to associate the storage. "
        },
        {
          "name": "n",
          "text": "The number of bytes of storage to allocate. "
        }
      ],
      "params": [
        {
          "name": "system",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "n",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pre": [
        "<code>DerivedPolicy</code> must be publically derived from <code>thrust::execution&#95;policy&lt;DerivedPolicy&gt;</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::malloc",
      "refid": "group__memory__management_1gae731a1c6f3ad8b988e9d02dbc7cb3d9d",
      "returns": [
        "If allocation succeeds, a pointer to the allocated storage; a null pointer otherwise. The pointer must be deallocated with <code>thrust::free</code>."
      ],
      "see": [
        "free ",
        "device_malloc "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy."
        }
      ],
      "title": "malloc",
      "type": "__host__ __device__ pointer< void, DerivedPolicy >",
      "typePlain": "__host__ __device__ pointer< void, DerivedPolicy >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-malloc",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-malloc",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &system, std::size_t n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ pointer< T, DerivedPolicy > thrust::malloc",
      "deleted": false,
      "details": "This version of <code>malloc</code> allocates typed uninitialized storage associated with a given system.\n\n\nThe following code snippet demonstrates how to use <code>malloc</code> to allocate a range of memory to accomodate integers associated with Thrust's device system.\n\n\n\n```cpp\n#include <thrust/memory.h>\n...\n// allocate storage for 100 ints with thrust::malloc\nconst int N = 100;\nthrust::device_system_tag device_sys;\nthrust::pointer<int,thrust::device_system_tag> ptr = thrust::malloc<int>(device_sys, N);\n\n// manipulate memory\n...\n\n// deallocate ptr with thrust::free\nthrust::free(device_sys, ptr);\n```",
      "explicit": false,
      "fullname": "thrust::malloc",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "thrust/memory.h",
        "line": 212
      },
      "name": "malloc",
      "override": false,
      "paramList": [
        {
          "name": "system",
          "text": "The Thrust system with which to associate the storage. "
        },
        {
          "name": "n",
          "text": "The number of elements of type <code>T</code> which the storage should accomodate. "
        }
      ],
      "params": [
        {
          "name": "system",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "n",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "pre": [
        "<code>DerivedPolicy</code> must be publically derived from <code>thrust::execution&#95;policy&lt;DerivedPolicy&gt;</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::malloc",
      "refid": "group__memory__management_1gaa135825209301f8c9cac04dd7f10cb69",
      "returns": [
        "If allocation succeeds, a pointer to an allocation large enough to accomodate <code>n</code> elements of type <code>T</code>; a null pointer otherwise. The pointer must be deallocated with <code>thrust::free</code>."
      ],
      "see": [
        "free ",
        "device_malloc "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy."
        }
      ],
      "title": "malloc",
      "type": "__host__ __device__ pointer< T, DerivedPolicy >",
      "typePlain": "__host__ __device__ pointer< T, DerivedPolicy >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-malloc",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-get-temporary-buffer",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &system, typename thrust::pointer< T, DerivedPolicy >::difference_type n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< thrust::pointer< T, DerivedPolicy >, typename thrust::pointer< T, DerivedPolicy >::difference_type > thrust::get_temporary_buffer",
      "deleted": false,
      "details": "<code>get&#95;temporary&#95;buffer</code> returns a pointer to storage associated with a given Thrust system sufficient to store up to <code>n</code> objects of type <code>T</code>. If not enough storage is available to accomodate <code>n</code> objects, an implementation may return a smaller buffer. The number of objects the returned buffer can accomodate is also returned.\n\nThrust uses <code>get&#95;temporary&#95;buffer</code> internally when allocating temporary storage required by algorithm implementations.\n\nThe storage allocated with <code>get&#95;temporary&#95;buffer</code> must be returned to the system with <code>return&#95;temporary&#95;buffer</code>.\n\n\nThe following code snippet demonstrates how to use <code>get&#95;temporary&#95;buffer</code> to allocate a range of memory to accomodate integers associated with Thrust's device system.\n\n\n\n```cpp\n#include <thrust/memory.h>\n...\n// allocate storage for 100 ints with thrust::get_temporary_buffer\nconst int N = 100;\n\ntypedef thrust::pair<\n  thrust::pointer<int,thrust::device_system_tag>,\n  std::ptrdiff_t\n> ptr_and_size_t;\n\nthrust::device_system_tag device_sys;\nptr_and_size_t ptr_and_size = thrust::get_temporary_buffer<int>(device_sys, N);\n\n// manipulate up to 100 ints\nfor(int i = 0; i < ptr_and_size.second; ++i)\n{\n  *ptr_and_size.first = i;\n}\n\n// deallocate storage with thrust::return_temporary_buffer\nthrust::return_temporary_buffer(device_sys, ptr_and_size.first);\n```",
      "explicit": false,
      "fullname": "thrust::get_temporary_buffer",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/memory.h",
        "line": 266
      },
      "name": "get_temporary_buffer",
      "override": false,
      "paramList": [
        {
          "name": "system",
          "text": "The Thrust system with which to associate the storage. "
        },
        {
          "name": "n",
          "text": "The requested number of objects of type <code>T</code> the storage should accomodate. "
        }
      ],
      "params": [
        {
          "name": "system",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "n",
          "type": "typename thrust::pointer< T, DerivedPolicy >::difference_type",
          "typePlain": "typename thrust::pointer< T, DerivedPolicy >::difference_type"
        }
      ],
      "pre": [
        "<code>DerivedPolicy</code> must be publically derived from <code>thrust::execution&#95;policy&lt;DerivedPolicy&gt;</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::get_temporary_buffer",
      "refid": "group__memory__management_1gaca901269ad9f7edf372b72372614b76b",
      "returns": [
        "A pair <code>p</code> such that <code>p.first</code> is a pointer to the allocated storage and <code>p.second</code> is the number of contiguous objects of type <code>T</code> that the storage can accomodate. If no storage can be allocated, <code>p.first</code> if no storage can be obtained. The storage must be returned to the system using <code>return&#95;temporary&#95;buffer</code>."
      ],
      "see": [
        "malloc ",
        "return_temporary_buffer "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy."
        }
      ],
      "title": "get_temporary_buffer",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< thrust::pointer< T, DerivedPolicy >, typename thrust::pointer< T, DerivedPolicy >::difference_type >",
      "typePlain": "__host__ __device__ thrust::pair< thrust::pointer< T, DerivedPolicy >, typename thrust::pointer< T, DerivedPolicy >::difference_type >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-get-temporary-buffer",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-free",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &system, Pointer ptr)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::free",
      "deleted": false,
      "details": "<code>free</code> deallocates the storage previously allocated by <code>thrust::malloc</code>.\n\n\nThe following code snippet demonstrates how to use <code>free</code> to deallocate a range of memory previously allocated with <code>thrust::malloc</code>.\n\n\n\n```cpp\n#include <thrust/memory.h>\n...\n// allocate storage for 100 ints with thrust::malloc\nconst int N = 100;\nthrust::device_system_tag device_sys;\nthrust::pointer<int,thrust::device_system_tag> ptr = thrust::malloc<int>(device_sys, N);\n\n// mainpulate memory\n...\n\n// deallocate ptr with thrust::free\nthrust::free(device_sys, ptr);\n```",
      "explicit": false,
      "fullname": "thrust::free",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/memory.h",
        "line": 298
      },
      "name": "free",
      "override": false,
      "paramList": [
        {
          "name": "system",
          "text": "The Thrust system with which the storage is associated. "
        },
        {
          "name": "ptr",
          "text": "A pointer previously returned by <code>thrust::malloc</code>. If <code>ptr</code> is null, <code>free</code> does nothing."
        }
      ],
      "params": [
        {
          "name": "system",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "ptr",
          "type": "Pointer",
          "typePlain": "Pointer"
        }
      ],
      "pre": [
        "<code>ptr</code> shall have been returned by a previous call to <code>thrust::malloc(system, n)</code> or <code>thrust::malloc&lt;T&gt;(system, n)</code> for some type <code>T</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::free",
      "refid": "group__memory__management_1ga65f74f777939ffdc62572853eee2c7ae",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename Pointer",
          "typePlain": "typename Pointer"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy."
        }
      ],
      "title": "free",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-free",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-return-temporary-buffer",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &system, Pointer p, std::ptrdiff_t n)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::return_temporary_buffer",
      "deleted": false,
      "details": "<code>return&#95;temporary&#95;buffer</code> deallocates storage associated with a given Thrust system previously allocated by <code>get&#95;temporary&#95;buffer</code>.\n\nThrust uses <code>return&#95;temporary&#95;buffer</code> internally when deallocating temporary storage required by algorithm implementations.\n\n\nThe following code snippet demonstrates how to use <code>return&#95;temporary&#95;buffer</code> to deallocate a range of memory previously allocated by <code>get&#95;temporary&#95;buffer</code>.\n\n\n\n```cpp\n#include <thrust/memory.h>\n...\n// allocate storage for 100 ints with thrust::get_temporary_buffer\nconst int N = 100;\n\ntypedef thrust::pair<\n  thrust::pointer<int,thrust::device_system_tag>,\n  std::ptrdiff_t\n> ptr_and_size_t;\n\nthrust::device_system_tag device_sys;\nptr_and_size_t ptr_and_size = thrust::get_temporary_buffer<int>(device_sys, N);\n\n// manipulate up to 100 ints\nfor(int i = 0; i < ptr_and_size.second; ++i)\n{\n  *ptr_and_size.first = i;\n}\n\n// deallocate storage with thrust::return_temporary_buffer\nthrust::return_temporary_buffer(device_sys, ptr_and_size.first);\n```",
      "explicit": false,
      "fullname": "thrust::return_temporary_buffer",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/memory.h",
        "line": 344
      },
      "name": "return_temporary_buffer",
      "override": false,
      "paramList": [
        {
          "name": "system",
          "text": "The Thrust system with which the storage is associated. "
        },
        {
          "name": "p",
          "text": "A pointer previously returned by <code>thrust::get&#95;temporary&#95;buffer</code>. If <code>ptr</code> is null, <code>return&#95;temporary&#95;buffer</code> does nothing."
        }
      ],
      "params": [
        {
          "name": "system",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "p",
          "type": "Pointer",
          "typePlain": "Pointer"
        },
        {
          "name": "n",
          "type": "std::ptrdiff_t",
          "typePlain": "std::ptrdiff_t"
        }
      ],
      "pre": [
        "<code>p</code> shall have been previously allocated by <code>thrust::get&#95;temporary&#95;buffer</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::return_temporary_buffer",
      "refid": "group__memory__management_1ga429af5322806389fbdcf4ed015c0aa47",
      "see": [
        "free ",
        "get_temporary_buffer "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename Pointer",
          "typePlain": "typename Pointer"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy."
        }
      ],
      "title": "return_temporary_buffer",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-return-temporary-buffer",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-raw-pointer-cast",
      "argsString": "(Pointer ptr)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::detail::pointer_traits< Pointer >::raw_pointer thrust::raw_pointer_cast",
      "deleted": false,
      "details": "<code>raw&#95;pointer&#95;cast</code> creates a \"raw\" pointer from a pointer-like type, simply returning the wrapped pointer, should it exist.",
      "explicit": false,
      "fullname": "thrust::raw_pointer_cast",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/memory.h",
        "line": 357
      },
      "name": "raw_pointer_cast",
      "override": false,
      "paramList": [
        {
          "name": "ptr",
          "text": "The pointer of interest. "
        }
      ],
      "params": [
        {
          "name": "ptr",
          "type": "Pointer",
          "typePlain": "Pointer"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::raw_pointer_cast",
      "refid": "group__memory__management_1ga50817a8bb87268a666f6319ee3c93d98",
      "returns": [
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__tuple.html#function-get\">ptr.get()</a></code>, if the expression is well formed; <code>ptr</code>, otherwise. "
      ],
      "see": [
        "raw_reference_cast "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename Pointer",
          "typePlain": "typename Pointer"
        }
      ],
      "title": "raw_pointer_cast",
      "type": "__host__ __device__ thrust::detail::pointer_traits< Pointer >::raw_pointer",
      "typePlain": "__host__ __device__ thrust::detail::pointer_traits< Pointer >::raw_pointer",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-raw-pointer-cast",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-raw-reference-cast",
      "argsString": "(T &ref)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ detail::raw_reference< T >::type thrust::raw_reference_cast",
      "deleted": false,
      "details": "<code>raw&#95;reference&#95;cast</code> creates a \"raw\" reference from a wrapped reference type, simply returning the underlying reference, should it exist.\n\nIf the argument is not a reference wrapper, the result is a reference to the argument.",
      "explicit": false,
      "fullname": "thrust::raw_reference_cast",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/memory.h",
        "line": 374
      },
      "name": "raw_reference_cast",
      "note": [
        "There are two versions of <code>raw&#95;reference&#95;cast</code>. One for <code>const</code> references, and one for non-<code>const</code>. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "ref",
          "text": "The reference of interest. "
        }
      ],
      "params": [
        {
          "name": "ref",
          "type": "T &",
          "typePlain": "T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::raw_reference_cast",
      "refid": "group__memory__management_1ga5d2c05be46e3a5d383e1c1ce6b948c36",
      "returns": [
        "<code>&#42;thrust::raw&#95;pointer&#95;cast(&ref)</code>. "
      ],
      "see": [
        "raw_pointer_cast "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "raw_reference_cast",
      "type": "__host__ __device__ detail::raw_reference< T >::type",
      "typePlain": "__host__ __device__ detail::raw_reference< T >::type",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-raw-reference-cast",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-raw-reference-cast",
      "argsString": "(const T &ref)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ detail::raw_reference< constT >::type thrust::raw_reference_cast",
      "deleted": false,
      "details": "<code>raw&#95;reference&#95;cast</code> creates a \"raw\" reference from a wrapped reference type, simply returning the underlying reference, should it exist.\n\nIf the argument is not a reference wrapper, the result is a reference to the argument.",
      "explicit": false,
      "fullname": "thrust::raw_reference_cast",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/memory.h",
        "line": 391
      },
      "name": "raw_reference_cast",
      "note": [
        "There are two versions of <code>raw&#95;reference&#95;cast</code>. One for <code>const</code> references, and one for non-<code>const</code>. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "ref",
          "text": "The reference of interest. "
        }
      ],
      "params": [
        {
          "name": "ref",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::raw_reference_cast",
      "refid": "group__memory__management_1gae94e28c50b49ce2910ea8b0aea139f5c",
      "returns": [
        "<code>&#42;thrust::raw&#95;pointer&#95;cast(&ref)</code>. "
      ],
      "see": [
        "raw_pointer_cast "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "raw_reference_cast",
      "type": "__host__ __device__ detail::raw_reference< constT >::type",
      "typePlain": "__host__ __device__ detail::raw_reference< constT >::type",
      "url": "{{ site.baseurl }}/api/groups/group__memory__management.html#function-raw-reference-cast",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::merge",
      "deleted": false,
      "details": "<code>merge</code> combines two sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> into a single sorted range. That is, it copies from <code>[first1, last1)</code> and <code>[first2, last2)</code> into <code>[result, result + (last1 - first1) + (last2 - first2))</code> such that the resulting range is in ascending order. <code>merge</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in both input ranges the element from the first range precedes the element from the second. The return value is <code>result + (last1 - first1) + (last2 - first2)</code>.\n\nThis version of <code>merge</code> compares elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge</code> to compute the merger of two sorted sets of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/merge.h>\n#include <thrust/execution_policy.h>\n...\nint A1[6] = {1, 3, 5, 7, 9, 11};\nint A2[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint result[13];\n\nint *result_end =\n  thrust::merge(thrust::host,\n                A1, A1 + 6,\n                A2, A2 + 7,\n                result);\n// result = {1, 1, 1, 2, 3, 3, 5, 5, 7, 8, 9, 11, 13}\n```",
      "explicit": false,
      "fullname": "thrust::merge",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/merge.h",
        "line": 101
      },
      "name": "merge",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the merged output. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge",
      "refid": "group__merging_1gad0269cdfcd1048406ca429c06f42fef1",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/merge\">https://en.cppreference.com/w/cpp/algorithm/merge</a>",
        "<code>set&#95;union</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "merge",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::merge",
      "deleted": false,
      "details": "<code>merge</code> combines two sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> into a single sorted range. That is, it copies from <code>[first1, last1)</code> and <code>[first2, last2)</code> into <code>[result, result + (last1 - first1) + (last2 - first2))</code> such that the resulting range is in ascending order. <code>merge</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in both input ranges the element from the first range precedes the element from the second. The return value is <code>result + (last1 - first1) + (last2 - first2)</code>.\n\nThis version of <code>merge</code> compares elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge</code> to compute the merger of two sorted sets of integers.\n\n\n\n```cpp\n#include <thrust/merge.h>\n...\nint A1[6] = {1, 3, 5, 7, 9, 11};\nint A2[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint result[13];\n\nint *result_end = thrust::merge(A1, A1 + 6, A2, A2 + 7, result);\n// result = {1, 1, 1, 2, 3, 3, 5, 5, 7, 8, 9, 11, 13}\n```",
      "explicit": false,
      "fullname": "thrust::merge",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/merge.h",
        "line": 164
      },
      "name": "merge",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the merged output. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge",
      "refid": "group__merging_1ga3d2776685a00dca265399f411784acec",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/merge\">https://en.cppreference.com/w/cpp/algorithm/merge</a>",
        "<code>set&#95;union</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "merge",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::merge",
      "deleted": false,
      "details": "<code>merge</code> combines two sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> into a single sorted range. That is, it copies from <code>[first1, last1)</code> and <code>[first2, last2)</code> into <code>[result, result + (last1 - first1) + (last2 - first2))</code> such that the resulting range is in ascending order. <code>merge</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in both input ranges the element from the first range precedes the element from the second. The return value is <code>result + (last1 - first1) + (last2 - first2)</code>.\n\nThis version of <code>merge</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge</code> to compute the merger of two sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/merge.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A1[6] = {11, 9, 7, 5, 3, 1};\nint A2[7] = {13, 8, 5, 3, 2, 1, 1};\n\nint result[13];\n\nint *result_end = thrust::merge(thrust::host,\n                                A1, A1 + 6,\n                                A2, A2 + 7,\n                                result,\n                                thrust::greater<int>());\n// result = {13, 11, 9, 8, 7, 5, 5, 3, 3, 2, 1, 1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::merge",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/merge.h",
        "line": 237
      },
      "name": "merge",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the merged output. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge",
      "refid": "group__merging_1ga25a16faaaf07bb1b7b38d374475845c1",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/merge\">https://en.cppreference.com/w/cpp/algorithm/merge</a>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "merge",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::merge",
      "deleted": false,
      "details": "<code>merge</code> combines two sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> into a single sorted range. That is, it copies from <code>[first1, last1)</code> and <code>[first2, last2)</code> into <code>[result, result + (last1 - first1) + (last2 - first2))</code> such that the resulting range is in ascending order. <code>merge</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in both input ranges the element from the first range precedes the element from the second. The return value is <code>result + (last1 - first1) + (last2 - first2)</code>.\n\nThis version of <code>merge</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge</code> to compute the merger of two sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/merge.h>\n#include <thrust/functional.h>\n...\nint A1[6] = {11, 9, 7, 5, 3, 1};\nint A2[7] = {13, 8, 5, 3, 2, 1, 1};\n\nint result[13];\n\nint *result_end = thrust::merge(A1, A1 + 6, A2, A2 + 7, result, thrust::greater<int>());\n// result = {13, 11, 9, 8, 7, 5, 5, 3, 3, 2, 1, 1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::merge",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/merge.h",
        "line": 301
      },
      "name": "merge",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the merged output. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge",
      "refid": "group__merging_1gaae0c908dc70a47bfd2bfbda46fcc1d12",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/merge\">https://en.cppreference.com/w/cpp/algorithm/merge</a>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "merge",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::merge_by_key",
      "deleted": false,
      "details": "<code>merge&#95;by&#95;key</code> performs a key-value merge. That is, <code>merge&#95;by&#95;key</code> copies elements from <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> into a single range, <code>[keys&#95;result, keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending key order.\n\nAt the same time, <code>merge&#95;by&#95;key</code> copies elements from the two associated ranges <code>[values&#95;first1 + (keys&#95;last1 - keys&#95;first1))</code> and <code>[values&#95;first2 + (keys&#95;last2 - keys&#95;first2))</code> into a single range, <code>[values&#95;result, values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending order implied by each input element's associated key.\n\n<code>merge&#95;by&#95;key</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in all input key ranges the element from the first range precedes the element from the second.\n\nThe return value is is <code>(keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> and <code>(values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge&#95;by&#95;key</code> to compute the merger of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/merge.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {1, 3, 5, 7, 9, 11};\nint A_vals[6] = {0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {1, 1, 2, 3, 5, 8, 13};\nint B_vals[7] = {1, 1, 1, 1, 1, 1, 1};\n\nint keys_result[13];\nint vals_result[13];\n\nthrust::pair<int*,int*> end =\n  thrust::merge_by_key(thrust::host,\n                       A_keys, A_keys + 6,\n                       B_keys, B_keys + 7,\n                       A_vals, B_vals,\n                       keys_result, vals_result);\n\n// keys_result = {1, 1, 1, 2, 3, 3, 5, 5, 7, 8, 9, 11, 13}\n// vals_result = {0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0,  0,  1}\n```",
      "explicit": false,
      "fullname": "thrust::merge_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/merge.h",
        "line": 397
      },
      "name": "merge_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the merged output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the merged output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge_by_key",
      "refid": "group__merging_1ga2404e9fbef3a1fa7358a36e695bb6bd9",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "merge ",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "merge_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::merge_by_key",
      "deleted": false,
      "details": "<code>merge&#95;by&#95;key</code> performs a key-value merge. That is, <code>merge&#95;by&#95;key</code> copies elements from <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> into a single range, <code>[keys&#95;result, keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending key order.\n\nAt the same time, <code>merge&#95;by&#95;key</code> copies elements from the two associated ranges <code>[values&#95;first1 + (keys&#95;last1 - keys&#95;first1))</code> and <code>[values&#95;first2 + (keys&#95;last2 - keys&#95;first2))</code> into a single range, <code>[values&#95;result, values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending order implied by each input element's associated key.\n\n<code>merge&#95;by&#95;key</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in all input key ranges the element from the first range precedes the element from the second.\n\nThe return value is is <code>(keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> and <code>(values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge&#95;by&#95;key</code> to compute the merger of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/merge.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {1, 3, 5, 7, 9, 11};\nint A_vals[6] = {0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {1, 1, 2, 3, 5, 8, 13};\nint B_vals[7] = {1, 1, 1, 1, 1, 1, 1};\n\nint keys_result[13];\nint vals_result[13];\n\nthrust::pair<int*,int*> end = thrust::merge_by_key(A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, B_vals, keys_result, vals_result);\n\n// keys_result = {1, 1, 1, 2, 3, 3, 5, 5, 7, 8, 9, 11, 13}\n// vals_result = {0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0,  0,  1}\n```",
      "explicit": false,
      "fullname": "thrust::merge_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/merge.h",
        "line": 482
      },
      "name": "merge_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the merged output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the merged output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge_by_key",
      "refid": "group__merging_1ga01d8a43543df8007377221809f811779",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "merge ",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "merge_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::merge_by_key",
      "deleted": false,
      "details": "<code>merge&#95;by&#95;key</code> performs a key-value merge. That is, <code>merge&#95;by&#95;key</code> copies elements from <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> into a single range, <code>[keys&#95;result, keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending key order.\n\nAt the same time, <code>merge&#95;by&#95;key</code> copies elements from the two associated ranges <code>[values&#95;first1 + (keys&#95;last1 - keys&#95;first1))</code> and <code>[values&#95;first2 + (keys&#95;last2 - keys&#95;first2))</code> into a single range, <code>[values&#95;result, values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending order implied by each input element's associated key.\n\n<code>merge&#95;by&#95;key</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in all input key ranges the element from the first range precedes the element from the second.\n\nThe return value is is <code>(keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> and <code>(values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code>.\n\nThis version of <code>merge&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized using <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge&#95;by&#95;key</code> to compute the merger of two sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/merge.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {11, 9, 7, 5, 3, 1};\nint A_vals[6] = { 0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {13, 8, 5, 3, 2, 1, 1};\nint B_vals[7] = { 1, 1, 1, 1, 1, 1, 1};\n\nint keys_result[13];\nint vals_result[13];\n\nthrust::pair<int*,int*> end =\n  thrust::merge_by_key(thrust::host,\n                       A_keys, A_keys + 6,\n                       B_keys, B_keys + 7,\n                       A_vals, B_vals,\n                       keys_result, vals_result,\n                       thrust::greater<int>());\n\n// keys_result = {13, 11, 9, 8, 7, 5, 5, 3, 3, 2, 1, 1, 1}\n// vals_result = { 1,  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::merge_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/merge.h",
        "line": 578
      },
      "name": "merge_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the merged output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the merged output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge_by_key",
      "refid": "group__merging_1ga7223d16cc5ee97db6f35a082ae4d671c",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "merge ",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator1's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator1's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "merge_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-merge-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::merge_by_key",
      "deleted": false,
      "details": "<code>merge&#95;by&#95;key</code> performs a key-value merge. That is, <code>merge&#95;by&#95;key</code> copies elements from <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> into a single range, <code>[keys&#95;result, keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending key order.\n\nAt the same time, <code>merge&#95;by&#95;key</code> copies elements from the two associated ranges <code>[values&#95;first1 + (keys&#95;last1 - keys&#95;first1))</code> and <code>[values&#95;first2 + (keys&#95;last2 - keys&#95;first2))</code> into a single range, <code>[values&#95;result, values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> such that the resulting range is in ascending order implied by each input element's associated key.\n\n<code>merge&#95;by&#95;key</code> is stable, meaning both that the relative order of elements within each input range is preserved, and that for equivalent elements in all input key ranges the element from the first range precedes the element from the second.\n\nThe return value is is <code>(keys&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code> and <code>(values&#95;result + (keys&#95;last1 - keys&#95;first1) + (keys&#95;last2 - keys&#95;first2))</code>.\n\nThis version of <code>merge&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>merge&#95;by&#95;key</code> to compute the merger of two sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/merge.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {11, 9, 7, 5, 3, 1};\nint A_vals[6] = { 0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {13, 8, 5, 3, 2, 1, 1};\nint B_vals[7] = { 1, 1, 1, 1, 1, 1, 1};\n\nint keys_result[13];\nint vals_result[13];\n\nthrust::pair<int*,int*> end = thrust::merge_by_key(A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n\n// keys_result = {13, 11, 9, 8, 7, 5, 5, 3, 3, 2, 1, 1, 1}\n// vals_result = { 1,  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::merge_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/merge.h",
        "line": 664
      },
      "name": "merge_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the merged output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the merged output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::merge_by_key",
      "refid": "group__merging_1ga7ab71e9ed6abf8bf85fc500b7850cea0",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "merge ",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator1's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator1's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "merge_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__merging.html#function-merge-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 > thrust::mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>&#42;i == &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(thrust::device, vec1.begin(), vec1.end(), vec2.begin());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "thrust::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 89
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mismatch",
      "refid": "group__searching_1ga682ef0063983e09e0587a8c6122b9cb0",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "find ",
        "find_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is equality comparable to <code>InputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< InputIterator1, InputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< InputIterator1, InputIterator2 > thrust::mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>&#42;i == &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(vec1.begin(), vec1.end(), vec2.begin());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "thrust::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 139
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mismatch",
      "refid": "group__searching_1ga6aa2c3aa696e60b8e7d68d7d8eacb531",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "find ",
        "find_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is equality comparable to <code>InputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< InputIterator1, InputIterator2 >",
      "typePlain": "thrust::pair< InputIterator1, InputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 > thrust::mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>pred(&#42;i, &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(thrust::device, vec1.begin(), vec1.end(), vec2.begin(), thrust::equal_to<int>());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "thrust::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 195
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "pred",
          "text": "The binary predicate to compare elements. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mismatch",
      "refid": "group__searching_1ga34b87eb3d366133121ca90f3bda80538",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "find ",
        "find_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< InputIterator1, InputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< InputIterator1, InputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mismatch",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< InputIterator1, InputIterator2 > thrust::mismatch",
      "deleted": false,
      "details": "<code>mismatch</code> finds the first position where the two ranges <code>[first1, last1)</code> and <code>[first2, first2 + (last1 - first1))</code> differ. The two versions of <code>mismatch</code> use different tests for whether elements differ.\n\nThis version of <code>mismatch</code> finds the first iterator <code>i</code> in <code>[first1, last1)</code> such that <code>pred(&#42;i, &#42;(first2 + (i - first1))</code> is <code>false</code>. The return value is a <code>pair</code> whose first element is <code>i</code> and whose second element is <code>&#42;(first2 + (i - first1))</code>. If no such iterator <code>i</code> exists, the return value is a <code>pair</code> whose first element is <code>last1</code> and whose second element is <code>&#42;(first2 + (last1 - first1))</code>.\n\n\n\n```cpp\n#include <thrust/mismatch.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> vec1(4);\nthrust::device_vector<int> vec2(4);\n\nvec1[0] = 0;  vec2[0] = 0; \nvec1[1] = 5;  vec2[1] = 5;\nvec1[2] = 3;  vec2[2] = 8;\nvec1[3] = 7;  vec2[3] = 7;\n\ntypedef thrust::device_vector<int>::iterator Iterator;\nthrust::pair<Iterator,Iterator> result;\n\nresult = thrust::mismatch(vec1.begin(), vec1.end(), vec2.begin(), thrust::equal_to<int>());\n\n// result.first  is vec1.begin() + 2\n// result.second is vec2.begin() + 2\n```",
      "explicit": false,
      "fullname": "thrust::mismatch",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/mismatch.h",
        "line": 247
      },
      "name": "mismatch",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence. "
        },
        {
          "name": "pred",
          "text": "The binary predicate to compare elements. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::mismatch",
      "refid": "group__searching_1ga015dbb88bd1190ad9b98708b1c6c4669",
      "returns": [
        "The first position where the sequences differ."
      ],
      "see": [
        "find ",
        "find_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Input Iterator</a>."
        }
      ],
      "title": "mismatch",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< InputIterator1, InputIterator2 >",
      "typePlain": "thrust::pair< InputIterator1, InputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-mismatch",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const optional< T > &lhs, const optional< U > &rhs)",
      "brief": "\\group relop ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator==",
      "deleted": false,
      "details": "Compares two optional objects\n\nIf both optionals contain a value, they are compared with <code>T</code>s relational operators. Otherwise <code>lhs</code> and <code>rhs</code> are equal only if they are both empty, and <code>lhs</code> is less than <code>rhs</code> only if <code>rhs</code> is empty and <code>lhs</code> is not. ",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1767,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1763,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1763
      },
      "name": "operator==",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< U > &",
          "typePlain": "const optional< U > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "optional_8h_1ab71aafc2bfbd407be618bf9a61fc5349",
      "static": false,
      "strong": false,
      "summary": "\\group relop ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator==",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const optional< T > &lhs, const optional< U > &rhs)",
      "brief": "\\group relop ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator!=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1776,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1772,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1772
      },
      "name": "operator!=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< U > &",
          "typePlain": "const optional< U > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "optional_8h_1a850984a2acf6903a218cbb4a8a2658f5",
      "static": false,
      "strong": false,
      "summary": "\\group relop ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator!=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<",
      "argsString": "(const optional< T > &lhs, const optional< U > &rhs)",
      "brief": "\\group relop ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1784,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1781,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1781
      },
      "name": "operator<",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< U > &",
          "typePlain": "const optional< U > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<",
      "refid": "optional_8h_1ae107904a0c810c35b8d1e8246bb479e9",
      "static": false,
      "strong": false,
      "summary": "\\group relop ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator<",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>",
      "argsString": "(const optional< T > &lhs, const optional< U > &rhs)",
      "brief": "\\group relop ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1792,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1789,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1789
      },
      "name": "operator>",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< U > &",
          "typePlain": "const optional< U > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>",
      "refid": "optional_8h_1a70c0432b446a808c10e32851ca44bcc1",
      "static": false,
      "strong": false,
      "summary": "\\group relop ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator>",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<=",
      "argsString": "(const optional< T > &lhs, const optional< U > &rhs)",
      "brief": "\\group relop ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1800,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1797,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1797
      },
      "name": "operator<=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< U > &",
          "typePlain": "const optional< U > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<=",
      "refid": "optional_8h_1aca01cc65eee0df0ab5040e8309d0f27a",
      "static": false,
      "strong": false,
      "summary": "\\group relop ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator<=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>=",
      "argsString": "(const optional< T > &lhs, const optional< U > &rhs)",
      "brief": "\\group relop ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1808,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1805,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1805
      },
      "name": "operator>=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< U > &",
          "typePlain": "const optional< U > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>=",
      "refid": "optional_8h_1a54c26de70c03d196525f3cacf00b1263",
      "static": false,
      "strong": false,
      "summary": "\\group relop ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator>=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const optional< T > &lhs, nullopt_t) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator==",
      "deleted": false,
      "details": "Compares an optional to a <code>nullopt</code>\n\nEquivalent to comparing the optional to an empty optional ",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1818,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1816,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1816
      },
      "name": "operator==",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "optional_8h_1ac265710c236fba28906f6d3d20bc5400",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator==",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(nullopt_t, const optional< T > &rhs) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator==",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1825,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1823,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1823
      },
      "name": "operator==",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "optional_8h_1a0e5562ed513c84eb02d35155cb68ee6f",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator==",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const optional< T > &lhs, nullopt_t) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator!=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1832,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1830,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1830
      },
      "name": "operator!=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "optional_8h_1aa2f90767ed99f13415e583578d0630ca",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator!=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(nullopt_t, const optional< T > &rhs) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator!=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1839,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1837,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1837
      },
      "name": "operator!=",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "optional_8h_1a6dbb8d42767889d1784852f8c067d208",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator!=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<",
      "argsString": "(const optional< T > &, nullopt_t) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1846,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1844,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1844
      },
      "name": "operator<",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<",
      "refid": "optional_8h_1a74afb2316b15c8ea6e4c1f1237cfbf43",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator<",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<",
      "argsString": "(nullopt_t, const optional< T > &rhs) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1853,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1851,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1851
      },
      "name": "operator<",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<",
      "refid": "optional_8h_1ad18506f2099e68612853881adc81c306",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator<",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<=",
      "argsString": "(const optional< T > &lhs, nullopt_t) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1860,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1858,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1858
      },
      "name": "operator<=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<=",
      "refid": "optional_8h_1a60129c33a011bd51fa7da63b14e20fa7",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator<=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<=",
      "argsString": "(nullopt_t, const optional< T > &) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1867,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1865,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1865
      },
      "name": "operator<=",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        },
        {
          "name": "",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<=",
      "refid": "optional_8h_1a02f0d02fd2bb1a718c86f7b964450129",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator<=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>",
      "argsString": "(const optional< T > &lhs, nullopt_t) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1874,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1872,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1872
      },
      "name": "operator>",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>",
      "refid": "optional_8h_1a56ccca820606872a584a080437fe7e94",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator>",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>",
      "argsString": "(nullopt_t, const optional< T > &) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1881,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1879,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1879
      },
      "name": "operator>",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        },
        {
          "name": "",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>",
      "refid": "optional_8h_1aaba504371cf68d703d0dc745ad463ae2",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator>",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>=",
      "argsString": "(const optional< T > &, nullopt_t) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1888,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1886,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1886
      },
      "name": "operator>=",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>=",
      "refid": "optional_8h_1a2b084405836a9ffb777720dd88992323",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator>=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>=",
      "argsString": "(nullopt_t, const optional< T > &rhs) noexcept",
      "brief": "\\group relop_nullopt ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1895,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1893,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1893
      },
      "name": "operator>=",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1nullopt__t.html\">nullopt_t</a>",
          "typePlain": "nullopt_t"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>=",
      "refid": "optional_8h_1a3d1ff0b7f8de96ed5a304ed1f75fa37b",
      "static": false,
      "strong": false,
      "summary": "\\group relop_nullopt ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "operator>=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const optional< T > &lhs, const U &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator==",
      "deleted": false,
      "details": "Compares the optional with a value.\n\nIf the optional has a value, it is compared with the other value using <code>T</code>s relational operators. Otherwise, the optional is considered less than the value. ",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1907,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1905,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1905
      },
      "name": "operator==",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const U &",
          "typePlain": "const U &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "optional_8h_1ad1ee849591201af7504229958a53068a",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator==",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const U &lhs, const optional< T > &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator==",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1914,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1912,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1912
      },
      "name": "operator==",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const U &",
          "typePlain": "const U &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "optional_8h_1a6c6b78a0556a8b569c46b700f964587b",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator==",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const optional< T > &lhs, const U &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator!=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1921,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1919,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1919
      },
      "name": "operator!=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const U &",
          "typePlain": "const U &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "optional_8h_1a688152578a784a203dfdf34e24d29c28",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator!=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const U &lhs, const optional< T > &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator!=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1928,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1926,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1926
      },
      "name": "operator!=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const U &",
          "typePlain": "const U &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "optional_8h_1a275b7fb0a7792d50f67ebc0587eed0bb",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator!=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<",
      "argsString": "(const optional< T > &lhs, const U &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1935,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1933,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1933
      },
      "name": "operator<",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const U &",
          "typePlain": "const U &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<",
      "refid": "optional_8h_1a174c130e7d9950e15b8973f9c52f6909",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator<",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<",
      "argsString": "(const U &lhs, const optional< T > &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1942,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1940,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1940
      },
      "name": "operator<",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const U &",
          "typePlain": "const U &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<",
      "refid": "optional_8h_1a2d8548221005fe403bbf48261229f803",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator<",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<=",
      "argsString": "(const optional< T > &lhs, const U &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1949,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1947,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1947
      },
      "name": "operator<=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const U &",
          "typePlain": "const U &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<=",
      "refid": "optional_8h_1af429a9335f19fba47ee114771f748d07",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator<=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<=",
      "argsString": "(const U &lhs, const optional< T > &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator<=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator<=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1956,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1954,
        "column": 18,
        "file": "thrust/optional.h",
        "line": 1954
      },
      "name": "operator<=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const U &",
          "typePlain": "const U &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<=",
      "refid": "optional_8h_1a6ae65f704e76e50d80099218040c784d",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator<=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator<=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>",
      "argsString": "(const optional< T > &lhs, const U &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1963,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1961,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1961
      },
      "name": "operator>",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const U &",
          "typePlain": "const U &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>",
      "refid": "optional_8h_1a821b5e35c9964895b7a219be07573b0c",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator>",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>",
      "argsString": "(const U &lhs, const optional< T > &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1970,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1968,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1968
      },
      "name": "operator>",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const U &",
          "typePlain": "const U &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>",
      "refid": "optional_8h_1a1f02233273a0baaa4ad9aa079f38233b",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator>",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>=",
      "argsString": "(const optional< T > &lhs, const U &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1977,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1975,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1975
      },
      "name": "operator>=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        },
        {
          "name": "rhs",
          "type": "const U &",
          "typePlain": "const U &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>=",
      "refid": "optional_8h_1a7732ac787a728b80a75b85a759d47e05",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator>=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>=",
      "argsString": "(const U &lhs, const optional< T > &rhs)",
      "brief": "\\group relop_t ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool thrust::operator>=",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::operator>=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1984,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1982,
        "column": 23,
        "file": "thrust/optional.h",
        "line": 1982
      },
      "name": "operator>=",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "const U &",
          "typePlain": "const U &"
        },
        {
          "name": "rhs",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "const optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>=",
      "refid": "optional_8h_1a83f67b2f03cf6f5fbef2c1388aadecd0",
      "static": false,
      "strong": false,
      "summary": "\\group relop_t ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        }
      ],
      "title": "operator>=",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr bool",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-operator>=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap",
      "argsString": "(optional< T > &lhs, optional< T > &rhs) noexcept(noexcept(lhs.swap(rhs)))",
      "brief": "\\synopsis template <class T>\\nvoid swap(optional<T> &lhs, optional<T> &rhs); ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ void thrust::swap",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::swap",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 1995,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 1992,
        "column": 6,
        "file": "thrust/optional.h",
        "line": 1992
      },
      "name": "swap",
      "override": false,
      "params": [
        {
          "name": "lhs",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "optional< T > &"
        },
        {
          "name": "rhs",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T > &",
          "typePlain": "optional< T > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap",
      "refid": "optional_8h_1a9aacbf2cf96a66c476af67b8a7afcf5a",
      "static": false,
      "strong": false,
      "summary": "\\synopsis template <class T>\\nvoid swap(optional<T> &lhs, optional<T> &rhs); ",
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "defval": "nullptr",
          "defvalPlain": "nullptr",
          "name": "",
          "type": "detail::enable_if_t< std::is_move_constructible< T >::value > *",
          "typePlain": "detail::enable_if_t< std::is_move_constructible< T >::value > *"
        },
        {
          "defval": "nullptr",
          "defvalPlain": "nullptr",
          "name": "",
          "type": "detail::enable_if_t< detail::is_swappable< T >::value > *",
          "typePlain": "detail::enable_if_t< detail::is_swappable< T >::value > *"
        }
      ],
      "title": "swap",
      "type": "__thrust_exec_check_disable__ __host__ __device__ void",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ void",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-swap",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-optional",
      "argsString": "(U &&v)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr optional< Ret > thrust::make_optional",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::make_optional",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 2009,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 2007,
        "column": 27,
        "file": "thrust/optional.h",
        "line": 2007
      },
      "name": "make_optional",
      "override": false,
      "params": [
        {
          "name": "v",
          "type": "U &&",
          "typePlain": "U &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_optional",
      "refid": "optional_8h_1af3cb586773c76b3422ef1bb26c19355d",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "defval": "detail::i_am_secret",
          "defvalPlain": "detail::i_am_secret",
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        },
        {
          "defval": "detail::conditional_t<std::is_same<T, detail::i_am_secret>::value,                                    detail::decay_t<U>, T>",
          "defvalPlain": "detail::conditional_t<std::is_same<T, detail::i_am_secret>::value,                                    detail::decay_t<U>, T>",
          "name": "",
          "type": "class Ret",
          "typePlain": "class Ret"
        }
      ],
      "title": "make_optional",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< Ret >",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr optional< Ret >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-make-optional",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-optional",
      "argsString": "(Args &&... args)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr optional< T > thrust::make_optional",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::make_optional",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 2016,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 2014,
        "column": 27,
        "file": "thrust/optional.h",
        "line": 2014
      },
      "name": "make_optional",
      "override": false,
      "params": [
        {
          "name": "args",
          "type": "Args &&...",
          "typePlain": "Args &&..."
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_optional",
      "refid": "optional_8h_1a4506c51c0dc741747efb9702d711cbb3",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "Args",
          "type": "class...",
          "typePlain": "class..."
        }
      ],
      "title": "make_optional",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T >",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr optional< T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-make-optional",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-optional",
      "argsString": "(std::initializer_list< U > il, Args &&... args)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__thrust_exec_check_disable__ __host__ __device__ constexpr optional< T > thrust::make_optional",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::make_optional",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 2023,
        "bodyFile": "thrust/optional.h",
        "bodyStart": 2020,
        "column": 27,
        "file": "thrust/optional.h",
        "line": 2020
      },
      "name": "make_optional",
      "override": false,
      "params": [
        {
          "name": "il",
          "type": "std::initializer_list< U >",
          "typePlain": "std::initializer_list< U >"
        },
        {
          "name": "args",
          "type": "Args &&...",
          "typePlain": "Args &&..."
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_optional",
      "refid": "optional_8h_1a52d49a86a8bd5535016506ab7e017310",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        },
        {
          "name": "",
          "type": "class U",
          "typePlain": "class U"
        },
        {
          "name": "Args",
          "type": "class...",
          "typePlain": "class..."
        }
      ],
      "title": "make_optional",
      "type": "__thrust_exec_check_disable__ __host__ __device__ constexpr <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1optional.html\">optional</a>< T >",
      "typePlain": "__thrust_exec_check_disable__ __host__ __device__ constexpr optional< T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-make-optional",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-optional",
      "argsString": "(T) -> optional< T >",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::optional",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::optional",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 13,
        "file": "thrust/optional.h",
        "line": 2026
      },
      "name": "optional",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::optional",
      "refid": "optional_8h_1a3fc67e5fe2ce6d08821033abfd8d0018",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class T",
          "typePlain": "class T"
        }
      ],
      "title": "optional",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-optional",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator==",
      "argsString": "(const pair< T1, T2 > &x, const pair< T1, T2 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator==",
      "deleted": false,
      "details": "This operator tests two <code>pairs</code> for equality.",
      "explicit": false,
      "fullname": "thrust::operator==",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 10,
        "file": "thrust/pair.h",
        "line": 126
      },
      "name": "operator==",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>pair</code> to compare. "
        },
        {
          "name": "y",
          "text": "The second <code>pair</code> to compare. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator==",
      "refid": "group__pair_1gabf46c54f860c9e666f1eef126350ffb4",
      "returns": [
        "<code>true</code> if and only if <code>x.first == y.first && x.second == y.second</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "templateParamsList": [
        {
          "name": "T1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "T2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        }
      ],
      "title": "operator==",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-operator==",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<",
      "argsString": "(const pair< T1, T2 > &x, const pair< T1, T2 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator<",
      "deleted": false,
      "details": "This operator tests two pairs for ascending ordering.",
      "explicit": false,
      "fullname": "thrust::operator<",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/pair.h",
        "line": 140
      },
      "name": "operator<",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>pair</code> to compare. "
        },
        {
          "name": "y",
          "text": "The second <code>pair</code> to compare. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<",
      "refid": "group__pair_1ga447a8857c41150d99d8a13e1d61d838a",
      "returns": [
        "<code>true</code> if and only if <code>x.first &lt; y.first || (!(y.first &lt; x.first) && x.second &lt; y.second)</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "templateParamsList": [
        {
          "name": "T1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        },
        {
          "name": "T2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        }
      ],
      "title": "operator<",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-operator<",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator!=",
      "argsString": "(const pair< T1, T2 > &x, const pair< T1, T2 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator!=",
      "deleted": false,
      "details": "This operator tests two pairs for inequality.",
      "explicit": false,
      "fullname": "thrust::operator!=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 10,
        "file": "thrust/pair.h",
        "line": 154
      },
      "name": "operator!=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>pair</code> to compare. "
        },
        {
          "name": "y",
          "text": "The second <code>pair</code> to compare. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator!=",
      "refid": "group__pair_1gaae5a30de74797657fe1a2ea2d305729a",
      "returns": [
        "<code>true</code> if and only if <code>!(x == y)</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "templateParamsList": [
        {
          "name": "T1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "T2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        }
      ],
      "title": "operator!=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-operator!=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>",
      "argsString": "(const pair< T1, T2 > &x, const pair< T1, T2 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator>",
      "deleted": false,
      "details": "This operator tests two pairs for descending ordering.",
      "explicit": false,
      "fullname": "thrust::operator>",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 10,
        "file": "thrust/pair.h",
        "line": 168
      },
      "name": "operator>",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>pair</code> to compare. "
        },
        {
          "name": "y",
          "text": "The second <code>pair</code> to compare. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>",
      "refid": "group__pair_1gacec28b73f3dfc963e2938439967068bc",
      "returns": [
        "<code>true</code> if and only if <code>y &lt; x</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "templateParamsList": [
        {
          "name": "T1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        },
        {
          "name": "T2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        }
      ],
      "title": "operator>",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-operator>",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator<=",
      "argsString": "(const pair< T1, T2 > &x, const pair< T1, T2 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator<=",
      "deleted": false,
      "details": "This operator tests two pairs for ascending ordering or equivalence.",
      "explicit": false,
      "fullname": "thrust::operator<=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/pair.h",
        "line": 182
      },
      "name": "operator<=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>pair</code> to compare. "
        },
        {
          "name": "y",
          "text": "The second <code>pair</code> to compare. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator<=",
      "refid": "group__pair_1gaf9187730f2927bb1887919a78e85587f",
      "returns": [
        "<code>true</code> if and only if <code>!(y &lt; x)</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "templateParamsList": [
        {
          "name": "T1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        },
        {
          "name": "T2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        }
      ],
      "title": "operator<=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-operator<=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator>=",
      "argsString": "(const pair< T1, T2 > &x, const pair< T1, T2 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::operator>=",
      "deleted": false,
      "details": "This operator tests two pairs for descending ordering or equivalence.",
      "explicit": false,
      "fullname": "thrust::operator>=",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 10,
        "file": "thrust/pair.h",
        "line": 196
      },
      "name": "operator>=",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>pair</code> to compare. "
        },
        {
          "name": "y",
          "text": "The second <code>pair</code> to compare. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        },
        {
          "name": "y",
          "type": "const <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "const pair< T1, T2 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::operator>=",
      "refid": "group__pair_1ga0bd91162a588cb4b86cd9e45ba77e918",
      "returns": [
        "<code>true</code> if and only if <code>!(x &lt; y)</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "templateParamsList": [
        {
          "name": "T1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        },
        {
          "name": "T2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>. "
        }
      ],
      "title": "operator>=",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-operator>=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap",
      "argsString": "(pair< T1, T2 > &x, pair< T1, T2 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::swap",
      "deleted": false,
      "details": "<code>swap</code> swaps the contents of two <code>pair</code>s.",
      "explicit": false,
      "fullname": "thrust::swap",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 10,
        "file": "thrust/pair.h",
        "line": 206
      },
      "name": "swap",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>pair</code> to swap. "
        },
        {
          "name": "y",
          "text": "The second <code>pair</code> to swap. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "pair< T1, T2 > &"
        },
        {
          "name": "y",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 > &",
          "typePlain": "pair< T1, T2 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap",
      "refid": "group__pair_1ga8b86ab5052f0acba4896937a91fc936a",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "title": "swap",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-swap",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-pair",
      "argsString": "(T1 x, T2 y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ pair< T1, T2 > thrust::make_pair",
      "deleted": false,
      "details": "This convenience function creates a <code>pair</code> from two objects.",
      "explicit": false,
      "fullname": "thrust::make_pair",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 10,
        "file": "thrust/pair.h",
        "line": 220
      },
      "name": "make_pair",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first object to copy from. "
        },
        {
          "name": "y",
          "text": "The second object to copy from. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "T1",
          "typePlain": "T1"
        },
        {
          "name": "y",
          "type": "T2",
          "typePlain": "T2"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_pair",
      "refid": "group__pair_1ga110e6c930d099c109042e54a4eb929a6",
      "returns": [
        "A newly-constructed <code>pair</code> copied from <code>a</code> and <code>b</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        }
      ],
      "templateParamsList": [
        {
          "name": "T1",
          "text": "There are no requirements on the type of <code>T1</code>. "
        },
        {
          "name": "T2",
          "text": "There are no requirements on the type of <code>T2</code>. "
        }
      ],
      "title": "make_pair",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>< T1, T2 >",
      "typePlain": "__host__ __device__ pair< T1, T2 >",
      "url": "{{ site.baseurl }}/api/groups/group__pair.html#function-make-pair",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::partition",
      "deleted": false,
      "details": "<code>partition</code> reorders the elements <code>[first, last)</code> based on the function object <code>pred</code>, such that all of the elements that satisfy <code>pred</code> precede the elements that fail to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first,middle)</code> and <code>false</code> for every iterator <code>i</code> in the range <code>[middle, last)</code>. The return value of <code>partition</code> is <code>middle</code>.\n\nNote that the relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition</code>, does guarantee to preserve the relative order.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>partition</code> to reorder a sequence so that even numbers precede odd numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::partition(thrust::host,\n                  A, A + N,\n                  is_even());\n// A is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 99
      },
      "name": "partition",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition",
      "refid": "group__partitioning_1gac5cdbb402c5473ca92e95bc73ecaf13c",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements which do not satisfy <code>pred</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partition\">https://en.cppreference.com/w/cpp/algorithm/partition</a>",
        "<code>stable&#95;partition</code>",
        "<code>partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition",
      "argsString": "(ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::partition",
      "deleted": false,
      "details": "<code>partition</code> reorders the elements <code>[first, last)</code> based on the function object <code>pred</code>, such that all of the elements that satisfy <code>pred</code> precede the elements that fail to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first,middle)</code> and <code>false</code> for every iterator <code>i</code> in the range <code>[middle, last)</code>. The return value of <code>partition</code> is <code>middle</code>.\n\nNote that the relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition</code>, does guarantee to preserve the relative order.\n\n\nThe following code snippet demonstrates how to use <code>partition</code> to reorder a sequence so that even numbers precede odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::partition(A, A + N,\n                   is_even());\n// A is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 157
      },
      "name": "partition",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition",
      "refid": "group__partitioning_1ga26eb205b71250a1d8a1f938c0f697c06",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements which do not satisfy <code>pred</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partition\">https://en.cppreference.com/w/cpp/algorithm/partition</a>",
        "<code>stable&#95;partition</code>",
        "<code>partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::partition",
      "deleted": false,
      "details": "<code>partition</code> reorders the elements <code>[first, last)</code> based on the function object <code>pred</code> applied to a stencil range <code>[stencil, stencil + (last - first))</code>, such that all of the elements whose corresponding stencil element satisfies <code>pred</code> precede all of the elements whose corresponding stencil element fails to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;stencil&#95;i)</code> is <code>true</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil,stencil + (middle - first))</code> and <code>false</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil + (middle - first), stencil + (last - first))</code>. The return value of <code>stable&#95;partition</code> is <code>middle</code>.\n\nNote that the relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition</code>, does guarantee to preserve the relative order.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>partition</code> to reorder a sequence so that even numbers precede odd numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint S[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::partition(thrust::host, A, A + N, S, is_even());\n// A is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n// S is unmodified\n```",
      "explicit": false,
      "fullname": "thrust::partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 228
      },
      "name": "partition",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[stencil, stencil + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition",
      "refid": "group__partitioning_1ga97b338cf36d6593d4327d577f1a7a8be",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements whose stencil elements do not satisfy <code>pred</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partition\">https://en.cppreference.com/w/cpp/algorithm/partition</a>",
        "<code>stable&#95;partition</code>",
        "<code>partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::partition",
      "deleted": false,
      "details": "<code>partition</code> reorders the elements <code>[first, last)</code> based on the function object <code>pred</code> applied to a stencil range <code>[stencil, stencil + (last - first))</code>, such that all of the elements whose corresponding stencil element satisfies <code>pred</code> precede all of the elements whose corresponding stencil element fails to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;stencil&#95;i)</code> is <code>true</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil,stencil + (middle - first))</code> and <code>false</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil + (middle - first), stencil + (last - first))</code>. The return value of <code>stable&#95;partition</code> is <code>middle</code>.\n\nNote that the relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition</code>, does guarantee to preserve the relative order.\n\n\nThe following code snippet demonstrates how to use <code>partition</code> to reorder a sequence so that even numbers precede odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint S[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::partition(A, A + N, S, is_even());\n// A is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n// S is unmodified\n```",
      "explicit": false,
      "fullname": "thrust::partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 294
      },
      "name": "partition",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The ranges <code>[first,last)</code> and <code>[stencil, stencil + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition",
      "refid": "group__partitioning_1ga73ee335b49c6ae3dcb019423e268a231",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements whose stencil elements do not satisfy <code>pred</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partition\">https://en.cppreference.com/w/cpp/algorithm/partition</a>",
        "<code>stable&#95;partition</code>",
        "<code>partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::partition_copy",
      "deleted": false,
      "details": "<code>partition&#95;copy</code> differs from <code>partition</code> only in that the reordered sequence is written to difference output sequences, rather than in place.\n\n<code>partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code>. All of the elements that satisfy <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements that fail to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>partition&#95;copy</code> to separate a sequence into two output sequences of even and odd numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::partition_copy(thrust::host, A, A + N, evens, odds, is_even());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 374
      },
      "name": "partition_copy",
      "note": [
        "The relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition&#95;copy</code>, does guarantee to preserve the relative order."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input range shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition_copy",
      "refid": "group__partitioning_1gae475b50225a3a722680a4f560e5864ff",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>stable&#95;partition&#95;copy</code>",
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_copy",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::partition_copy",
      "deleted": false,
      "details": "<code>partition&#95;copy</code> differs from <code>partition</code> only in that the reordered sequence is written to difference output sequences, rather than in place.\n\n<code>partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code>. All of the elements that satisfy <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements that fail to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\n\nThe following code snippet demonstrates how to use <code>partition&#95;copy</code> to separate a sequence into two output sequences of even and odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::partition_copy(A, A + N, evens, odds, is_even());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 449
      },
      "name": "partition_copy",
      "note": [
        "The relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition&#95;copy</code>, does guarantee to preserve the relative order."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input range shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition_copy",
      "refid": "group__partitioning_1ga16065e4555896cb66cb23d47b879554b",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>stable&#95;partition&#95;copy</code>",
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_copy",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::partition_copy",
      "deleted": false,
      "details": "<code>partition&#95;copy</code> differs from <code>partition</code> only in that the reordered sequence is written to difference output sequences, rather than in place.\n\n<code>partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code> which is applied to a range of stencil elements. All of the elements whose corresponding stencil element satisfies <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements whose stencil element fails to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>partition&#95;copy</code> to separate a sequence into two output sequences of even and odd numbers using the <code>thrust::host</code> execution policy for parallelization.\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint S[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::stable_partition_copy(thrust::host, A, A + N, S, evens, odds, thrust::identity<int>());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// S remains {0, 1, 0, 1, 0, 1, 0, 1, 0,  1}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 529
      },
      "name": "partition_copy",
      "note": [
        "The relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition&#95;copy</code>, does guarantee to preserve the relative order."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition_copy",
      "refid": "group__partitioning_1gac042d84ed5bf56c9129ca9e3d1a8ee9b",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>stable&#95;partition&#95;copy</code>",
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_copy",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition-copy",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::partition_copy",
      "deleted": false,
      "details": "<code>partition&#95;copy</code> differs from <code>partition</code> only in that the reordered sequence is written to difference output sequences, rather than in place.\n\n<code>partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code> which is applied to a range of stencil elements. All of the elements whose corresponding stencil element satisfies <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements whose stencil element fails to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\n\nThe following code snippet demonstrates how to use <code>partition&#95;copy</code> to separate a sequence into two output sequences of even and odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/functional.h>\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint S[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::stable_partition_copy(A, A + N, S, evens, odds, thrust::identity<int>());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// S remains {0, 1, 0, 1, 0, 1, 0, 1, 0,  1}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 603
      },
      "name": "partition_copy",
      "note": [
        "The relative order of elements in the two reordered sequences is not necessarily the same as it was in the original sequence. A different algorithm, <code>stable&#95;partition&#95;copy</code>, does guarantee to preserve the relative order."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition_copy",
      "refid": "group__partitioning_1ga56f0fc3974c15416330fe0cffb746527",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>stable&#95;partition&#95;copy</code>",
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_copy",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::stable_partition",
      "deleted": false,
      "details": "<code>stable&#95;partition</code> is much like <code>partition</code> : it reorders the elements in the range <code>[first, last)</code> based on the function object <code>pred</code>, such that all of the elements that satisfy <code>pred</code> precede all of the elements that fail to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first,middle)</code> and <code>false</code> for every iterator <code>i</code> in the range <code>[middle, last)</code>. The return value of <code>stable&#95;partition</code> is <code>middle</code>.\n\n<code>stable&#95;partition</code> differs from <code>partition</code> in that <code>stable&#95;partition</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, and <code>stencil&#95;x</code> and <code>stencil&#95;y</code> are the stencil elements in corresponding positions within <code>[stencil, stencil + (last - first))</code>, and <code>pred(stencil&#95;x) == pred(stencil&#95;y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition</code> that <code>x</code> precedes <code>y</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition</code> to reorder a sequence so that even numbers precede odd numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::stable_partition(thrust::host,\n                         A, A + N,\n                         is_even());\n// A is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 674
      },
      "name": "stable_partition",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition",
      "refid": "group__partitioning_1gaee5ac63d5c7eb5b6771f814c7aeca622",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements which do not satisfy pred."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_partition\">https://en.cppreference.com/w/cpp/algorithm/stable_partition</a>",
        "<code>partition</code>",
        "<code>stable&#95;partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition",
      "argsString": "(ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::stable_partition",
      "deleted": false,
      "details": "<code>stable&#95;partition</code> is much like <code>partition</code> : it reorders the elements in the range <code>[first, last)</code> based on the function object <code>pred</code>, such that all of the elements that satisfy <code>pred</code> precede all of the elements that fail to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first,middle)</code> and <code>false</code> for every iterator <code>i</code> in the range <code>[middle, last)</code>. The return value of <code>stable&#95;partition</code> is <code>middle</code>.\n\n<code>stable&#95;partition</code> differs from <code>partition</code> in that <code>stable&#95;partition</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, and <code>stencil&#95;x</code> and <code>stencil&#95;y</code> are the stencil elements in corresponding positions within <code>[stencil, stencil + (last - first))</code>, and <code>pred(stencil&#95;x) == pred(stencil&#95;y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition</code> that <code>x</code> precedes <code>y</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition</code> to reorder a sequence so that even numbers precede odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::stable_partition(A, A + N,\n                          is_even());\n// A is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 735
      },
      "name": "stable_partition",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition",
      "refid": "group__partitioning_1gaa462d317fb80b65e671a3690aa8be372",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements which do not satisfy pred."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_partition\">https://en.cppreference.com/w/cpp/algorithm/stable_partition</a>",
        "<code>partition</code>",
        "<code>stable&#95;partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::stable_partition",
      "deleted": false,
      "details": "<code>stable&#95;partition</code> is much like <code>partition:</code> it reorders the elements in the range <code>[first, last)</code> based on the function object <code>pred</code> applied to a stencil range <code>[stencil, stencil + (last - first))</code>, such that all of the elements whose corresponding stencil element satisfies <code>pred</code> precede all of the elements whose corresponding stencil element fails to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;stencil&#95;i)</code> is <code>true</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil,stencil + (middle - first))</code> and <code>false</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil + (middle - first), stencil + (last - first))</code>. The return value of <code>stable&#95;partition</code> is <code>middle</code>.\n\n<code>stable&#95;partition</code> differs from <code>partition</code> in that <code>stable&#95;partition</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, such that <code>pred(x) == pred(y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition</code> that <code>x</code> precedes <code>y</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition</code> to reorder a sequence so that even numbers precede odd numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint S[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::stable_partition(thrust::host, A, A + N, S, is_even());\n// A is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n// S is unmodified\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 808
      },
      "name": "stable_partition",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap with the range <code>[stencil, stencil + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition",
      "refid": "group__partitioning_1gacc3377878caab1ac1037daf718596fcb",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements whose stencil elements do not satisfy <code>pred</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_partition\">https://en.cppreference.com/w/cpp/algorithm/stable_partition</a>",
        "<code>partition</code>",
        "<code>stable&#95;partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::stable_partition",
      "deleted": false,
      "details": "<code>stable&#95;partition</code> is much like <code>partition:</code> it reorders the elements in the range <code>[first, last)</code> based on the function object <code>pred</code> applied to a stencil range <code>[stencil, stencil + (last - first))</code>, such that all of the elements whose corresponding stencil element satisfies <code>pred</code> precede all of the elements whose corresponding stencil element fails to satisfy it. The postcondition is that, for some iterator <code>middle</code> in the range <code>[first, last)</code>, <code>pred(&#42;stencil&#95;i)</code> is <code>true</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil,stencil + (middle - first))</code> and <code>false</code> for every iterator <code>stencil&#95;i</code> in the range <code>[stencil + (middle - first), stencil + (last - first))</code>. The return value of <code>stable&#95;partition</code> is <code>middle</code>.\n\n<code>stable&#95;partition</code> differs from <code>partition</code> in that <code>stable&#95;partition</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, such that <code>pred(x) == pred(y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition</code> that <code>x</code> precedes <code>y</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition</code> to reorder a sequence so that even numbers precede odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint S[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::stable_partition(A, A + N, S, is_even());\n// A is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n// S is unmodified\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 876
      },
      "name": "stable_partition",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap with the range <code>[stencil, stencil + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition",
      "refid": "group__partitioning_1ga12fbf51ebfc80fd049ed0cbde2dd8ff8",
      "returns": [
        "An iterator referring to the first element of the second partition, that is, the sequence of the elements whose stencil elements do not satisfy <code>pred</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_partition\">https://en.cppreference.com/w/cpp/algorithm/stable_partition</a>",
        "<code>partition</code>",
        "<code>stable&#95;partition&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::stable_partition_copy",
      "deleted": false,
      "details": "<code>stable&#95;partition&#95;copy</code> differs from <code>stable&#95;partition</code> only in that the reordered sequence is written to different output sequences, rather than in place.\n\n<code>stable&#95;partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code>. All of the elements that satisfy <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements that fail to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\n<code>stable&#95;partition&#95;copy</code> differs from <code>partition&#95;copy</code> in that <code>stable&#95;partition&#95;copy</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, such that <code>pred(x) == pred(y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition&#95;copy</code> that <code>x</code> precedes <code>y</code> in the output.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition&#95;copy</code> to reorder a sequence so that even numbers precede odd numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::stable_partition_copy(thrust::host, A, A + N, evens, odds, is_even());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 958
      },
      "name": "stable_partition_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition_copy",
      "refid": "group__partitioning_1ga3dfd70df0abf91f7bcef932b572a2ff4",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>partition&#95;copy</code>",
        "<code>stable&#95;partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition_copy",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::stable_partition_copy",
      "deleted": false,
      "details": "<code>stable&#95;partition&#95;copy</code> differs from <code>stable&#95;partition</code> only in that the reordered sequence is written to different output sequences, rather than in place.\n\n<code>stable&#95;partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code>. All of the elements that satisfy <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements that fail to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\n<code>stable&#95;partition&#95;copy</code> differs from <code>partition&#95;copy</code> in that <code>stable&#95;partition&#95;copy</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, such that <code>pred(x) == pred(y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition&#95;copy</code> that <code>x</code> precedes <code>y</code> in the output.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition&#95;copy</code> to reorder a sequence so that even numbers precede odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::stable_partition_copy(A, A + N, evens, odds, is_even());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 1035
      },
      "name": "stable_partition_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition_copy",
      "refid": "group__partitioning_1ga77e78917bca6dfe9deb999000f5dc3c6",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>partition&#95;copy</code>",
        "<code>stable&#95;partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition_copy",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::stable_partition_copy",
      "deleted": false,
      "details": "<code>stable&#95;partition&#95;copy</code> differs from <code>stable&#95;partition</code> only in that the reordered sequence is written to different output sequences, rather than in place.\n\n<code>stable&#95;partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code> which is applied to a range of stencil elements. All of the elements whose corresponding stencil element satisfies <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements whose stencil element fails to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\n<code>stable&#95;partition&#95;copy</code> differs from <code>partition&#95;copy</code> in that <code>stable&#95;partition&#95;copy</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, such that <code>pred(x) == pred(y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition&#95;copy</code> that <code>x</code> precedes <code>y</code> in the output.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition&#95;copy</code> to reorder a sequence so that even numbers precede odd numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint S[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::stable_partition_copy(thrust::host, A, A + N, S, evens, odds, thrust::identity<int>());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// S remains {0, 1, 0, 1, 0, 1, 0, 1, 0,  1}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 1116
      },
      "name": "stable_partition_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition_copy",
      "refid": "group__partitioning_1gaa416b78f534acfbb7152cca334150bbc",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>partition&#95;copy</code>",
        "<code>stable&#95;partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition_copy",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-partition-copy",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::stable_partition_copy",
      "deleted": false,
      "details": "<code>stable&#95;partition&#95;copy</code> differs from <code>stable&#95;partition</code> only in that the reordered sequence is written to different output sequences, rather than in place.\n\n<code>stable&#95;partition&#95;copy</code> copies the elements <code>[first, last)</code> based on the function object <code>pred</code> which is applied to a range of stencil elements. All of the elements whose corresponding stencil element satisfies <code>pred</code> are copied to the range beginning at <code>out&#95;true</code> and all the elements whose stencil element fails to satisfy it are copied to the range beginning at <code>out&#95;false</code>.\n\n<code>stable&#95;partition&#95;copy</code> differs from <code>partition&#95;copy</code> in that <code>stable&#95;partition&#95;copy</code> is guaranteed to preserve relative order. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code>, such that <code>pred(x) == pred(y)</code>, and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable&#95;partition&#95;copy</code> that <code>x</code> precedes <code>y</code> in the output.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;partition&#95;copy</code> to reorder a sequence so that even numbers precede odd numbers.\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/functional.h>\n...\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint S[] = {0, 1, 0, 1, 0, 1, 0, 1, 0,  1};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nint *evens = result;\nint *odds  = result + 5;\nthrust::stable_partition_copy(A, A + N, S, evens, odds, thrust::identity<int>());\n// A remains {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n// S remains {0, 1, 0, 1, 0, 1, 0, 1, 0,  1}\n// result is now {2, 4, 6, 8, 10, 1, 3, 5, 7, 9}\n// evens points to {2, 4, 6, 8, 10}\n// odds points to {1, 3, 5, 7, 9}\n```",
      "explicit": false,
      "fullname": "thrust::stable_partition_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/partition.h",
        "line": 1192
      },
      "name": "stable_partition_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the sequence to reorder. "
        },
        {
          "name": "last",
          "text": "One position past the last element of the sequence to reorder. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "out_true",
          "text": "The destination of the resulting sequence of elements which satisfy <code>pred</code>. "
        },
        {
          "name": "out_false",
          "text": "The destination of the resulting sequence of elements which fail to satisfy <code>pred</code>. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the sequence <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "out_true",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "out_false",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap with either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_partition_copy",
      "refid": "group__partitioning_1ga98b7bb5e36c237ae4931dd4d3ed19cd7",
      "returns": [
        "A <code>pair</code> p such that <code>p.first</code> is the end of the output range beginning at <code>out&#95;true</code> and <code>p.second</code> is the end of the output range beginning at <code>out&#95;false</code>."
      ],
      "see": [
        "<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf\">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2569.pdf</a>",
        "<code>partition&#95;copy</code>",
        "<code>stable&#95;partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1</code> and <code>OutputIterator2's</code><code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "stable_partition_copy",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__partitioning.html#function-stable-partition-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition-point",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::partition_point",
      "deleted": false,
      "details": "<code>partition&#95;point</code> returns an iterator pointing to the end of the true partition of a partitioned range. <code>partition&#95;point</code> requires the input range <code>[first,last)</code> to be a partition; that is, all elements which satisfy <code>pred</code> shall appear before those that do not.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint * B = thrust::partition_point(thrust::host, A, A + 10, is_even());\n// B - A is 5\n// [A, B) contains only even values\n```",
      "explicit": false,
      "fullname": "thrust::partition_point",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 1263
      },
      "name": "partition_point",
      "note": [
        "Though similar, <code>partition&#95;point</code> is not redundant with <code>find&#95;if&#95;not</code>. <code>partition&#95;point's</code> precondition provides an opportunity for a faster implemention."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall be partitioned by <code>pred</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition_point",
      "refid": "group__searching_1ga0955d3dd985587746b8437643d5ff14a",
      "returns": [
        "An iterator <code>mid</code> such that <code>all&#95;of(first, mid, pred)</code> and <code>none&#95;of(mid, last, pred)</code> are both true."
      ],
      "see": [
        "<code>partition</code>",
        "<code>find&#95;if&#95;not</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_point",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-partition-point",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-partition-point",
      "argsString": "(ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::partition_point",
      "deleted": false,
      "details": "<code>partition&#95;point</code> returns an iterator pointing to the end of the true partition of a partitioned range. <code>partition&#95;point</code> requires the input range <code>[first,last)</code> to be a partition; that is, all elements which satisfy <code>pred</code> shall appear before those that do not. \n\n```cpp\n#include <thrust/partition.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint * B = thrust::partition_point(A, A + 10, is_even());\n// B - A is 5\n// [A, B) contains only even values\n```",
      "explicit": false,
      "fullname": "thrust::partition_point",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/partition.h",
        "line": 1314
      },
      "name": "partition_point",
      "note": [
        "Though similar, <code>partition&#95;point</code> is not redundant with <code>find&#95;if&#95;not</code>. <code>partition&#95;point's</code> precondition provides an opportunity for a faster implemention."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall be partitioned by <code>pred</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::partition_point",
      "refid": "group__searching_1gacc1aa2e2a54dee829eab21c5bdabbc94",
      "returns": [
        "An iterator <code>mid</code> such that <code>all&#95;of(first, mid, pred)</code> and <code>none&#95;of(mid, last, pred)</code> are both true."
      ],
      "see": [
        "<code>partition</code>",
        "<code>find&#95;if&#95;not</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "partition_point",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__searching.html#function-partition-point",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-partitioned",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::is_partitioned",
      "deleted": false,
      "details": "<code>is&#95;partitioned</code> returns <code>true</code> if the given range is partitioned with respect to a predicate, and <code>false</code> otherwise.\n\nSpecifically, <code>is&#95;partitioned</code> returns <code>true</code> if <code>[first, last)</code> is empty of if <code>[first, last)</code> is partitioned by <code>pred</code>, i.e. if all elements that satisfy <code>pred</code> appear before those that do not.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/partition.h>\n#include <thrust/execution_policy.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint B[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\nthrust::is_partitioned(thrust::host, A, A + 10, is_even()); // returns true\nthrust::is_partitioned(thrust::host, B, B + 10, is_even()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::is_partitioned",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/partition.h",
        "line": 1376
      },
      "name": "is_partitioned",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_partitioned",
      "refid": "group__predicates_1ga7ede920c19e66387200c182e5f379520",
      "returns": [
        "<code>true</code> if the range <code>[first, last)</code> is partitioned with respect to <code>pred</code>, or if <code>[first, last)</code> is empty. <code>false</code>, otherwise."
      ],
      "see": [
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "is_partitioned",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-partitioned",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-partitioned",
      "argsString": "(InputIterator first, InputIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::is_partitioned",
      "deleted": false,
      "details": "<code>is&#95;partitioned</code> returns <code>true</code> if the given range is partitioned with respect to a predicate, and <code>false</code> otherwise.\n\nSpecifically, <code>is&#95;partitioned</code> returns <code>true</code> if <code>[first, last)</code> is empty of if <code>[first, last)</code> is partitioned by <code>pred</code>, i.e. if all elements that satisfy <code>pred</code> appear before those that do not.\n\n\n\n```cpp\n#include <thrust/partition.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int &x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint A[] = {2, 4, 6, 8, 10, 1, 3, 5, 7, 9};\nint B[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\nthrust::is_partitioned(A, A + 10, is_even()); // returns true\nthrust::is_partitioned(B, B + 10, is_even()); // returns false\n```",
      "explicit": false,
      "fullname": "thrust::is_partitioned",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/partition.h",
        "line": 1424
      },
      "name": "is_partitioned",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range to consider. "
        },
        {
          "name": "last",
          "text": "The end of the range to consider. "
        },
        {
          "name": "pred",
          "text": "A function object which decides to which partition each element of the range <code>[first, last)</code> belongs. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_partitioned",
      "refid": "group__predicates_1ga39f90d87ed0ed524e90551a1c97c71d0",
      "returns": [
        "<code>true</code> if the range <code>[first, last)</code> is partitioned with respect to <code>pred</code>, or if <code>[first, last)</code> is empty. <code>false</code>, otherwise."
      ],
      "see": [
        "<code>partition</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "is_partitioned",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-partitioned",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-get-per-device-resource",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &system)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ MR * thrust::get_per_device_resource",
      "deleted": false,
      "details": "Returns a global instance of <code>MR</code> for the current device of the provided system.",
      "explicit": false,
      "fullname": "thrust::get_per_device_resource",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 48,
        "bodyFile": "thrust/per_device_resource.h",
        "bodyStart": 41,
        "column": 5,
        "file": "thrust/per_device_resource.h",
        "line": 41
      },
      "name": "get_per_device_resource",
      "override": false,
      "paramList": [
        {
          "name": "system",
          "text": "execution policy for which the resource is requested. "
        }
      ],
      "params": [
        {
          "name": "system",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::get_per_device_resource",
      "refid": "per__device__resource_8h_1a3881a6ea03799af4ec1fd33cc2bb8ac0",
      "returns": [
        "a pointer to a global instance of <code>MR</code> for the current device. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename MR",
          "typePlain": "typename MR"
        },
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        }
      ],
      "templateParamsList": [
        {
          "name": "MR",
          "text": "type of a memory resource to get an instance from. Must be <code>DefaultConstructible</code>. "
        }
      ],
      "title": "get_per_device_resource",
      "type": "__host__ MR *",
      "typePlain": "__host__ MR *",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-get-per-device-resource",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< InputIterator >::value_type thrust::reduce",
      "deleted": false,
      "details": "<code>reduce</code> is a generalization of summation: it computes the sum (or some other binary operation) of all the elements in the range <code>[first, last)</code>. This version of <code>reduce</code> uses <code>0</code> as the initial value of the reduction. <code>reduce</code> is similar to the C++ Standard Template Library's <code>std::accumulate</code>. The primary difference between the two functions is that <code>std::accumulate</code> guarantees the order of summation, while <code>reduce</code> requires associativity of the binary operation to parallelize the reduction.\n\nNote that <code>reduce</code> also assumes that the binary reduction operator (in this case operator+) is commutative. If the reduction operator is not commutative then <code>thrust::reduce</code> should not be used. Instead, one could use <code>inclusive&#95;scan</code> (which does not require commutativity) and select the last element of the output array.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reduce</code> to compute the sum of a sequence of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reduce.h>\n#include <thrust/execution_policy.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint result = thrust::reduce(thrust::host, data, data + 6);\n\n// result == 9\n```",
      "explicit": false,
      "fullname": "thrust::reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/reduce.h",
        "line": 83
      },
      "name": "reduce",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce",
      "refid": "group__reductions_1ga76e89362d46ef788f1fb2c16c28042b7",
      "returns": [
        "The result of the reduction."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/accumulate\">https://en.cppreference.com/w/cpp/algorithm/accumulate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and if <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined and is convertible to <code>InputIterator's</code><code>value&#95;type</code>. If <code>T</code> is <code>InputIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "reduce",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< InputIterator >::value_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< InputIterator >::value_type",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce",
      "argsString": "(InputIterator first, InputIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::iterator_traits< InputIterator >::value_type thrust::reduce",
      "deleted": false,
      "details": "<code>reduce</code> is a generalization of summation: it computes the sum (or some other binary operation) of all the elements in the range <code>[first, last)</code>. This version of <code>reduce</code> uses <code>0</code> as the initial value of the reduction. <code>reduce</code> is similar to the C++ Standard Template Library's <code>std::accumulate</code>. The primary difference between the two functions is that <code>std::accumulate</code> guarantees the order of summation, while <code>reduce</code> requires associativity of the binary operation to parallelize the reduction.\n\nNote that <code>reduce</code> also assumes that the binary reduction operator (in this case operator+) is commutative. If the reduction operator is not commutative then <code>thrust::reduce</code> should not be used. Instead, one could use <code>inclusive&#95;scan</code> (which does not require commutativity) and select the last element of the output array.\n\n\nThe following code snippet demonstrates how to use <code>reduce</code> to compute the sum of a sequence of integers.\n\n\n\n```cpp\n#include <thrust/reduce.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint result = thrust::reduce(data, data + 6);\n\n// result == 9\n```",
      "explicit": false,
      "fullname": "thrust::reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 40,
        "file": "thrust/reduce.h",
        "line": 126
      },
      "name": "reduce",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce",
      "refid": "group__reductions_1ga4fd69af6cd437e3bf95a46cf3836dc08",
      "returns": [
        "The result of the reduction."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/accumulate\">https://en.cppreference.com/w/cpp/algorithm/accumulate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and if <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined and is convertible to <code>InputIterator's</code><code>value&#95;type</code>. If <code>T</code> is <code>InputIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "reduce",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< InputIterator >::value_type",
      "typePlain": "thrust::iterator_traits< InputIterator >::value_type",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T thrust::reduce",
      "deleted": false,
      "details": "<code>reduce</code> is a generalization of summation: it computes the sum (or some other binary operation) of all the elements in the range <code>[first, last)</code>. This version of <code>reduce</code> uses <code>init</code> as the initial value of the reduction. <code>reduce</code> is similar to the C++ Standard Template Library's <code>std::accumulate</code>. The primary difference between the two functions is that <code>std::accumulate</code> guarantees the order of summation, while <code>reduce</code> requires associativity of the binary operation to parallelize the reduction.\n\nNote that <code>reduce</code> also assumes that the binary reduction operator (in this case operator+) is commutative. If the reduction operator is not commutative then <code>thrust::reduce</code> should not be used. Instead, one could use <code>inclusive&#95;scan</code> (which does not require commutativity) and select the last element of the output array.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reduce</code> to compute the sum of a sequence of integers including an intialization value using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reduce.h>\n#include <thrust/execution_policy.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint result = thrust::reduce(thrust::host, data, data + 6, 1);\n\n// result == 10\n```",
      "explicit": false,
      "fullname": "thrust::reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/reduce.h",
        "line": 176
      },
      "name": "reduce",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce",
      "refid": "group__reductions_1ga6ac0fe1561f58692e85112bd1145ddff",
      "returns": [
        "The result of the reduction."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/accumulate\">https://en.cppreference.com/w/cpp/algorithm/accumulate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and if <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined and is convertible to <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "reduce",
      "type": "__host__ __device__ T",
      "typePlain": "__host__ __device__ T",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce",
      "argsString": "(InputIterator first, InputIterator last, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "T thrust::reduce",
      "deleted": false,
      "details": "<code>reduce</code> is a generalization of summation: it computes the sum (or some other binary operation) of all the elements in the range <code>[first, last)</code>. This version of <code>reduce</code> uses <code>init</code> as the initial value of the reduction. <code>reduce</code> is similar to the C++ Standard Template Library's <code>std::accumulate</code>. The primary difference between the two functions is that <code>std::accumulate</code> guarantees the order of summation, while <code>reduce</code> requires associativity of the binary operation to parallelize the reduction.\n\nNote that <code>reduce</code> also assumes that the binary reduction operator (in this case operator+) is commutative. If the reduction operator is not commutative then <code>thrust::reduce</code> should not be used. Instead, one could use <code>inclusive&#95;scan</code> (which does not require commutativity) and select the last element of the output array.\n\n\nThe following code snippet demonstrates how to use <code>reduce</code> to compute the sum of a sequence of integers including an intialization value.\n\n\n\n```cpp\n#include <thrust/reduce.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint result = thrust::reduce(data, data + 6, 1);\n\n// result == 10\n```",
      "explicit": false,
      "fullname": "thrust::reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/reduce.h",
        "line": 222
      },
      "name": "reduce",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce",
      "refid": "group__reductions_1gad88f81c37fb8a41039d2185f26fec99d",
      "returns": [
        "The result of the reduction."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/accumulate\">https://en.cppreference.com/w/cpp/algorithm/accumulate</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and if <code>x</code> and <code>y</code> are objects of <code>InputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined and is convertible to <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "reduce",
      "type": "T",
      "typePlain": "T",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, T init, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ T thrust::reduce",
      "deleted": false,
      "details": "<code>reduce</code> is a generalization of summation: it computes the sum (or some other binary operation) of all the elements in the range <code>[first, last)</code>. This version of <code>reduce</code> uses <code>init</code> as the initial value of the reduction and <code>binary&#95;op</code> as the binary function used for summation. <code>reduce</code> is similar to the C++ Standard Template Library's <code>std::accumulate</code>. The primary difference between the two functions is that <code>std::accumulate</code> guarantees the order of summation, while <code>reduce</code> requires associativity of <code>binary&#95;op</code> to parallelize the reduction.\n\nNote that <code>reduce</code> also assumes that the binary reduction operator (in this case <code>binary&#95;op</code>) is commutative. If the reduction operator is not commutative then <code>thrust::reduce</code> should not be used. Instead, one could use <code>inclusive&#95;scan</code> (which does not require commutativity) and select the last element of the output array.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reduce</code> to compute the maximum value of a sequence of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reduce.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint result = thrust::reduce(thrust::host,\n                            data, data + 6,\n                            -1,\n                            thrust::maximum<int>());\n// result == 3\n```",
      "explicit": false,
      "fullname": "thrust::reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/reduce.h",
        "line": 284
      },
      "name": "reduce",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce",
      "refid": "group__reductions_1ga6869a1fbdf07499b2ed96fb3ec803c13",
      "returns": [
        "The result of the reduction."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/accumulate\">https://en.cppreference.com/w/cpp/algorithm/accumulate</a>",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputType</code>."
        }
      ],
      "title": "reduce",
      "type": "__host__ __device__ T",
      "typePlain": "__host__ __device__ T",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce",
      "argsString": "(InputIterator first, InputIterator last, T init, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "T thrust::reduce",
      "deleted": false,
      "details": "<code>reduce</code> is a generalization of summation: it computes the sum (or some other binary operation) of all the elements in the range <code>[first, last)</code>. This version of <code>reduce</code> uses <code>init</code> as the initial value of the reduction and <code>binary&#95;op</code> as the binary function used for summation. <code>reduce</code> is similar to the C++ Standard Template Library's <code>std::accumulate</code>. The primary difference between the two functions is that <code>std::accumulate</code> guarantees the order of summation, while <code>reduce</code> requires associativity of <code>binary&#95;op</code> to parallelize the reduction.\n\nNote that <code>reduce</code> also assumes that the binary reduction operator (in this case <code>binary&#95;op</code>) is commutative. If the reduction operator is not commutative then <code>thrust::reduce</code> should not be used. Instead, one could use <code>inclusive&#95;scan</code> (which does not require commutativity) and select the last element of the output array.\n\n\nThe following code snippet demonstrates how to use <code>reduce</code> to compute the maximum value of a sequence of integers.\n\n\n\n```cpp\n#include <thrust/reduce.h>\n#include <thrust/functional.h>\n...\nint data[6] = {1, 0, 2, 2, 1, 3};\nint result = thrust::reduce(data, data + 6,\n                            -1,\n                            thrust::maximum<int>());\n// result == 3\n```",
      "explicit": false,
      "fullname": "thrust::reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/reduce.h",
        "line": 339
      },
      "name": "reduce",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce",
      "refid": "group__reductions_1ga5e9cef4919927834bec50fc4829f6e6b",
      "returns": [
        "The result of the reduction."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/accumulate\">https://en.cppreference.com/w/cpp/algorithm/accumulate</a>",
        "transform_reduce "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>T</code>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputType</code>."
        }
      ],
      "title": "reduce",
      "type": "T",
      "typePlain": "T",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_output, OutputIterator2 values_output)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::reduce_by_key",
      "deleted": false,
      "details": "<code>reduce&#95;by&#95;key</code> is a generalization of <code>reduce</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>reduce&#95;by&#95;key</code> copies the first element of the group to the <code>keys&#95;output</code>. The corresponding values in the range are reduced using the <code>plus</code> and the result copied to <code>values&#95;output</code>.\n\nThis version of <code>reduce&#95;by&#95;key</code> uses the function object <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1equal__to.html\">equal&#95;to</a></code> to test for equality and <code>plus</code> to reduce values with equal keys.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reduce&#95;by&#95;key</code> to compact a sequence of key/value pairs and sum values with equal keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reduce.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nnew_end = thrust::reduce_by_key(thrust::host, A, A + N, B, C, D);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 21, 9, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::reduce_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/reduce.h",
        "line": 407
      },
      "name": "reduce_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_output",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_output",
          "text": "The beginning of the output value range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_output",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_output",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce_by_key",
      "refid": "group__reductions_1gab70270b001b1c52458a20ac15a1739dd",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;output, keys&#95;output&#95;last)</code> and <code>[values&#95;output, values&#95;output&#95;last)</code>."
      ],
      "see": [
        "reduce ",
        "unique_copy ",
        "unique_by_key ",
        "unique_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>."
        }
      ],
      "title": "reduce_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce-by-key",
      "argsString": "(InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_output, OutputIterator2 values_output)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::reduce_by_key",
      "deleted": false,
      "details": "<code>reduce&#95;by&#95;key</code> is a generalization of <code>reduce</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>reduce&#95;by&#95;key</code> copies the first element of the group to the <code>keys&#95;output</code>. The corresponding values in the range are reduced using the <code>plus</code> and the result copied to <code>values&#95;output</code>.\n\nThis version of <code>reduce&#95;by&#95;key</code> uses the function object <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1equal__to.html\">equal&#95;to</a></code> to test for equality and <code>plus</code> to reduce values with equal keys.\n\n\nThe following code snippet demonstrates how to use <code>reduce&#95;by&#95;key</code> to compact a sequence of key/value pairs and sum values with equal keys.\n\n\n\n```cpp\n#include <thrust/reduce.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nnew_end = thrust::reduce_by_key(A, A + N, B, C, D);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 21, 9, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::reduce_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/reduce.h",
        "line": 469
      },
      "name": "reduce_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_output",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_output",
          "text": "The beginning of the output value range. "
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_output",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_output",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce_by_key",
      "refid": "group__reductions_1gab9ff4507e03235f511e59169106bde5c",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;output, keys&#95;output&#95;last)</code> and <code>[values&#95;output, values&#95;output&#95;last)</code>."
      ],
      "see": [
        "reduce ",
        "unique_copy ",
        "unique_by_key ",
        "unique_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>."
        }
      ],
      "title": "reduce_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_output, OutputIterator2 values_output, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::reduce_by_key",
      "deleted": false,
      "details": "<code>reduce&#95;by&#95;key</code> is a generalization of <code>reduce</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>reduce&#95;by&#95;key</code> copies the first element of the group to the <code>keys&#95;output</code>. The corresponding values in the range are reduced using the <code>plus</code> and the result copied to <code>values&#95;output</code>.\n\nThis version of <code>reduce&#95;by&#95;key</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code>plus</code> to reduce values with equal keys.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reduce&#95;by&#95;key</code> to compact a sequence of key/value pairs and sum values with equal keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reduce.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nnew_end = thrust::reduce_by_key(thrust::host, A, A + N, B, C, D, binary_pred);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 21, 9, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::reduce_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/reduce.h",
        "line": 542
      },
      "name": "reduce_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_output",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_output",
          "text": "The beginning of the output value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_output",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_output",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce_by_key",
      "refid": "group__reductions_1ga19efedf5fd2b6e829b0223915c8c1160",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;output, keys&#95;output&#95;last)</code> and <code>[values&#95;output, values&#95;output&#95;last)</code>."
      ],
      "see": [
        "reduce ",
        "unique_copy ",
        "unique_by_key ",
        "unique_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "reduce_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce-by-key",
      "argsString": "(InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_output, OutputIterator2 values_output, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::reduce_by_key",
      "deleted": false,
      "details": "<code>reduce&#95;by&#95;key</code> is a generalization of <code>reduce</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>reduce&#95;by&#95;key</code> copies the first element of the group to the <code>keys&#95;output</code>. The corresponding values in the range are reduced using the <code>plus</code> and the result copied to <code>values&#95;output</code>.\n\nThis version of <code>reduce&#95;by&#95;key</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code>plus</code> to reduce values with equal keys.\n\n\nThe following code snippet demonstrates how to use <code>reduce&#95;by&#95;key</code> to compact a sequence of key/value pairs and sum values with equal keys.\n\n\n\n```cpp\n#include <thrust/reduce.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nnew_end = thrust::reduce_by_key(A, A + N, B, C, D, binary_pred);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 21, 9, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::reduce_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/reduce.h",
        "line": 609
      },
      "name": "reduce_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_output",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_output",
          "text": "The beginning of the output value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_output",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_output",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce_by_key",
      "refid": "group__reductions_1ga57d272415cad873c95cf2f0f534face9",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;output, keys&#95;output&#95;last)</code> and <code>[values&#95;output, values&#95;output&#95;last)</code>."
      ],
      "see": [
        "reduce ",
        "unique_copy ",
        "unique_by_key ",
        "unique_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "reduce_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_output, OutputIterator2 values_output, BinaryPredicate binary_pred, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::reduce_by_key",
      "deleted": false,
      "details": "<code>reduce&#95;by&#95;key</code> is a generalization of <code>reduce</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>reduce&#95;by&#95;key</code> copies the first element of the group to the <code>keys&#95;output</code>. The corresponding values in the range are reduced using the <code>BinaryFunction</code><code>binary&#95;op</code> and the result copied to <code>values&#95;output</code>. Specifically, if consecutive key iterators <code>i</code> and <code></code>(i + 1) are such that <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is <code>true</code>, then the corresponding values are reduced to a single value with <code>binary&#95;op</code>.\n\nThis version of <code>reduce&#95;by&#95;key</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code>binary&#95;op</code> to reduce values with equal keys.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reduce&#95;by&#95;key</code> to compact a sequence of key/value pairs and sum values with equal keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reduce.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nthrust::plus<int> binary_op;\nnew_end = thrust::reduce_by_key(thrust::host, A, A + N, B, C, D, binary_pred, binary_op);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 21, 9, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::reduce_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/reduce.h",
        "line": 691
      },
      "name": "reduce_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_output",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_output",
          "text": "The beginning of the output value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to accumulate values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_output",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_output",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce_by_key",
      "refid": "group__reductions_1ga0430894470bc1de12dc2ce53c5325de8",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;output, keys&#95;output&#95;last)</code> and <code>[values&#95;output, values&#95;output&#95;last)</code>."
      ],
      "see": [
        "reduce ",
        "unique_copy ",
        "unique_by_key ",
        "unique_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>."
        }
      ],
      "title": "reduce_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reduce-by-key",
      "argsString": "(InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_output, OutputIterator2 values_output, BinaryPredicate binary_pred, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::reduce_by_key",
      "deleted": false,
      "details": "<code>reduce&#95;by&#95;key</code> is a generalization of <code>reduce</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>reduce&#95;by&#95;key</code> copies the first element of the group to the <code>keys&#95;output</code>. The corresponding values in the range are reduced using the <code>BinaryFunction</code><code>binary&#95;op</code> and the result copied to <code>values&#95;output</code>. Specifically, if consecutive key iterators <code>i</code> and <code></code>(i + 1) are such that <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is <code>true</code>, then the corresponding values are reduced to a single value with <code>binary&#95;op</code>.\n\nThis version of <code>reduce&#95;by&#95;key</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code>binary&#95;op</code> to reduce values with equal keys.\n\n\nThe following code snippet demonstrates how to use <code>reduce&#95;by&#95;key</code> to compact a sequence of key/value pairs and sum values with equal keys.\n\n\n\n```cpp\n#include <thrust/reduce.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nthrust::plus<int> binary_op;\nnew_end = thrust::reduce_by_key(A, A + N, B, C, D, binary_pred, binary_op);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 21, 9, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::reduce_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/reduce.h",
        "line": 767
      },
      "name": "reduce_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_output",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_output",
          "text": "The beginning of the output value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        },
        {
          "name": "binary_op",
          "text": "The binary function used to accumulate values. "
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_output",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_output",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reduce_by_key",
      "refid": "group__reductions_1gab3e386472112538d710875d0d8880fca",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;output, keys&#95;output&#95;last)</code> and <code>[values&#95;output, values&#95;output&#95;last)</code>."
      ],
      "see": [
        "reduce ",
        "unique_copy ",
        "unique_by_key ",
        "unique_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>."
        }
      ],
      "title": "reduce_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__reductions.html#function-reduce-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::remove",
      "deleted": false,
      "details": "<code>remove</code> removes from the range <code>[first, last)</code> all elements that are equal to <code>value</code>. That is, <code>remove</code> returns an iterator <code>new&#95;last</code> such that the range <code>[first, new&#95;last)</code> contains no elements equal to <code>value</code>. The iterators in the range <code>[new&#95;first,last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>remove</code> is stable, meaning that the relative order of elements that are not equal to <code>value</code> is unchanged.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove</code> to remove a number of interest from a range using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/remove.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {3, 1, 4, 1, 5, 9};\nint *new_end = thrust::remove(A, A + N, 1);\n// The first four values of A are now {3, 4, 5, 9}\n// Values beyond new_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::remove",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/remove.h",
        "line": 97
      },
      "name": "remove",
      "note": [
        "The meaning of \"removal\" is somewhat subtle. <code>remove</code> does not destroy any iterators, and does not change the distance between <code>first</code> and <code>last</code>. (There's no way that it could do anything of the sort.) So, for example, if <code>V</code> is a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device_vector</a>, <code>remove(V.begin(), V.end(), 0)</code> does not change <code>V.size()</code>: <code>V</code> will contain just as many elements as it did before. <code>remove</code> returns an iterator that points to the end of the resulting range after elements have been removed from it; it follows that the elements after that iterator are of no interest, and may be discarded. If you are removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a>, you may simply erase them. That is, a reasonable way of removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a> is <code>S.erase(remove(S.begin(), S.end(), x), S.end())</code>."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "value",
          "text": "The value to remove from the range <code>[first, last)</code>. Elements which are equal to value are removed from the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove",
      "refid": "group__stream__compaction_1ga50e1ff3b382ad6d65c0f69dc01c4832e",
      "returns": [
        "A <code>ForwardIterator</code> pointing to the end of the resulting range of elements which are not equal to <code>value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove\">https://en.cppreference.com/w/cpp/algorithm/remove</a>",
        "remove_if ",
        "remove_copy ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and objects of type <code>T</code> can be compared for equality with objects of <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "remove",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::remove",
      "deleted": false,
      "details": "<code>remove</code> removes from the range <code>[first, last)</code> all elements that are equal to <code>value</code>. That is, <code>remove</code> returns an iterator <code>new&#95;last</code> such that the range <code>[first, new&#95;last)</code> contains no elements equal to <code>value</code>. The iterators in the range <code>[new&#95;first,last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>remove</code> is stable, meaning that the relative order of elements that are not equal to <code>value</code> is unchanged.\n\n\nThe following code snippet demonstrates how to use <code>remove</code> to remove a number of interest from a range.\n\n\n\n```cpp\n#include <thrust/remove.h>\n...\nconst int N = 6;\nint A[N] = {3, 1, 4, 1, 5, 9};\nint *new_end = thrust::remove(A, A + N, 1);\n// The first four values of A are now {3, 4, 5, 9}\n// Values beyond new_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::remove",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/remove.h",
        "line": 157
      },
      "name": "remove",
      "note": [
        "The meaning of \"removal\" is somewhat subtle. <code>remove</code> does not destroy any iterators, and does not change the distance between <code>first</code> and <code>last</code>. (There's no way that it could do anything of the sort.) So, for example, if <code>V</code> is a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device_vector</a>, <code>remove(V.begin(), V.end(), 0)</code> does not change <code>V.size()</code>: <code>V</code> will contain just as many elements as it did before. <code>remove</code> returns an iterator that points to the end of the resulting range after elements have been removed from it; it follows that the elements after that iterator are of no interest, and may be discarded. If you are removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a>, you may simply erase them. That is, a reasonable way of removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a> is <code>S.erase(remove(S.begin(), S.end(), x), S.end())</code>."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "value",
          "text": "The value to remove from the range <code>[first, last)</code>. Elements which are equal to value are removed from the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove",
      "refid": "group__stream__compaction_1gaf6724a17d4f4d25bd0eb45714ed03063",
      "returns": [
        "A <code>ForwardIterator</code> pointing to the end of the resulting range of elements which are not equal to <code>value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove\">https://en.cppreference.com/w/cpp/algorithm/remove</a>",
        "remove_if ",
        "remove_copy ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and objects of type <code>T</code> can be compared for equality with objects of <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "remove",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::remove_copy",
      "deleted": false,
      "details": "<code>remove&#95;copy</code> copies elements that are not equal to <code>value</code> from the range <code>[first, last)</code> to a range beginning at <code>result</code>. The return value is the end of the resulting range. This operation is stable, meaning that the relative order of the elements that are copied is the same as in the range <code>[first, last)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;copy</code> to copy a sequence of numbers to an output range while omitting a value of interest using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/remove.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint result[N-2];\nthrust::remove_copy(thrust::host, V, V + N, result, 0);\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-2, -1, 1, 2}\n```",
      "explicit": false,
      "fullname": "thrust::remove_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/remove.h",
        "line": 214
      },
      "name": "remove_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "result",
          "text": "The resulting range is copied to the sequence beginning at this location. "
        },
        {
          "name": "value",
          "text": "The value to omit from the copied range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_copy",
      "refid": "group__stream__compaction_1ga7b4f706511e0994e3e6cb9646940d4ed",
      "returns": [
        "An OutputIterator pointing to the end of the resulting range of elements which are not equal to <code>value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove_copy\">https://en.cppreference.com/w/cpp/algorithm/remove_copy</a>",
        "remove ",
        "remove_if ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and objects of type <code>T</code> can be compared for equality with objects of <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "remove_copy",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, const T &value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::remove_copy",
      "deleted": false,
      "details": "<code>remove&#95;copy</code> copies elements that are not equal to <code>value</code> from the range <code>[first, last)</code> to a range beginning at <code>result</code>. The return value is the end of the resulting range. This operation is stable, meaning that the relative order of the elements that are copied is the same as in the range <code>[first, last)</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;copy</code> to copy a sequence of numbers to an output range while omitting a value of interest.\n\n\n\n```cpp\n#include <thrust/remove.h>\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint result[N-2];\nthrust::remove_copy(V, V + N, result, 0);\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-2, -1, 1, 2}\n```",
      "explicit": false,
      "fullname": "thrust::remove_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/remove.h",
        "line": 265
      },
      "name": "remove_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "result",
          "text": "The resulting range is copied to the sequence beginning at this location. "
        },
        {
          "name": "value",
          "text": "The value to omit from the copied range. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_copy",
      "refid": "group__stream__compaction_1ga95e6719fc01574bb30daf46102896e76",
      "returns": [
        "An OutputIterator pointing to the end of the resulting range of elements which are not equal to <code>value</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove_copy\">https://en.cppreference.com/w/cpp/algorithm/remove_copy</a>",
        "remove ",
        "remove_if ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, and objects of type <code>T</code> can be compared for equality with objects of <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "remove_copy",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::remove_if",
      "deleted": false,
      "details": "<code>remove&#95;if</code> removes from the range <code>[first, last)</code> every element <code>x</code> such that <code>pred(x)</code> is <code>true</code>. That is, <code>remove&#95;if</code> returns an iterator <code>new&#95;last</code> such that the range <code>[first,new&#95;last)</code> contains no elements for which <code>pred</code> is <code>true</code>. The iterators in the range <code>[new&#95;last,last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>remove&#95;if</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;if</code> to remove all even numbers from an array of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/remove.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nint *new_end = thrust::remove_if(thrust::host, A, A + N, is_even());\n// The first three values of A are now {1, 5, 7}\n// Values beyond new_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::remove_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/remove.h",
        "line": 344
      },
      "name": "remove_if",
      "note": [
        "The meaning of \"removal\" is somewhat subtle. <code>remove&#95;if</code> does not destroy any iterators, and does not change the distance between <code>first</code> and <code>last</code>. (There's no way that it could do anything of the sort.) So, for example, if <code>V</code> is a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device_vector</a>, <code>remove&#95;if(V.begin(), V.end(), pred)</code> does not change <code>V.size()</code>: <code>V</code> will contain just as many elements as it did before. <code>remove&#95;if</code> returns an iterator that points to the end of the resulting range after elements have been removed from it; it follows that the elements after that iterator are of no interest, and may be discarded. If you are removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a>, you may simply erase them. That is, a reasonable way of removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a> is <code>S.erase(remove&#95;if(S.begin(), S.end(), pred), S.end())</code>."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[first,last)</code>. Elements for which <code>pred</code> evaluates to <code>true</code> are removed from the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_if",
      "refid": "group__stream__compaction_1ga307d7f64566909172a3f9e16b7e2ad53",
      "returns": [
        "A ForwardIterator pointing to the end of the resulting range of elements for which <code>pred</code> evaluated to <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove\">https://en.cppreference.com/w/cpp/algorithm/remove</a>",
        "remove ",
        "remove_copy ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-if",
      "argsString": "(ForwardIterator first, ForwardIterator last, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::remove_if",
      "deleted": false,
      "details": "<code>remove&#95;if</code> removes from the range <code>[first, last)</code> every element <code>x</code> such that <code>pred(x)</code> is <code>true</code>. That is, <code>remove&#95;if</code> returns an iterator <code>new&#95;last</code> such that the range <code>[first,new&#95;last)</code> contains no elements for which <code>pred</code> is <code>true</code>. The iterators in the range <code>[new&#95;last,last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>remove&#95;if</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;if</code> to remove all even numbers from an array of integers.\n\n\n\n```cpp\n#include <thrust/remove.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nint *new_end = thrust::remove_if(A, A + N, is_even());\n// The first three values of A are now {1, 5, 7}\n// Values beyond new_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::remove_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/remove.h",
        "line": 415
      },
      "name": "remove_if",
      "note": [
        "The meaning of \"removal\" is somewhat subtle. <code>remove&#95;if</code> does not destroy any iterators, and does not change the distance between <code>first</code> and <code>last</code>. (There's no way that it could do anything of the sort.) So, for example, if <code>V</code> is a <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device_vector</a>, <code>remove&#95;if(V.begin(), V.end(), pred)</code> does not change <code>V.size()</code>: <code>V</code> will contain just as many elements as it did before. <code>remove&#95;if</code> returns an iterator that points to the end of the resulting range after elements have been removed from it; it follows that the elements after that iterator are of no interest, and may be discarded. If you are removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a>, you may simply erase them. That is, a reasonable way of removing elements from a <a href=\"https://en.cppreference.com/w/cpp/container\">Sequence</a> is <code>S.erase(remove&#95;if(S.begin(), S.end(), pred), S.end())</code>."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[first,last)</code>. Elements for which <code>pred</code> evaluates to <code>true</code> are removed from the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_if",
      "refid": "group__stream__compaction_1ga5fa8f86717696de88ab484410b43829b",
      "returns": [
        "A ForwardIterator pointing to the end of the resulting range of elements for which <code>pred</code> evaluated to <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove\">https://en.cppreference.com/w/cpp/algorithm/remove</a>",
        "remove ",
        "remove_copy ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::remove_copy_if",
      "deleted": false,
      "details": "<code>remove&#95;copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that elements for which <code>pred</code> is <code>true</code> are not copied. The return value is the end of the resulting range. This operation is stable, meaning that the relative order of the elements that are copied is the same as the range <code>[first,last)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;copy&#95;if</code> to copy a sequence of numbers to an output range while omitting even numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/remove.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint result[2];\nthrust::remove_copy_if(thrust::host, V, V + N, result, is_even());\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::remove_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/remove.h",
        "line": 482
      },
      "name": "remove_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "result",
          "text": "The resulting range is copied to the sequence beginning at this location. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[first,last)</code>. Elements for which <code>pred</code> evaluates to <code>false</code> are not copied to the resulting sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_copy_if",
      "refid": "group__stream__compaction_1gaef6b5a8a71a99d7ab96cf6b009b6f2fd",
      "returns": [
        "An OutputIterator pointing to the end of the resulting range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove_copy\">https://en.cppreference.com/w/cpp/algorithm/remove_copy</a>",
        "remove ",
        "remove_copy ",
        "remove_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-copy-if",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::remove_copy_if",
      "deleted": false,
      "details": "<code>remove&#95;copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that elements for which <code>pred</code> is <code>true</code> are not copied. The return value is the end of the resulting range. This operation is stable, meaning that the relative order of the elements that are copied is the same as the range <code>[first,last)</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;copy&#95;if</code> to copy a sequence of numbers to an output range while omitting even numbers.\n\n\n\n```cpp\n#include <thrust/remove.h>\n...\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(const int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint result[2];\nthrust::remove_copy_if(V, V + N, result, is_even());\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::remove_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/remove.h",
        "line": 543
      },
      "name": "remove_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "result",
          "text": "The resulting range is copied to the sequence beginning at this location. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[first,last)</code>. Elements for which <code>pred</code> evaluates to <code>false</code> are not copied to the resulting sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_copy_if",
      "refid": "group__stream__compaction_1ga68cd876b18d71b7dd4a8d9bcefbb7d2d",
      "returns": [
        "An OutputIterator pointing to the end of the resulting range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove_copy\">https://en.cppreference.com/w/cpp/algorithm/remove_copy</a>",
        "remove ",
        "remove_copy ",
        "remove_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::remove_if",
      "deleted": false,
      "details": "<code>remove&#95;if</code> removes from the range <code>[first, last)</code> every element <code>x</code> such that <code>pred(x)</code> is <code>true</code>. That is, <code>remove&#95;if</code> returns an iterator <code>new&#95;last</code> such that the range <code>[first, new&#95;last)</code> contains no elements for which <code>pred</code> of the corresponding stencil value is <code>true</code>. The iterators in the range <code>[new&#95;last,last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>remove&#95;if</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;if</code> to remove specific elements from an array of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/remove.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nint S[N] = {0, 1, 1, 1, 0, 0};\n\nint *new_end = thrust::remove_if(thrust::host, A, A + N, S, thrust::identity<int>());\n// The first three values of A are now {1, 5, 7}\n// Values beyond new_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::remove_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/remove.h",
        "line": 608
      },
      "name": "remove_if",
      "note": [
        "The range <code>[first, last)</code> is not permitted to overlap with the range <code>[stencil, stencil + (last - first))</code>."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[stencil, stencil + (last - first))</code>. Elements for which <code>pred</code> evaluates to <code>true</code> are removed from the sequence <code>[first, last)</code>"
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code>. ",
        "The range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_if",
      "refid": "group__stream__compaction_1ga93935a411226c7520dec5d8f52b08826",
      "returns": [
        "A ForwardIterator pointing to the end of the resulting range of elements for which <code>pred</code> evaluated to <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove\">https://en.cppreference.com/w/cpp/algorithm/remove</a>",
        "remove ",
        "remove_copy ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-if",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::remove_if",
      "deleted": false,
      "details": "<code>remove&#95;if</code> removes from the range <code>[first, last)</code> every element <code>x</code> such that <code>pred(x)</code> is <code>true</code>. That is, <code>remove&#95;if</code> returns an iterator <code>new&#95;last</code> such that the range <code>[first, new&#95;last)</code> contains no elements for which <code>pred</code> of the corresponding stencil value is <code>true</code>. The iterators in the range <code>[new&#95;last,last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>remove&#95;if</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;if</code> to remove specific elements from an array of integers.\n\n\n\n```cpp\n#include <thrust/remove.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nint S[N] = {0, 1, 1, 1, 0, 0};\n\nint *new_end = thrust::remove_if(A, A + N, S, thrust::identity<int>());\n// The first three values of A are now {1, 5, 7}\n// Values beyond new_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::remove_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/remove.h",
        "line": 666
      },
      "name": "remove_if",
      "note": [
        "The range <code>[first, last)</code> is not permitted to overlap with the range <code>[stencil, stencil + (last - first))</code>."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[stencil, stencil + (last - first))</code>. Elements for which <code>pred</code> evaluates to <code>true</code> are removed from the sequence <code>[first, last)</code>"
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code>. ",
        "The range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_if",
      "refid": "group__stream__compaction_1ga2e6f9b410f1ea32246cbb4890d636b7e",
      "returns": [
        "A ForwardIterator pointing to the end of the resulting range of elements for which <code>pred</code> evaluated to <code>true</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove\">https://en.cppreference.com/w/cpp/algorithm/remove</a>",
        "remove ",
        "remove_copy ",
        "remove_copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::remove_copy_if",
      "deleted": false,
      "details": "<code>remove&#95;copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that elements for which <code>pred</code> of the corresponding stencil value is <code>true</code> are not copied. The return value is the end of the resulting range. This operation is stable, meaning that the relative order of the elements that are copied is the same as the range <code>[first,last)</code>.\n\nThe algorithm's execution policy is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;copy&#95;if</code> to copy a sequence of numbers to an output range while omitting specific elements using the <code>thrust::host</code> execution policy for parallelization.\n\n\n\n```cpp\n#include <thrust/remove.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint S[N] = { 1, 1,  0, 1, 0, 1};\nint result[2];\nthrust::remove_copy_if(thrust::host, V, V + N, S, result, thrust::identity<int>());\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::remove_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/remove.h",
        "line": 731
      },
      "name": "remove_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The resulting range is copied to the sequence beginning at this location. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[first,last)</code>. Elements for which <code>pred</code> evaluates to <code>false</code> are not copied to the resulting sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_copy_if",
      "refid": "group__stream__compaction_1ga608bcdb9dd1e9b9c066fd0882efbea09",
      "returns": [
        "An OutputIterator pointing to the end of the resulting range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove_copy\">https://en.cppreference.com/w/cpp/algorithm/remove_copy</a>",
        "remove ",
        "remove_copy ",
        "remove_if ",
        "copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-remove-copy-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::remove_copy_if",
      "deleted": false,
      "details": "<code>remove&#95;copy&#95;if</code> copies elements from the range <code>[first,last)</code> to a range beginning at <code>result</code>, except that elements for which <code>pred</code> of the corresponding stencil value is <code>true</code> are not copied. The return value is the end of the resulting range. This operation is stable, meaning that the relative order of the elements that are copied is the same as the range <code>[first,last)</code>.\n\n\nThe following code snippet demonstrates how to use <code>remove&#95;copy&#95;if</code> to copy a sequence of numbers to an output range while omitting specific elements.\n\n\n\n```cpp\n#include <thrust/remove.h>\n...\nconst int N = 6;\nint V[N] = {-2, 0, -1, 0, 1, 2};\nint S[N] = { 1, 1,  0, 1, 0, 1};\nint result[2];\nthrust::remove_copy_if(V, V + N, S, result, thrust::identity<int>());\n// V remains {-2, 0, -1, 0, 1, 2}\n// result is now {-1, 1}\n```",
      "explicit": false,
      "fullname": "thrust::remove_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/remove.h",
        "line": 790
      },
      "name": "remove_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The resulting range is copied to the sequence beginning at this location. "
        },
        {
          "name": "pred",
          "text": "A predicate to evaluate for each element of the range <code>[first,last)</code>. Elements for which <code>pred</code> evaluates to <code>false</code> are not copied to the resulting sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::remove_copy_if",
      "refid": "group__stream__compaction_1ga5ca0dab8bdfb53742f0fca18156c8987",
      "returns": [
        "An OutputIterator pointing to the end of the resulting range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/remove_copy\">https://en.cppreference.com/w/cpp/algorithm/remove_copy</a>",
        "remove ",
        "remove_copy ",
        "remove_if ",
        "copy_if "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "remove_copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-remove-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::replace",
      "deleted": false,
      "details": "<code>replace</code> replaces every element in the range [first, last) equal to <code>old&#95;value</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>&#42;i == old&#95;value</code> then it performs the <code>assignment &#42;i = new&#95;value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace</code> to replace a value of interest in a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> with another using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::replace(thrust::device, A.begin(), A.end(), 1, 99);\n\n// A contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "thrust::replace",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 86
      },
      "name": "replace",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace <code>old&#95;value</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace",
      "refid": "group__replacing_1gab7ea3f4e1f8be8c59064addc42de84ff",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable>Assignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">EqualityComparable</a>, objects of <code>T</code> may be compared for equality with objects of <code>ForwardIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::replace",
      "deleted": false,
      "details": "<code>replace</code> replaces every element in the range [first, last) equal to <code>old&#95;value</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>&#42;i == old&#95;value</code> then it performs the <code>assignment &#42;i = new&#95;value</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace</code> to replace a value of interest in a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> with another.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::replace(A.begin(), A.end(), 1, 99);\n\n// A contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "thrust::replace",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 135
      },
      "name": "replace",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace <code>old&#95;value</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace",
      "refid": "group__replacing_1gaf4c7616600c8937aa31c73417cfb4f28",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable>Assignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">EqualityComparable</a>, objects of <code>T</code> may be compared for equality with objects of <code>ForwardIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>pred(&#42;i)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> negative elements with <code>0</code> using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nis_less_than_zero pred;\n\nthrust::replace_if(thrust::device, A.begin(), A.end(), pred, 0);\n\n// A contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "thrust::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 200
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1ga9953891234efd44b09942f7d6381ff79",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(ForwardIterator first, ForwardIterator last, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code>, if <code>pred(&#42;i)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> negative elements with <code>0</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n...\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nis_less_than_zero pred;\n\nthrust::replace_if(A.begin(), A.end(), pred, 0);\n\n// A contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "thrust::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 260
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1ga1e1d314818b9b40f1275b5f55c63c051",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred(&#42;s)</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code> in the range <code>[first, last)</code>, and <code>s</code> in the range <code>[stencil, stencil + (last - first))</code>, if <code>pred(&#42;s)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> element with <code>0</code> when its corresponding stencil element is less than zero using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nis_less_than_zero pred;\nthrust::replace_if(thrust::device, A.begin(), A.end(), S.begin(), pred, 0);\n\n// A contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "thrust::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 334
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1gabe789c5b1b5ee15b0448cfa97b55090d",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-if",
      "argsString": "(ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::replace_if",
      "deleted": false,
      "details": "<code>replace&#95;if</code> replaces every element in the range <code>[first, last)</code> for which <code>pred(&#42;s)</code> returns <code>true</code> with <code>new&#95;value</code>. That is: for every iterator <code>i</code> in the range <code>[first, last)</code>, and <code>s</code> in the range <code>[stencil, stencil + (last - first))</code>, if <code>pred(&#42;s)</code> is <code>true</code> then it performs the assignment <code>&#42;i = new&#95;value</code>.\n\n\nThe following code snippet demonstrates how to use <code>replace&#95;if</code> to replace a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a>'s</code> element with <code>0</code> when its corresponding stencil element is less than zero.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nis_less_than_zero pred;\nthrust::replace_if(A.begin(), A.end(), S.begin(), pred, 0);\n\n// A contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "thrust::replace_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/replace.h",
        "line": 403
      },
      "name": "replace_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence of interest. "
        },
        {
          "name": "last",
          "text": "The end of the sequence of interest. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The new value to replace elements which <code>pred(&#42;i)</code> evaluates to <code>true</code>."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "stencil",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_if",
      "refid": "group__replacing_1gab28032fbed8f5be6650b7a7a435e1e26",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace\">https://en.cppreference.com/w/cpp/algorithm/replace</a>",
        "<code>replace</code>",
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_if",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::replace_copy",
      "deleted": false,
      "details": "<code>replace&#95;copy</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element equal to <code>old&#95;value</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>&#42;(first+n) == old&#95;value</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::device_vector<int> B(4);\n\nthrust::replace_copy(thrust::device, A.begin(), A.end(), B.begin(), 1, 99);\n\n// B contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "thrust::replace_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 463
      },
      "name": "replace_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The replacement value for which <code>&#42;i == old&#95;value</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy",
      "refid": "group__replacing_1gab119bc701dca7490c02e97485c6bd42d",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>copy</code>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, <code>T</code> may be compared for equality with <code>InputIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, const T &old_value, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::replace_copy",
      "deleted": false,
      "details": "<code>replace&#95;copy</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element equal to <code>old&#95;value</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>&#42;(first+n) == old&#95;value</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> A(4);\nA[0] = 1;\nA[1] = 2;\nA[2] = 3;\nA[3] = 1;\n\nthrust::device_vector<int> B(4);\n\nthrust::replace_copy(A.begin(), A.end(), B.begin(), 1, 99);\n\n// B contains [99, 2, 3, 99]\n```",
      "explicit": false,
      "fullname": "thrust::replace_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 518
      },
      "name": "replace_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "old_value",
          "text": "The value to replace. "
        },
        {
          "name": "new_value",
          "text": "The replacement value for which <code>&#42;i == old&#95;value</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "old_value",
          "type": "const T &",
          "typePlain": "const T &"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy",
      "refid": "group__replacing_1ga9b47b853ce90f513a977fce636681656",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>copy</code>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, <code>T</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>, <code>T</code> may be compared for equality with <code>InputIterator's</code><code>value&#95;type</code>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "<code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element for which <code>pred</code> is <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that 0 <= n < last-first, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(first+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_copy_if(thrust::device, A.begin(), A.end(), B.begin(), pred, 0);\n\n// B contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "thrust::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 588
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign <code>pred(&#42;i)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1gadcf709bfffd7a4d7db6e5b1da251fc07",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "<code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element for which <code>pred</code> is <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that 0 <= n < last-first, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(first+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  1;\nA[1] = -3;\nA[2] =  2;\nA[3] = -1;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_copy_if(A.begin(), A.end(), B.begin(), pred, 0);\n\n// B contains [1, 0, 2, 0]\n```",
      "explicit": false,
      "fullname": "thrust::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 654
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[first,last)</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign <code>pred(&#42;i)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1gaf3e557da5da45c911bb37a7d1c0a0001",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/replace_copy\">https://en.cppreference.com/w/cpp/algorithm/replace_copy</a>",
        "<code>replace</code>",
        "<code>replace&#95;if</code>",
        "<code>replace&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "This version of <code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element whose corresponding stencil element causes <code>pred</code> to be <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(stencil+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_if(thrust::device, A.begin(), A.end(), S.begin(), B.begin(), pred, 0);\n\n// B contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "thrust::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 732
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[stencil, stencil + (last - first))</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign when <code>pred(&#42;s)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the ranges <code>[stencil, stencil + (last - first))</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1ga1559ee22d3d642d29eccf2b049143851",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-replace-copy-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, OutputIterator result, Predicate pred, const T &new_value)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::replace_copy_if",
      "deleted": false,
      "details": "This version of <code>replace&#95;copy&#95;if</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last-first))</code>, except that any element whose corresponding stencil element causes <code>pred</code> to be <code>true</code> is not copied; <code>new&#95;value</code> is copied instead.\n\nMore precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>, <code>replace&#95;copy&#95;if</code> performs the assignment <code>&#42;(result+n) = new&#95;value</code> if <code>pred(&#42;(stencil+n))</code>, and <code>&#42;(result+n) = &#42;(first+n)</code> otherwise.\n\n\n\n```cpp\n#include <thrust/replace.h>\n#include <thrust/device_vector.h>\n\nstruct is_less_than_zero\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x < 0;\n  }\n};\n\n...\n\nthrust::device_vector<int> A(4);\nA[0] =  10;\nA[1] =  20;\nA[2] =  30;\nA[3] =  40;\n\nthrust::device_vector<int> S(4);\nS[0] = -1;\nS[1] =  0;\nS[2] = -1;\nS[3] =  0;\n\nthrust::device_vector<int> B(4);\nis_less_than_zero pred;\n\nthrust::replace_if(A.begin(), A.end(), S.begin(), B.begin(), pred, 0);\n\n// B contains [0, 20, 0, 40]\n```",
      "explicit": false,
      "fullname": "thrust::replace_copy_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/replace.h",
        "line": 806
      },
      "name": "replace_copy_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to copy from. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to copy from. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the sequence to copy to. "
        },
        {
          "name": "pred",
          "text": "The predicate to test on every value of the range <code>[stencil, stencil + (last - first))</code>. "
        },
        {
          "name": "new_value",
          "text": "The replacement value to assign when <code>pred(&#42;s)</code> evaluates to <code>true</code>. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        },
        {
          "name": "new_value",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the ranges <code>[first, last)</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the ranges <code>[stencil, stencil + (last - first))</code> and <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::replace_copy_if",
      "refid": "group__replacing_1gadc61d041bc9a1882ecbdc9daf92b0aa5",
      "returns": [
        "<code>result + (last-first)</code>"
      ],
      "see": [
        "<code>replace&#95;copy</code>",
        "<code>replace&#95;if</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "replace_copy_if",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__replacing.html#function-replace-copy-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reverse",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, BidirectionalIterator first, BidirectionalIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::reverse",
      "deleted": false,
      "details": "<code>reverse</code> reverses a range. That is: for every <code>i</code> such that <code>0 &lt;= i &lt;= (last - first) / 2</code>, it exchanges <code>&#42;(first + i)</code> and <code>&#42;(last - (i + 1))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reverse</code> to reverse a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> of integers using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reverse.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint data[N] = {0, 1, 2, 3, 4, 5};\nthrust::device_vector<int> v(data, data + N);\nthrust::reverse(thrust::device, v.begin(), v.end());\n// v is now {5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::reverse",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/reverse.h",
        "line": 69
      },
      "name": "reverse",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range to reverse. "
        },
        {
          "name": "last",
          "text": "The end of the range to reverse."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        },
        {
          "name": "last",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reverse",
      "refid": "reverse_8h_1aea54064035cc729c455783d47ade6c3d",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/reverse\">https://en.cppreference.com/w/cpp/algorithm/reverse</a>",
        "<code>reverse&#95;copy</code>",
        "<code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html\">reverse&#95;iterator</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename BidirectionalIterator",
          "typePlain": "typename BidirectionalIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "BidirectionalIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/bidirectional_iterator\">Bidirectional Iterator</a> and <code>BidirectionalIterator</code> is mutable."
        }
      ],
      "title": "reverse",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-reverse",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reverse",
      "argsString": "(BidirectionalIterator first, BidirectionalIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::reverse",
      "deleted": false,
      "details": "<code>reverse</code> reverses a range. That is: for every <code>i</code> such that <code>0 &lt;= i &lt;= (last - first) / 2</code>, it exchanges <code>&#42;(first + i)</code> and <code>&#42;(last - (i + 1))</code>.\n\n\nThe following code snippet demonstrates how to use <code>reverse</code> to reverse a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> of integers.\n\n\n\n```cpp\n#include <thrust/reverse.h>\n...\nconst int N = 6;\nint data[N] = {0, 1, 2, 3, 4, 5};\nthrust::device_vector<int> v(data, data + N);\nthrust::reverse(v.begin(), v.end());\n// v is now {5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::reverse",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/reverse.h",
        "line": 102
      },
      "name": "reverse",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range to reverse. "
        },
        {
          "name": "last",
          "text": "The end of the range to reverse."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        },
        {
          "name": "last",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reverse",
      "refid": "reverse_8h_1a2908b9099b284ab6b5e37793aa85e439",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/reverse\">https://en.cppreference.com/w/cpp/algorithm/reverse</a>",
        "<code>reverse&#95;copy</code>",
        "<code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html\">reverse&#95;iterator</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename BidirectionalIterator",
          "typePlain": "typename BidirectionalIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "BidirectionalIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/bidirectional_iterator\">Bidirectional Iterator</a> and <code>BidirectionalIterator</code> is mutable."
        }
      ],
      "title": "reverse",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-reverse",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reverse-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, BidirectionalIterator first, BidirectionalIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::reverse_copy",
      "deleted": false,
      "details": "<code>reverse&#95;copy</code> differs from <code>reverse</code> only in that the reversed range is written to a different output range, rather than inplace.\n\n<code>reverse&#95;copy</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last - first))</code> such that the copy is a reverse of the original range. Specifically: for every <code>i</code> such that <code>0 &lt;= i &lt; (last - first)</code>, <code>reverse&#95;copy</code> performs the assignment <code>&#42;(result + (last - first) - i) = &#42;(first + i)</code>.\n\nThe return value is <code>result + (last - first))</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>reverse&#95;copy</code> to reverse an input <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> of integers to an output <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/reverse.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint data[N] = {0, 1, 2, 3, 4, 5};\nthrust::device_vector<int> input(data, data + N);\nthrust::device_vector<int> output(N);\nthrust::reverse_copy(thrust::device, v.begin(), v.end(), output.begin());\n// input is still {0, 1, 2, 3, 4, 5}\n// output is now  {5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::reverse_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/reverse.h",
        "line": 154
      },
      "name": "reverse_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range to reverse. "
        },
        {
          "name": "last",
          "text": "The end of the range to reverse. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        },
        {
          "name": "last",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reverse_copy",
      "refid": "reverse_8h_1a50eab6fd13b6db82b2b4b57f48f9949c",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/reverse_copy\">https://en.cppreference.com/w/cpp/algorithm/reverse_copy</a>",
        "<code>reverse</code>",
        "<code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html\">reverse&#95;iterator</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename BidirectionalIterator",
          "typePlain": "typename BidirectionalIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "BidirectionalIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/bidirectional_iterator\">Bidirectional Iterator</a>, and <code>BidirectionalIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "reverse_copy",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-reverse-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-reverse-copy",
      "argsString": "(BidirectionalIterator first, BidirectionalIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::reverse_copy",
      "deleted": false,
      "details": "<code>reverse&#95;copy</code> differs from <code>reverse</code> only in that the reversed range is written to a different output range, rather than inplace.\n\n<code>reverse&#95;copy</code> copies elements from the range <code>[first, last)</code> to the range <code>[result, result + (last - first))</code> such that the copy is a reverse of the original range. Specifically: for every <code>i</code> such that <code>0 &lt;= i &lt; (last - first)</code>, <code>reverse&#95;copy</code> performs the assignment <code>&#42;(result + (last - first) - i) = &#42;(first + i)</code>.\n\nThe return value is <code>result + (last - first))</code>.\n\n\nThe following code snippet demonstrates how to use <code>reverse&#95;copy</code> to reverse an input <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> of integers to an output <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code>.\n\n\n\n```cpp\n#include <thrust/reverse.h>\n...\nconst int N = 6;\nint data[N] = {0, 1, 2, 3, 4, 5};\nthrust::device_vector<int> input(data, data + N);\nthrust::device_vector<int> output(N);\nthrust::reverse_copy(v.begin(), v.end(), output.begin());\n// input is still {0, 1, 2, 3, 4, 5}\n// output is now  {5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::reverse_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/reverse.h",
        "line": 201
      },
      "name": "reverse_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range to reverse. "
        },
        {
          "name": "last",
          "text": "The end of the range to reverse. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        },
        {
          "name": "last",
          "type": "BidirectionalIterator",
          "typePlain": "BidirectionalIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::reverse_copy",
      "refid": "reverse_8h_1ae689b285c63c567105d88e35f47e4b20",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/reverse_copy\">https://en.cppreference.com/w/cpp/algorithm/reverse_copy</a>",
        "<code>reverse</code>",
        "<code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1reverse__iterator.html\">reverse&#95;iterator</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename BidirectionalIterator",
          "typePlain": "typename BidirectionalIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "BidirectionalIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/bidirectional_iterator\">Bidirectional Iterator</a>, and <code>BidirectionalIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "reverse_copy",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-reverse-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::inclusive_scan",
      "deleted": false,
      "details": "<code>inclusive&#95;scan</code> computes an inclusive prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. More precisely, <code>&#42;first</code> is assigned to <code>&#42;result</code> and the sum of <code>&#42;first</code> and <code>&#42;(first + 1)</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of <code>inclusive&#95;scan</code> assumes plus as the associative operator. \n\n When the input and output sequences are the same, the scan is performed in-place.\n\n<code>inclusive&#95;scan</code> is similar to <code>std::partial&#95;sum</code> in the STL. The primary difference between the two functions is that <code>std::partial&#95;sum</code> guarantees a serial summation order, while <code>inclusive&#95;scan</code> requires associativity of the binary operation to parallelize the prefix sum.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan</code> to compute an in-place prefix sum using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::inclusive_scan(thrust::host, data, data + 6, data); // in-place scan\n\n// data is now {1, 1, 3, 5, 6, 9}\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 99
      },
      "name": "inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan",
      "refid": "group__prefixsums_1gafb24ad76101263038b0acaddc094d70a",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined. If <code>T</code> is <code>OutputIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "inclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::inclusive_scan",
      "deleted": false,
      "details": "<code>inclusive&#95;scan</code> computes an inclusive prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. More precisely, <code>&#42;first</code> is assigned to <code>&#42;result</code> and the sum of <code>&#42;first</code> and <code>&#42;(first + 1)</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of <code>inclusive&#95;scan</code> assumes plus as the associative operator. \n\n When the input and output sequences are the same, the scan is performed in-place.\n\n<code>inclusive&#95;scan</code> is similar to <code>std::partial&#95;sum</code> in the STL. The primary difference between the two functions is that <code>std::partial&#95;sum</code> guarantees a serial summation order, while <code>inclusive&#95;scan</code> requires associativity of the binary operation to parallelize the prefix sum.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::inclusive_scan(data, data + 6, data); // in-place scan\n\n// data is now {1, 1, 3, 5, 6, 9}\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 156
      },
      "name": "inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan",
      "refid": "group__prefixsums_1gad57155adfbf01ba6660839aafe16ad71",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined. If <code>T</code> is <code>OutputIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "inclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::inclusive_scan",
      "deleted": false,
      "details": "<code>inclusive&#95;scan</code> computes an inclusive prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. When the input and output sequences are the same, the scan is performed in-place.\n\n<code>inclusive&#95;scan</code> is similar to <code>std::partial&#95;sum</code> in the STL. The primary difference between the two functions is that <code>std::partial&#95;sum</code> guarantees a serial summation order, while <code>inclusive&#95;scan</code> requires associativity of the binary operation to parallelize the prefix sum.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan</code> to compute an in-place prefix sum using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::maximum<int> binary_op;\n\nthrust::inclusive_scan(thrust::host, data, data + 10, data, binary_op); // in-place scan\n\n// data is now {-5, 0, 2, 2, 2, 4, 4, 4, 4, 8}\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 218
      },
      "name": "inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan",
      "refid": "group__prefixsums_1gaaa5aa56f22c5e74e55ffdfebda8fbb62",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and <code>OutputIterator's</code><code>value&#95;type</code> is convertible to both <code>AssociativeOperator's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "inclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::inclusive_scan",
      "deleted": false,
      "details": "<code>inclusive&#95;scan</code> computes an inclusive prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. When the input and output sequences are the same, the scan is performed in-place.\n\n<code>inclusive&#95;scan</code> is similar to <code>std::partial&#95;sum</code> in the STL. The primary difference between the two functions is that <code>std::partial&#95;sum</code> guarantees a serial summation order, while <code>inclusive&#95;scan</code> requires associativity of the binary operation to parallelize the prefix sum.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan</code>\n\n\n\n```cpp\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::maximum<int> binary_op;\n\nthrust::inclusive_scan(data, data + 10, data, binary_op); // in-place scan\n\n// data is now {-5, 0, 2, 2, 2, 4, 4, 4, 4, 8}\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 275
      },
      "name": "inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan",
      "refid": "group__prefixsums_1ga7109170b96a48fab736e52b75f423464",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and <code>OutputIterator's</code><code>value&#95;type</code> is convertible to both <code>AssociativeOperator's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "inclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::exclusive_scan",
      "deleted": false,
      "details": "<code>exclusive&#95;scan</code> computes an exclusive prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. More precisely, <code>0</code> is assigned to <code>&#42;result</code> and the sum of <code>0</code> and <code>&#42;first</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of <code>exclusive&#95;scan</code> assumes plus as the associative operator and <code>0</code> as the initial value. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan</code> to compute an in-place prefix sum using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::exclusive_scan(thrust::host, data, data + 6, data); // in-place scan\n\n// data is now {0, 1, 1, 3, 5, 6}\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 335
      },
      "name": "exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan",
      "refid": "group__prefixsums_1ga0f1b7e1931f6ccd83c67c8cfde7c8144",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined. If <code>T</code> is <code>OutputIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "exclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::exclusive_scan",
      "deleted": false,
      "details": "<code>exclusive&#95;scan</code> computes an exclusive prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. More precisely, <code>0</code> is assigned to <code>&#42;result</code> and the sum of <code>0</code> and <code>&#42;first</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of <code>exclusive&#95;scan</code> assumes plus as the associative operator and <code>0</code> as the initial value. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::exclusive_scan(data, data + 6, data); // in-place scan\n\n// data is now {0, 1, 1, 3, 5, 6}\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 386
      },
      "name": "exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan",
      "refid": "group__prefixsums_1ga333bd4f34742dcf68d3ac5a0933f67db",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined. If <code>T</code> is <code>OutputIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "exclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::exclusive_scan",
      "deleted": false,
      "details": "<code>exclusive&#95;scan</code> computes an exclusive prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. More precisely, <code>init</code> is assigned to <code>&#42;result</code> and the sum of <code>init</code> and <code>&#42;first</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of <code>exclusive&#95;scan</code> assumes plus as the associative operator but requires an initial value <code>init</code>. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan</code> to compute an in-place prefix sum using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/execution_policy.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::exclusive_scan(thrust::host, data, data + 6, data, 4); // in-place scan\n\n// data is now {4, 5, 5, 7, 9, 10}\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 445
      },
      "name": "exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan",
      "refid": "group__prefixsums_1ga7be5451c96d8f649c8c43208fcebb8c3",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "exclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::exclusive_scan",
      "deleted": false,
      "details": "<code>exclusive&#95;scan</code> computes an exclusive prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. More precisely, <code>init</code> is assigned to <code>&#42;result</code> and the sum of <code>init</code> and <code>&#42;first</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of <code>exclusive&#95;scan</code> assumes plus as the associative operator but requires an initial value <code>init</code>. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::exclusive_scan(data, data + 6, data, 4); // in-place scan\n\n// data is now {4, 5, 5, 7, 9, 10}\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 498
      },
      "name": "exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan",
      "refid": "group__prefixsums_1ga3d973b51246f3d869339c08e3cbdc6fb",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "exclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, T init, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::exclusive_scan",
      "deleted": false,
      "details": "<code>exclusive&#95;scan</code> computes an exclusive prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. More precisely, <code>init</code> is assigned to <code>&#42;result</code> and the value <code>binary&#95;op(init, &#42;first)</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of the function requires both an associative operator and an initial value <code>init</code>. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan</code> to compute an in-place prefix sum using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::maximum<int> binary_op;\n\nthrust::exclusive_scan(thrust::host, data, data + 10, data, 1, binary_op); // in-place scan\n\n// data is now {1, 1, 1, 2, 2, 2, 4, 4, 4, 4 }\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 568
      },
      "name": "exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan",
      "refid": "group__prefixsums_1ga7576d394daa555d6d792d755f0037d63",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and <code>OutputIterator's</code><code>value&#95;type</code> is convertible to both <code>AssociativeOperator's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "exclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, T init, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::exclusive_scan",
      "deleted": false,
      "details": "<code>exclusive&#95;scan</code> computes an exclusive prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. More precisely, <code>init</code> is assigned to <code>&#42;result</code> and the value <code>binary&#95;op(init, &#42;first)</code> is assigned to <code>&#42;(result + 1)</code>, and so on. This version of the function requires both an associative operator and an initial value <code>init</code>. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::maximum<int> binary_op;\n\nthrust::exclusive_scan(data, data + 10, data, 1, binary_op); // in-place scan\n\n// data is now {1, 1, 1, 2, 2, 2, 4, 4, 4, 4 }\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 631
      },
      "name": "exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "init",
          "text": "The initial value. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code> but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan",
      "refid": "group__prefixsums_1gaa3f981950f16c9dae693590b79a9ff90",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/partial_sum\">https://en.cppreference.com/w/cpp/algorithm/partial_sum</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and <code>OutputIterator's</code><code>value&#95;type</code> is convertible to both <code>AssociativeOperator's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "exclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__prefixsums.html#function-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::inclusive_scan_by_key",
      "deleted": false,
      "details": "<code>inclusive&#95;scan&#95;by&#95;key</code> computes an inclusive key-value or 'segmented' prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate inclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> assumes <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1equal__to.html\">equal&#95;to</a></code> as the binary predicate used to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>&#42;i == &#42;(i+1)</code>, and belong to different segments otherwise.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> assumes <code>plus</code> as the associative operator used to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan&#95;by&#95;key</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\n\nthrust::inclusive_scan_by_key(thrust::host, keys, keys + 10, data, data); // in-place scan\n\n// data is now {1, 2, 3, 1, 2, 1, 1, 2, 3, 4};\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 710
      },
      "name": "inclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1gae84dddc63b198eb91cdf28e19cd2effc",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "inclusive_scan ",
        "exclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined."
        }
      ],
      "title": "inclusive_scan_by_key",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-inclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan-by-key",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::inclusive_scan_by_key",
      "deleted": false,
      "details": "<code>inclusive&#95;scan&#95;by&#95;key</code> computes an inclusive key-value or 'segmented' prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate inclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> assumes <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1equal__to.html\">equal&#95;to</a></code> as the binary predicate used to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>&#42;i == &#42;(i+1)</code>, and belong to different segments otherwise.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> assumes <code>plus</code> as the associative operator used to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan&#95;by&#95;key</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n\nint data[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\n\nthrust::inclusive_scan_by_key(keys, keys + 10, data, data); // in-place scan\n\n// data is now {1, 2, 3, 1, 2, 1, 1, 2, 3, 4};\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 774
      },
      "name": "inclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga61acb0c313f9375211f186b86075ce54",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "inclusive_scan ",
        "exclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined."
        }
      ],
      "title": "inclusive_scan_by_key",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-inclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::inclusive_scan_by_key",
      "deleted": false,
      "details": "<code>inclusive&#95;scan&#95;by&#95;key</code> computes an inclusive key-value or 'segmented' prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate inclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> assumes <code>plus</code> as the associative operator used to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan&#95;by&#95;key</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\n\nthrust::equal_to<int> binary_pred;\n\nthrust::inclusive_scan_by_key(thrust::host, keys, keys + 10, data, data, binary_pred); // in-place scan\n\n// data is now {1, 2, 3, 1, 2, 1, 1, 2, 3, 4};\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 852
      },
      "name": "inclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga634dbb556c019c0f3a9c641f59dfbd8c",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "inclusive_scan ",
        "exclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "inclusive_scan_by_key",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-inclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan-by-key",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::inclusive_scan_by_key",
      "deleted": false,
      "details": "<code>inclusive&#95;scan&#95;by&#95;key</code> computes an inclusive key-value or 'segmented' prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate inclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> assumes <code>plus</code> as the associative operator used to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan&#95;by&#95;key</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n\nint data[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\n\nthrust::equal_to<int> binary_pred;\n\nthrust::inclusive_scan_by_key(keys, keys + 10, data, data, binary_pred); // in-place scan\n\n// data is now {1, 2, 3, 1, 2, 1, 1, 2, 3, 4};\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 923
      },
      "name": "inclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga7294e99fe824bcbb542a3a9567280dd7",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "inclusive_scan ",
        "exclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "inclusive_scan_by_key",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-inclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryPredicate binary_pred, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::inclusive_scan_by_key",
      "deleted": false,
      "details": "<code>inclusive&#95;scan&#95;by&#95;key</code> computes an inclusive key-value or 'segmented' prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate inclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> uses the associative operator <code>binary&#95;op</code> to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan&#95;by&#95;key</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\n\nthrust::equal_to<int> binary_pred;\nthrust::plus<int>     binary_op;\n\nthrust::inclusive_scan_by_key(thrust::host, keys, keys + 10, data, data, binary_pred, binary_op); // in-place scan\n\n// data is now {1, 2, 3, 1, 2, 1, 1, 2, 3, 4};\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1008
      },
      "name": "inclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga4440c418b802df3a25ff2bf4131d2306",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "inclusive_scan ",
        "exclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "inclusive_scan_by_key",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-inclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-inclusive-scan-by-key",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryPredicate binary_pred, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::inclusive_scan_by_key",
      "deleted": false,
      "details": "<code>inclusive&#95;scan&#95;by&#95;key</code> computes an inclusive key-value or 'segmented' prefix sum operation. The term 'inclusive' means that each result includes the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate inclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThis version of <code>inclusive&#95;scan&#95;by&#95;key</code> uses the associative operator <code>binary&#95;op</code> to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\n\nThe following code snippet demonstrates how to use <code>inclusive&#95;scan&#95;by&#95;key</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n\nint data[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\n\nthrust::equal_to<int> binary_pred;\nthrust::plus<int>     binary_op;\n\nthrust::inclusive_scan_by_key(keys, keys + 10, data, data, binary_pred, binary_op); // in-place scan\n\n// data is now {1, 2, 3, 1, 2, 1, 1, 2, 3, 4};\n```",
      "explicit": false,
      "fullname": "thrust::inclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1086
      },
      "name": "inclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::inclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1gaf735a58d04225b29ee16a6cafed7689a",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "inclusive_scan ",
        "exclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "inclusive_scan_by_key",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-inclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive segmented prefix\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>0</code> to initialize the exclusive scan operation.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> assumes <code>plus</code> as the associative operator used to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> assumes <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1equal__to.html\">equal&#95;to</a></code> as the binary predicate used to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1</code> belong to the same segment if <code>&#42;i == &#42;(i+1)</code>, and belong to different segments otherwise.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nRefer to the most general form of <code>exclusive&#95;scan&#95;by&#95;key</code> for additional details.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nthrust::exclusive_scan_by_key(thrust::host, key, key + 10, vals, vals); // in-place scan\n\n// vals is now {0, 1, 2, 0, 1, 0, 0, 1, 2, 3};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1150
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga1c90ddaacc12dd7daafaa8e18fefb3b9",
      "see": [
        "exclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive segmented prefix\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>0</code> to initialize the exclusive scan operation.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> assumes <code>plus</code> as the associative operator used to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> assumes <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1equal__to.html\">equal&#95;to</a></code> as the binary predicate used to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1</code> belong to the same segment if <code>&#42;i == &#42;(i+1)</code>, and belong to different segments otherwise.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nRefer to the most general form of <code>exclusive&#95;scan&#95;by&#95;key</code> for additional details.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code>.\n\n\n\n```cpp\n#include <thrust/scan.h>\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nthrust::exclusive_scan_by_key(key, key + 10, vals, vals); // in-place scan\n\n// vals is now {0, 1, 2, 0, 1, 0, 0, 1, 2, 3};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1205
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence."
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga115ffd69c3e45736772cbdf2b74b9097",
      "see": [
        "exclusive_scan "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive key-value or 'segmented' prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate exclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>init</code> to initialize the exclusive scan operation.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nint init = 5;\n\nthrust::exclusive_scan_by_key(thrust::host, key, key + 10, vals, vals, init); // in-place scan\n\n// vals is now {5, 6, 7, 5, 6, 5, 5, 6, 7, 8};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1267
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "init",
          "text": "The initial of the exclusive sum value. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga49d16201188d12d536eb12aea693db47",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "exclusive_scan ",
        "inclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive key-value or 'segmented' prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate exclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>init</code> to initialize the exclusive scan operation.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nint init = 5;\n\nthrust::exclusive_scan_by_key(key, key + 10, vals, vals, init); // in-place scan\n\n// vals is now {5, 6, 7, 5, 6, 5, 5, 6, 7, 8};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1323
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "init",
          "text": "The initial of the exclusive sum value. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga42d9779f3889cce6a259685b6a170bad",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "exclusive_scan ",
        "inclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, T init, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive key-value or 'segmented' prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate exclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>init</code> to initialize the exclusive scan operation.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>binary&#95;pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nint init = 5;\n\nthrust::equal_to<int> binary_pred;\n\nthrust::exclusive_scan_by_key(thrust::host, key, key + 10, vals, vals, init, binary_pred); // in-place scan\n\n// vals is now {5, 6, 7, 5, 6, 5, 5, 6, 7, 8};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1395
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "init",
          "text": "The initial of the exclusive sum value. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga5627b0f2a62d2b1b1f9d29e4fd626987",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "exclusive_scan ",
        "inclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, T init, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive key-value or 'segmented' prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate exclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>init</code> to initialize the exclusive scan operation.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>binary&#95;pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nint init = 5;\n\nthrust::equal_to<int> binary_pred;\n\nthrust::exclusive_scan_by_key(key, key + 10, vals, vals, init, binary_pred); // in-place scan\n\n// vals is now {5, 6, 7, 5, 6, 5, 5, 6, 7, 8};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1461
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "init",
          "text": "The initial of the exclusive sum value. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga3db491d008839bace57f17ce846b1919",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "exclusive_scan ",
        "inclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, T init, BinaryPredicate binary_pred, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive key-value or 'segmented' prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate exclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>init</code> to initialize the exclusive scan operation.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>binary&#95;pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the associative operator <code>binary&#95;op</code> to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nint init = 5;\n\nthrust::equal_to<int> binary_pred;\nthrust::plus<int>     binary_op;\n\nthrust::exclusive_scan_by_key(thrust::host, key, key + 10, vals, vals, init, binary_pred, binary_op); // in-place scan\n\n// vals is now {5, 6, 7, 5, 6, 5, 5, 6, 7, 8};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1553
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "init",
          "text": "The initial of the exclusive sum value. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1gafd9ada3c6c491c4b676760612168f663",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "exclusive_scan ",
        "inclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-exclusive-scan-by-key",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, T init, BinaryPredicate binary_pred, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::exclusive_scan_by_key",
      "deleted": false,
      "details": "<code>exclusive&#95;scan&#95;by&#95;key</code> computes an exclusive key-value or 'segmented' prefix sum operation. The term 'exclusive' means that each result does not include the corresponding input operand in the partial sum. The term 'segmented' means that the partial sums are broken into distinct segments. In other words, within each segment a separate exclusive scan operation is computed. Refer to the code sample below for example usage.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the value <code>init</code> to initialize the exclusive scan operation.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the binary predicate <code>binary&#95;pred</code> to compare adjacent keys. Specifically, consecutive iterators <code>i</code> and <code>i+1</code> in the range <code>[first1, last1)</code> belong to the same segment if <code>binary&#95;pred(&#42;i, &#42;(i+1))</code> is true, and belong to different segments otherwise.\n\nThis version of <code>exclusive&#95;scan&#95;by&#95;key</code> uses the associative operator <code>binary&#95;op</code> to perform the prefix sum. When the input and output sequences are the same, the scan is performed in-place.\n\nResults are not deterministic for pseudo-associative operators (e.g., addition of floating-point types). Results for pseudo-associative operators may vary from run to run.\n\n\nThe following code snippet demonstrates how to use <code>exclusive&#95;scan&#95;by&#95;key</code>\n\n\n\n```cpp\n#include <thrust/scan.h>\n#include <thrust/functional.h>\n\nint keys[10] = {0, 0, 0, 1, 1, 2, 3, 3, 3, 3};\nint vals[10] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n\nint init = 5;\n\nthrust::equal_to<int> binary_pred;\nthrust::plus<int>     binary_op;\n\nthrust::exclusive_scan_by_key(key, key + 10, vals, vals, init, binary_pred, binary_op); // in-place scan\n\n// vals is now {5, 6, 7, 5, 6, 5, 5, 6, 7, 8};\n```",
      "explicit": false,
      "fullname": "thrust::exclusive_scan_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/scan.h",
        "line": 1638
      },
      "name": "exclusive_scan_by_key",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the key sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the input value sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output value sequence. "
        },
        {
          "name": "init",
          "text": "The initial of the exclusive sum value. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality of keys. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' values. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code> but the range <code>[first1, last1)</code> and the range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise. ",
        "<code>first2</code> may equal <code>result</code> but the range <code>[first2, first2 + (last1 - first1)</code> and range <code>[result, result + (last1 - first1))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::exclusive_scan_by_key",
      "refid": "group__segmentedprefixsums_1ga1281d7a3f03c0f0d1c7b185af6896b29",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "exclusive_scan ",
        "inclusive_scan_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>"
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>, and if <code>x</code> and <code>y</code> are objects of <code>OutputIterator's</code><code>value&#95;type</code>, then <code>binary&#95;op(x,y)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "exclusive_scan_by_key",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__segmentedprefixsums.html#function-exclusive-scan-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-scatter",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 map, RandomAccessIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::scatter",
      "deleted": false,
      "details": "<code>scatter</code> copies elements from a source range into an output array according to a map. For each iterator <code>i</code> in the range [<code>first</code>, <code>last</code>), the value <code>&#42;i</code> is assigned to <code>output[&#42;(map + (i - first))]</code>. The output iterator must permit random access. If the same index appears more than once in the range <code>[map, map + (last - first))</code>, the result is undefined.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>scatter</code> to reorder a range using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/scatter.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\n// mark even indices with a 1; odd indices with a 0\nint values[10] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// scatter all even indices into the first half of the\n// range, and odd indices vice versa\nint map[10]   = {0, 5, 1, 6, 2, 7, 3, 8, 4, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10);\nthrust::scatter(thrust::device,\n                d_values.begin(), d_values.end(),\n                d_map.begin(), d_output.begin());\n// d_output is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::scatter",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/scatter.h",
        "line": 92
      },
      "name": "scatter",
      "note": [
        "<code>scatter</code> is the inverse of thrust::gather. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence of values to scatter. "
        },
        {
          "name": "last",
          "text": "End of the sequence of values to scatter. "
        },
        {
          "name": "map",
          "text": "Beginning of the sequence of output indices. "
        },
        {
          "name": "result",
          "text": "Destination of the source elements."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pre": [
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[first,last)</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[map,map + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The expression <code>result[&#42;i]</code> shall be valid for all iterators in the range <code>[map,map + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::scatter",
      "refid": "group__scattering_1gac1b33a02dd67cf9c8b3b3aa05c881a37",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a>."
        }
      ],
      "title": "scatter",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__scattering.html#function-scatter",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-scatter",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 map, RandomAccessIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::scatter",
      "deleted": false,
      "details": "<code>scatter</code> copies elements from a source range into an output array according to a map. For each iterator <code>i</code> in the range [<code>first</code>, <code>last</code>), the value <code>&#42;i</code> is assigned to <code>output[&#42;(map + (i - first))]</code>. The output iterator must permit random access. If the same index appears more than once in the range <code>[map, map + (last - first))</code>, the result is undefined.\n\n\nThe following code snippet demonstrates how to use <code>scatter</code> to reorder a range.\n\n\n\n```cpp\n#include <thrust/scatter.h>\n#include <thrust/device_vector.h>\n...\n// mark even indices with a 1; odd indices with a 0\nint values[10] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};\nthrust::device_vector<int> d_values(values, values + 10);\n\n// scatter all even indices into the first half of the\n// range, and odd indices vice versa\nint map[10]   = {0, 5, 1, 6, 2, 7, 3, 8, 4, 9};\nthrust::device_vector<int> d_map(map, map + 10);\n\nthrust::device_vector<int> d_output(10);\nthrust::scatter(d_values.begin(), d_values.end(),\n                d_map.begin(), d_output.begin());\n// d_output is now {1, 1, 1, 1, 1, 0, 0, 0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::scatter",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/scatter.h",
        "line": 148
      },
      "name": "scatter",
      "note": [
        "<code>scatter</code> is the inverse of thrust::gather. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence of values to scatter. "
        },
        {
          "name": "last",
          "text": "End of the sequence of values to scatter. "
        },
        {
          "name": "map",
          "text": "Beginning of the sequence of output indices. "
        },
        {
          "name": "result",
          "text": "Destination of the source elements."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pre": [
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[first,last)</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[map,map + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The expression <code>result[&#42;i]</code> shall be valid for all iterators in the range <code>[map,map + (last - first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::scatter",
      "refid": "group__scattering_1ga8555284488141136aade6291d398126c",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a>."
        }
      ],
      "title": "scatter",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__scattering.html#function-scatter",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-scatter-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 map, InputIterator3 stencil, RandomAccessIterator output)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::scatter_if",
      "deleted": false,
      "details": "<code>scatter&#95;if</code> conditionally copies elements from a source range into an output array according to a map. For each iterator <code>i</code> in the range <code>[first, last)</code> such that <code>&#42;(stencil + (i - first))</code> is true, the value <code>&#42;i</code> is assigned to <code>output[&#42;(map + (i - first))]</code>. The output iterator must permit random access. If the same index appears more than once in the range <code>[map, map + (last - first))</code> the result is undefined.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/scatter.h>\n#include <thrust/execution_policy.h>\n...\nint V[8] = {10, 20, 30, 40, 50, 60, 70, 80};\nint M[8] = {0, 5, 1, 6, 2, 7, 3, 4};\nint S[8] = {1, 0, 1, 0, 1, 0, 1, 0};\nint D[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n\nthrust::scatter_if(thrust::host, V, V + 8, M, S, D);\n\n// D contains [10, 30, 50, 70, 0, 0, 0, 0];\n```",
      "explicit": false,
      "fullname": "thrust::scatter_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/scatter.h",
        "line": 207
      },
      "name": "scatter_if",
      "note": [
        "<code>scatter&#95;if</code> is the inverse of thrust::gather_if. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence of values to scatter. "
        },
        {
          "name": "last",
          "text": "End of the sequence of values to scatter. "
        },
        {
          "name": "map",
          "text": "Beginning of the sequence of output indices. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the sequence of predicate values. "
        },
        {
          "name": "output",
          "text": "Beginning of the destination range."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "output",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pre": [
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[first,last)</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[map,map + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[stencil,stencil + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The expression <code>result[&#42;i]</code> shall be valid for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code> for which the following condition holds: <code>&#42;(stencil + i) != false</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::scatter_if",
      "refid": "group__scattering_1ga39d45ea8d32a2057e941c59abff6912b",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator3's</code><code>value&#95;type</code> must be convertible to <code>bool</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a>."
        }
      ],
      "title": "scatter_if",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__scattering.html#function-scatter-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-scatter-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 map, InputIterator3 stencil, RandomAccessIterator output)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::scatter_if",
      "deleted": false,
      "details": "<code>scatter&#95;if</code> conditionally copies elements from a source range into an output array according to a map. For each iterator <code>i</code> in the range <code>[first, last)</code> such that <code>&#42;(stencil + (i - first))</code> is true, the value <code>&#42;i</code> is assigned to <code>output[&#42;(map + (i - first))]</code>. The output iterator must permit random access. If the same index appears more than once in the range <code>[map, map + (last - first))</code> the result is undefined.\n\n\n\n```cpp\n#include <thrust/scatter.h>\n...\nint V[8] = {10, 20, 30, 40, 50, 60, 70, 80};\nint M[8] = {0, 5, 1, 6, 2, 7, 3, 4};\nint S[8] = {1, 0, 1, 0, 1, 0, 1, 0};\nint D[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n\nthrust::scatter_if(V, V + 8, M, S, D);\n\n// D contains [10, 30, 50, 70, 0, 0, 0, 0];\n```",
      "explicit": false,
      "fullname": "thrust::scatter_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/scatter.h",
        "line": 261
      },
      "name": "scatter_if",
      "note": [
        "<code>scatter&#95;if</code> is the inverse of thrust::gather_if. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence of values to scatter. "
        },
        {
          "name": "last",
          "text": "End of the sequence of values to scatter. "
        },
        {
          "name": "map",
          "text": "Beginning of the sequence of output indices. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the sequence of predicate values. "
        },
        {
          "name": "output",
          "text": "Beginning of the destination range."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "output",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pre": [
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[first,last)</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[map,map + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[stencil,stencil + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The expression <code>result[&#42;i]</code> shall be valid for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code> for which the following condition holds: <code>&#42;(stencil + i) != false</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::scatter_if",
      "refid": "group__scattering_1ga72c5ec1e36f08a1bd7b4e0b20e7e906d",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator3's</code><code>value&#95;type</code> must be convertible to <code>bool</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a>."
        }
      ],
      "title": "scatter_if",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__scattering.html#function-scatter-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-scatter-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 map, InputIterator3 stencil, RandomAccessIterator output, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::scatter_if",
      "deleted": false,
      "details": "<code>scatter&#95;if</code> conditionally copies elements from a source range into an output array according to a map. For each iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;(stencil + (i - first)))</code> is <code>true</code>, the value <code>&#42;i</code> is assigned to <code>output[&#42;(map + (i - first))]</code>. The output iterator must permit random access. If the same index appears more than once in the range <code>[map, map + (last - first))</code> the result is undefined.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\n\n```cpp\n#include <thrust/scatter.h>\n#include <thrust/execution_policy.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint V[8] = {10, 20, 30, 40, 50, 60, 70, 80};\nint M[8] = {0, 5, 1, 6, 2, 7, 3, 4};\nint S[8] = {2, 1, 2, 1, 2, 1, 2, 1};\nint D[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n\nis_even pred;\nthrust::scatter_if(thrust::host, V, V + 8, M, S, D, pred);\n\n// D contains [10, 30, 50, 70, 0, 0, 0, 0];\n```",
      "explicit": false,
      "fullname": "thrust::scatter_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/scatter.h",
        "line": 336
      },
      "name": "scatter_if",
      "note": [
        "<code>scatter&#95;if</code> is the inverse of thrust::gather_if. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "Beginning of the sequence of values to scatter. "
        },
        {
          "name": "last",
          "text": "End of the sequence of values to scatter. "
        },
        {
          "name": "map",
          "text": "Beginning of the sequence of output indices. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the sequence of predicate values. "
        },
        {
          "name": "output",
          "text": "Beginning of the destination range. "
        },
        {
          "name": "pred",
          "text": "Predicate to apply to the stencil values."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "output",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[first,last)</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[map,map + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[stencil,stencil + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The expression <code>result[&#42;i]</code> shall be valid for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code> for which the following condition holds: <code>pred(&#42;(stencil + i)) != false</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::scatter_if",
      "refid": "group__scattering_1ga65a5c4aa81a4ac0532ef5d714092a48c",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator3's</code><code>value&#95;type</code> must be convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "scatter_if",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__scattering.html#function-scatter-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-scatter-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 map, InputIterator3 stencil, RandomAccessIterator output, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::scatter_if",
      "deleted": false,
      "details": "<code>scatter&#95;if</code> conditionally copies elements from a source range into an output array according to a map. For each iterator <code>i</code> in the range <code>[first, last)</code> such that <code>pred(&#42;(stencil + (i - first)))</code> is <code>true</code>, the value <code>&#42;i</code> is assigned to <code>output[&#42;(map + (i - first))]</code>. The output iterator must permit random access. If the same index appears more than once in the range <code>[map, map + (last - first))</code> the result is undefined.\n\n\n\n```cpp\n#include <thrust/scatter.h>\n\nstruct is_even\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return (x % 2) == 0;\n  }\n};\n\n...\n\nint V[8] = {10, 20, 30, 40, 50, 60, 70, 80};\nint M[8] = {0, 5, 1, 6, 2, 7, 3, 4};\nint S[8] = {2, 1, 2, 1, 2, 1, 2, 1};\nint D[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n\nis_even pred;\nthrust::scatter_if(V, V + 8, M, S, D, pred);\n\n// D contains [10, 30, 50, 70, 0, 0, 0, 0];\n```",
      "explicit": false,
      "fullname": "thrust::scatter_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/scatter.h",
        "line": 406
      },
      "name": "scatter_if",
      "note": [
        "<code>scatter&#95;if</code> is the inverse of thrust::gather_if. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "Beginning of the sequence of values to scatter. "
        },
        {
          "name": "last",
          "text": "End of the sequence of values to scatter. "
        },
        {
          "name": "map",
          "text": "Beginning of the sequence of output indices. "
        },
        {
          "name": "stencil",
          "text": "Beginning of the sequence of predicate values. "
        },
        {
          "name": "output",
          "text": "Beginning of the destination range. "
        },
        {
          "name": "pred",
          "text": "Predicate to apply to the stencil values."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "map",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "output",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[first,last)</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[map,map + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The iterator <code>result + i</code> shall not refer to any element referenced by any iterator <code>j</code> in the range <code>[stencil,stencil + (last - first))</code> for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code>.",
        "The expression <code>result[&#42;i]</code> shall be valid for all iterators <code>i</code> in the range <code>[map,map + (last - first))</code> for which the following condition holds: <code>pred(&#42;(stencil + i)) != false</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::scatter_if",
      "refid": "group__scattering_1ga8b0fb76f92729458494d317ad529a8dd",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> must be convertible to <code>RandomAccessIterator's</code><code>difference&#95;type</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator3's</code><code>value&#95;type</code> must be convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access iterator</a>. "
        },
        {
          "name": "Predicate",
          "text": "must be a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "scatter_if",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__scattering.html#function-scatter-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = (i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sequence.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(thrust::host, A, A + 10);\n// A is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```",
      "explicit": false,
      "fullname": "thrust::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 71
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga233a3db0c5031023c8e9385acd4b9759",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "sequence",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = (i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers.\n\n\n\n```cpp\n#include <thrust/sequence.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(A, A + 10);\n// A is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```",
      "explicit": false,
      "fullname": "thrust::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 107
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga08c1dd7914c155d5fed6458330af3443",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined."
        }
      ],
      "title": "sequence",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + (i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1 using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sequence.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(thrust::host, A, A + 10, 1);\n// A is now {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n```",
      "explicit": false,
      "fullname": "thrust::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 152
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga9d17b70466df6b9a57f94170935a03f8",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(ForwardIterator first, ForwardIterator last, T init)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + (i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1.\n\n\n\n```cpp\n#include <thrust/sequence.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(A, A + 10, 1);\n// A is now {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n```",
      "explicit": false,
      "fullname": "thrust::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 192
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1gaee768044bec3b9efcc5b9f733ed9a6a5",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, T init, T step)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + step &#42; (i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1 with a step size of 3 using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sequence.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(thrust::host, A, A + 10, 1, 3);\n// A is now {1, 4, 7, 10, 13, 16, 19, 22, 25, 28}\n```",
      "explicit": false,
      "fullname": "thrust::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 239
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers "
        },
        {
          "name": "step",
          "text": "The difference between consecutive elements."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "step",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga78a51c44c687267fd12436ed65a2009f",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sequence",
      "argsString": "(ForwardIterator first, ForwardIterator last, T init, T step)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sequence",
      "deleted": false,
      "details": "<code>sequence</code> fills the range <code>[first, last)</code> with a sequence of numbers.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, this version of <code>sequence</code> performs the assignment <code>&#42;i = init + step &#42; (i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>sequence</code> to fill a range with a sequence of numbers starting from the value 1 with a step size of 3.\n\n\n\n```cpp\n#include <thrust/sequence.h>\n...\nconst int N = 10;\nint A[N];\nthrust::sequence(A, A + 10, 1, 3);\n// A is now {1, 4, 7, 10, 13, 16, 19, 22, 25, 28}\n```",
      "explicit": false,
      "fullname": "thrust::sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sequence.h",
        "line": 281
      },
      "name": "sequence",
      "note": [
        "Unlike the similar C++ STL function <code>std::iota</code>, <code>sequence</code> offers no guarantee on order of execution."
      ],
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "init",
          "text": "The first value of the sequence of numbers "
        },
        {
          "name": "step",
          "text": "The difference between consecutive elements."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "step",
          "type": "T",
          "typePlain": "T"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sequence",
      "refid": "group__transformations_1ga57eb3695750a80676b34c9e7302535da",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/iota\">https://en.cppreference.com/w/cpp/algorithm/iota</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "T",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and <code>T</code> is convertible to <code>ForwardIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "sequence",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-sequence",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {0, 1, 3, 4, 5, 6, 9};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[3];\n\nint *result_end = thrust::set_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result is now {0, 4, 6}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 107
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference",
      "refid": "group__set__operations_1gadbd3cc430040aef1ead1a8885bd2bdc6",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {0, 1, 3, 4, 5, 6, 9};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[3];\n\nint *result_end = thrust::set_difference(A1, A1 + 7, A2, A2 + 5, result);\n// result is now {0, 4, 6}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 178
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference",
      "refid": "group__set__operations_1gacf5edd558fd96eee01b6425b3909c6b4",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {9, 6, 5, 4, 3, 1, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[3];\n\nint *result_end = thrust::set_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result is now {6, 4, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 256
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference",
      "refid": "group__set__operations_1ga6d866c84292ddd43342fc171f95ca652",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_difference",
      "deleted": false,
      "details": "<code>set&#95;difference</code> constructs a sorted range that is the set difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;difference</code> performs the \"difference\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code> and not contained in <code>[first2, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[first1, last1)</code> range shall be copied to the output range.\n\nThis version of <code>set&#95;difference</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference</code> to compute the set difference of two sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A1[7] = {9, 6, 5, 4, 3, 1, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[3];\n\nint *result_end = thrust::set_difference(A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result is now {6, 4, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 328
      },
      "name": "set_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference",
      "refid": "group__set__operations_1gab4528ff414e0292680ba412dbafdc6e1",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_difference\">https://en.cppreference.com/w/cpp/algorithm/set_difference</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[6] = {1, 3, 5, 7, 9, 11};\nint A2[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint result[7];\n\nint *result_end = thrust::set_intersection(thrust::host, A1, A1 + 6, A2, A2 + 7, result);\n// result is now {1, 3, 5}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 414
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection",
      "refid": "group__set__operations_1ga7e9671d6d44c7c384fa84bd4170eb431",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[6] = {1, 3, 5, 7, 9, 11};\nint A2[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint result[7];\n\nint *result_end = thrust::set_intersection(A1, A1 + 6, A2, A2 + 7, result);\n// result is now {1, 3, 5}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 492
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection",
      "refid": "group__set__operations_1ga939f2c87cff784afc63e39c5e5119784",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[6] = {11, 9, 7, 5, 3, 1};\nint A2[7] = {13, 8, 5, 3, 2,  1, 1};\n\nint result[3];\n\nint *result_end = thrust::set_intersection(thrust::host, A1, A1 + 6, A2, A2 + 7, result, thrust::greater<int>());\n// result is now {5, 3, 1}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 578
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection",
      "refid": "group__set__operations_1ga95576446f3a8f0302317d9ea2c9e8a74",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_intersection",
      "deleted": false,
      "details": "<code>set&#95;intersection</code> constructs a sorted range that is the intersection of sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;intersection</code> performs the \"intersection\" operation from set theory: the output range contains a copy of every element that is contained in both <code>[first1, last1)</code> and <code>[first2, last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if a value appears <code>m</code> times in <code>[first1, last1)</code> and <code>n</code> times in <code>[first2, last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the output range. <code>set&#95;intersection</code> is stable, meaning that both elements are copied from the first range rather than the second, and that the relative order of elements in the output range is the same as in the first input range.\n\nThis version of <code>set&#95;intersection</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection</code> to compute the set intersection of sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[6] = {11, 9, 7, 5, 3, 1};\nint A2[7] = {13, 8, 5, 3, 2,  1, 1};\n\nint result[3];\n\nint *result_end = thrust::set_intersection(A1, A1 + 6, A2, A2 + 7, result, thrust::greater<int>());\n// result is now {5, 3, 1}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 658
      },
      "name": "set_intersection",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection",
      "refid": "group__set__operations_1ga63a7ebdaf5797f78be04febd436cd284",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_intersection\">https://en.cppreference.com/w/cpp/algorithm/set_intersection</a>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {0, 1, 2, 2, 4, 6, 7};\nint A2[5] = {1, 1, 2, 5, 8};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 4, 5, 6, 7, 8}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 741
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference",
      "refid": "group__set__operations_1ga6fa1ae8ee04cadd3279288d96045b0c4",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;difference</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {0, 1, 2, 2, 4, 6, 7};\nint A2[5] = {1, 1, 2, 5, 8};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 4, 5, 6, 7, 8}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 816
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference",
      "refid": "group__set__operations_1ga16bc72ce5444f82fca22e178b8370a98",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;difference</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {7, 6, 4, 2, 2, 1, 0};\nint A2[5] = {8, 5, 2, 1, 1};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result = {8, 7, 6, 5, 4, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 900
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference",
      "refid": "group__set__operations_1ga3999b76f6fa90b57f9b50bd69bcab8eb",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;difference</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_symmetric_difference",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference</code> constructs a sorted range that is the set symmetric difference of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[first1, last1)</code> but not <code>[first2, last1)</code>, and a copy of every element that is contained in <code>[first2, last2)</code> but not <code>[first1, last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[first2, last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[first1, last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[first2, last2)</code> if <code>m &lt; n</code>.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference</code> to compute the symmetric difference of two sets of integers sorted in descending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {7, 6, 4, 2, 2, 1, 0};\nint A2[5] = {8, 5, 2, 1, 1};\n\nint result[6];\n\nint *result_end = thrust::set_symmetric_difference(A1, A1 + 7, A2, A2 + 5, result);\n// result = {8, 7, 6, 5, 4, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 978
      },
      "name": "set_symmetric_difference",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference",
      "refid": "group__set__operations_1ga2194c9c4fe22397aff13e1c163c86446",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference\">https://en.cppreference.com/w/cpp/algorithm/set_symmetric_difference</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;difference</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {0, 2, 4, 6, 8, 10, 12};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[11];\n\nint *result_end = thrust::set_union(thrust::host, A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n```",
      "explicit": false,
      "fullname": "thrust::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1059
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union",
      "refid": "group__set__operations_1ga974aed5fabc60590b7efa20464021caf",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A1[7] = {0, 2, 4, 6, 8, 10, 12};\nint A2[5] = {1, 3, 5, 7, 9};\n\nint result[11];\n\nint *result_end = thrust::set_union(A1, A1 + 7, A2, A2 + 5, result);\n// result = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n```",
      "explicit": false,
      "fullname": "thrust::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1132
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union",
      "refid": "group__set__operations_1gaae9a47e263655f0e56b1a4860182d4a8",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A1[7] = {12, 10, 8, 6, 4, 2, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[11];\n\nint *result_end = thrust::set_union(thrust::host, A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result = {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1212
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union",
      "refid": "group__set__operations_1ga61a7f2ee79a8a7a2c61e22cb24f369f2",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::set_union",
      "deleted": false,
      "details": "<code>set&#95;union</code> constructs a sorted range that is the union of the sorted ranges <code>[first1, last1)</code> and <code>[first2, last2)</code>. The return value is the end of the output range.\n\nIn the simplest case, <code>set&#95;union</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[first1, last1)</code>, <code>[first2, last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[first1, last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[first2, last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nThis version of <code>set&#95;union</code> compares elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;union</code> to compute the union of two sets of integers sorted in ascending order.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A1[7] = {12, 10, 8, 6, 4, 2, 0};\nint A2[5] = {9, 7, 5, 3, 1};\n\nint result[11];\n\nint *result_end = thrust::set_union(A1, A1 + 7, A2, A2 + 5, result, thrust::greater<int>());\n// result = {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_union",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/set_operations.h",
        "line": 1286
      },
      "name": "set_union",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input range. "
        },
        {
          "name": "last1",
          "text": "The end of the first input range. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input range. "
        },
        {
          "name": "last2",
          "text": "The end of the second input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[first1, last1)</code> and <code>[first2, last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting range shall not overlap with either input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union",
      "refid": "group__set__operations_1ga5d768feeec14f067304bf66bf59aaecf",
      "returns": [
        "The end of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/set_union\">https://en.cppreference.com/w/cpp/algorithm/set_union</a>",
        "<code>merge</code>",
        "<code>includes</code>",
        "<code>set&#95;union</code>",
        "<code>set&#95;intersection</code>",
        "<code>set&#95;symmetric&#95;difference</code>",
        "<code>sort</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>first&#95;argument&#95;type</code>. and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2's</code><code>value&#95;type</code> is convertable to <code>StrictWeakCompare's</code><code>second&#95;argument&#95;type</code>. and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {0, 1, 3, 4, 5, 6, 9};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1388
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference_by_key",
      "refid": "group__set__operations_1ga2c768f62d35db129c0978b32e92fae65",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {0, 1, 3, 4, 5, 6, 9};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1485
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference_by_key",
      "refid": "group__set__operations_1gaa93e363eca1e8ad422f1052f5f6c12e2",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {9, 6, 5, 4, 3, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1593
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference_by_key",
      "refid": "group__set__operations_1ga59506d32cf26d3cee44f4e53c2d45388",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-difference-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;difference&#95;by&#95;key</code> performs a key-value difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;difference&#95;by&#95;key</code> performs the \"difference\" operation from set theory: the keys output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> and not contained in <code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, the last <code>max(m-n,0)</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> range shall be copied to the output range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;difference&#95;by&#95;key</code> to compute the set difference of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {9, 6, 5, 4, 3, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[3];\nint vals_result[3];\n\nthrust::pair<int*,int*> end = thrust::set_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {0, 4, 6}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1695
      },
      "name": "set_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_difference_by_key",
      "refid": "group__set__operations_1ga0f073c1771ae53e6b9f0ec6dd0ceaf7f",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_difference_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {1, 3, 5, 7, 9, 11};\nint A_vals[6] = {0, 0, 0, 0, 0,  0};\n\nint B_keys[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result);\n\n// keys_result is now {1, 3, 5}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1800
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection_by_key",
      "refid": "group__set__operations_1ga5e4ac9ade071cdd4cd6ca3a0d9d2a01e",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {1, 3, 5, 7, 9, 11};\nint A_vals[6] = {0, 0, 0, 0, 0,  0};\n\nint B_keys[7] = {1, 1, 2, 3, 5,  8, 13};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result);\n\n// keys_result is now {1, 3, 5}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 1896
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection_by_key",
      "refid": "group__set__operations_1ga71e4f3653d54dd337bfbb7f02a22eb53",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {11, 9, 7, 5, 3, 1};\nint A_vals[6] = { 0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {13, 8, 5, 3, 2, 1, 1};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result, thrust::greater<int>());\n\n// keys_result is now {5, 3, 1}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2003
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection_by_key",
      "refid": "group__set__operations_1gaa536fa39199cecd84aceb4898ef2f00c",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-intersection-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_intersection_by_key",
      "deleted": false,
      "details": "<code>set&#95;intersection&#95;by&#95;key</code> performs a key-value intersection operation from set theory. <code>set&#95;intersection&#95;by&#95;key</code> constructs a sorted range that is the intersection of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;intersection&#95;by&#95;key</code> performs the \"intersection\" operation from set theory: the keys output range contains a copy of every element that is contained in both <code>[keys&#95;first1, keys&#95;last1)</code><code>[keys&#95;first2, keys&#95;last2)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if an element appears <code>m</code> times in <code>[keys&#95;first1, keys&#95;last1)</code> and <code>n</code> times in <code>[keys&#95;first2, keys&#95;last2)</code> (where <code>m</code> may be zero), then it appears <code>min(m,n)</code> times in the keys output range. <code>set&#95;intersection&#95;by&#95;key</code> is stable, meaning both that elements are copied from the first input range rather than the second, and that the relative order of elements in the output range is the same as the first input range.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> to the keys output range, the corresponding value element is copied from <code>[values&#95;first1, values&#95;last1)</code> to the values output range.\n\nThis version of <code>set&#95;intersection&#95;by&#95;key</code> compares objects using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;intersection&#95;by&#95;key</code> to compute the set intersection of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {11, 9, 7, 5, 3, 1};\nint A_vals[6] = { 0, 0, 0, 0, 0, 0};\n\nint B_keys[7] = {13, 8, 5, 3, 2, 1, 1};\n\nint keys_result[7];\nint vals_result[7];\n\nthrust::pair<int*,int*> end = thrust::set_intersection_by_key(A_keys, A_keys + 6, B_keys, B_keys + 7, A_vals, keys_result, vals_result, thrust::greater<int>());\n\n// keys_result is now {5, 3, 1}\n// vals_result is now {0, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_intersection_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2104
      },
      "name": "set_intersection_by_key",
      "note": [
        "Unlike the other key-value set operations, <code>set&#95;intersection&#95;by&#95;key</code> is unique in that it has no <code>values&#95;first2</code> parameter because elements from the second input range are never copied to the output range."
      ],
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_intersection_by_key",
      "refid": "group__set__operations_1ga88f27289ddd23d12866da002cf56ac51",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_intersection_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-intersection-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {0, 1, 2, 2, 4, 6, 7};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 1, 2, 5, 8};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 5, 6, 7, 8}\n// vals_result is now {0, 0, 1, 0, 0, 1}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2211
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference_by_key",
      "refid": "group__set__operations_1ga8a162051580c17b694d6b6b77cdcc13f",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {0, 1, 2, 2, 4, 6, 7};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {1, 1, 2, 5, 8};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 4, 5, 6, 7, 8}\n// vals_result is now {0, 0, 1, 0, 0, 1}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2311
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference_by_key",
      "refid": "group__set__operations_1ga32a4eef969520bafaa6fc79b8067527d",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {7, 6, 4, 2, 2, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {8, 5, 2, 1, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {8, 7, 6, 5, 4, 0}\n// vals_result is now {1, 0, 0, 1, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2422
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference_by_key",
      "refid": "group__set__operations_1gae59bb9d222948137263225e1c582cc0e",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-symmetric-difference-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_symmetric_difference_by_key",
      "deleted": false,
      "details": "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a key-value symmetric difference operation from set theory. <code>set&#95;difference&#95;by&#95;key</code> constructs a sorted range that is the symmetric difference of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> performs a set theoretic calculation: it constructs the union of the two sets A - B and B - A, where A and B are the two input ranges. That is, the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code> but not <code>[keys&#95;first2, keys&#95;last1)</code>, and a copy of every element that is contained in <code>[keys&#95;first2, keys&#95;last2)</code> but not <code>[keys&#95;first1, keys&#95;last1)</code>. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and <code>[keys&#95;first2, keys&#95;last1)</code> contains <code>n</code> elements that are equivalent to them, then <code>|m - n|</code> of those elements shall be copied to the output range: the last <code>m - n</code> elements from <code>[keys&#95;first1, keys&#95;last1)</code> if <code>m &gt; n</code>, and the last <code>n - m</code> of these elements from <code>[keys&#95;first2, keys&#95;last2)</code> if <code>m &lt; n</code>.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {7, 6, 4, 2, 2, 1, 0};\nint A_vals[6] = {0, 0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {8, 5, 2, 1, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[6];\nint vals_result[6];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {8, 7, 6, 5, 4, 0}\n// vals_result is now {1, 0, 0, 1, 0, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_symmetric_difference_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2527
      },
      "name": "set_symmetric_difference_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_symmetric_difference_by_key",
      "refid": "group__set__operations_1ga0d891f63909781a0dd0734b226c5d38f",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;union&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_symmetric_difference_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-symmetric-difference-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {0, 2, 4, 6, 8, 10, 12};\nint A_vals[6] = {0, 0, 0, 0, 0,  0,  0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n// vals_result is now {0, 1, 0, 1, 0, 1, 0, 1, 0, 1,  0,  0}\n```",
      "explicit": false,
      "fullname": "thrust::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2633
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union_by_key",
      "refid": "group__set__operations_1ga5a70df4acb37814b51c7e23cfefdde21",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in ascending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n...\nint A_keys[6] = {0, 2, 4, 6, 8, 10, 12};\nint A_vals[6] = {0, 0, 0, 0, 0,  0,  0};\n\nint B_keys[5] = {1, 3, 5, 7, 9};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result);\n// keys_result is now {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12}\n// vals_result is now {0, 1, 0, 1, 0, 1, 0, 1, 0, 1,  0,  0}\n```",
      "explicit": false,
      "fullname": "thrust::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2731
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>operator&lt;</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union_by_key",
      "refid": "group__set__operations_1ga0ae7d2e10a28f61b04674263236b4e81",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nint A_keys[6] = {12, 10, 8, 6, 4, 2, 0};\nint A_vals[6] = { 0,  0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(thrust::host, A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n// vals_result is now { 0,  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2840
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union_by_key",
      "refid": "group__set__operations_1ga7fe96d6f0017b7910332a9d137a5f297",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-union-by-key",
      "argsString": "(InputIterator1 keys_first1, InputIterator1 keys_last1, InputIterator2 keys_first2, InputIterator2 keys_last2, InputIterator3 values_first1, InputIterator4 values_first2, OutputIterator1 keys_result, OutputIterator2 values_result, StrictWeakCompare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::set_union_by_key",
      "deleted": false,
      "details": "<code>set&#95;union&#95;by&#95;key</code> performs a key-value union operation from set theory. <code>set&#95;union&#95;by&#95;key</code> constructs a sorted range that is the union of the sorted ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code>. Associated with each element from the input and output key ranges is a value element. The associated input value ranges need not be sorted.\n\nIn the simplest case, <code>set&#95;union&#95;by&#95;key</code> performs the \"union\" operation from set theory: the output range contains a copy of every element that is contained in <code>[keys&#95;first1, keys&#95;last1)</code>, <code>[keys&#95;first2, keys&#95;last1)</code>, or both. The general case is more complicated, because the input ranges may contain duplicate elements. The generalization is that if <code>[keys&#95;first1, keys&#95;last1)</code> contains <code>m</code> elements that are equivalent to each other and if <code>[keys&#95;first2, keys&#95;last2)</code> contains <code>n</code> elements that are equivalent to them, then all <code>m</code> elements from the first range shall be copied to the output range, in order, and then <code>max(n - m, 0)</code> elements from the second range shall be copied to the output, in order.\n\nEach time a key element is copied from <code>[keys&#95;first1, keys&#95;last1)</code> or <code>[keys&#95;first2, keys&#95;last2)</code> is copied to the keys output range, the corresponding value element is copied from the corresponding values input range (beginning at <code>values&#95;first1</code> or <code>values&#95;first2</code>) to the values output range.\n\nThis version of <code>set&#95;union&#95;by&#95;key</code> compares key elements using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>set&#95;symmetric&#95;difference&#95;by&#95;key</code> to compute the symmetric difference of two sets of integers sorted in descending order with their values.\n\n\n\n```cpp\n#include <thrust/set_operations.h>\n#include <thrust/functional.h>\n...\nint A_keys[6] = {12, 10, 8, 6, 4, 2, 0};\nint A_vals[6] = { 0,  0, 0, 0, 0, 0, 0};\n\nint B_keys[5] = {9, 7, 5, 3, 1};\nint B_vals[5] = {1, 1, 1, 1, 1};\n\nint keys_result[11];\nint vals_result[11];\n\nthrust::pair<int*,int*> end = thrust::set_symmetric_difference_by_key(A_keys, A_keys + 6, B_keys, B_keys + 5, A_vals, B_vals, keys_result, vals_result, thrust::greater<int>());\n// keys_result is now {12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}\n// vals_result is now { 0,  1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}\n```",
      "explicit": false,
      "fullname": "thrust::set_union_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/set_operations.h",
        "line": 2943
      },
      "name": "set_union_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first1",
          "text": "The beginning of the first input range of keys. "
        },
        {
          "name": "keys_last1",
          "text": "The end of the first input range of keys. "
        },
        {
          "name": "keys_first2",
          "text": "The beginning of the second input range of keys. "
        },
        {
          "name": "keys_last2",
          "text": "The end of the second input range of keys. "
        },
        {
          "name": "values_first1",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "values_first2",
          "text": "The beginning of the first input range of values. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output range of keys. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output range of values. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "keys_first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_last2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "values_first1",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "values_first2",
          "type": "InputIterator4",
          "typePlain": "InputIterator4"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakCompare",
          "typePlain": "StrictWeakCompare"
        }
      ],
      "pre": [
        "The ranges <code>[keys&#95;first1, keys&#95;last1)</code> and <code>[keys&#95;first2, keys&#95;last2)</code> shall be sorted with respect to <code>comp</code>. ",
        "The resulting ranges shall not overlap with any input range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::set_union_by_key",
      "refid": "group__set__operations_1ga35cb169a5157dcaca90b1060c885a1bf",
      "returns": [
        "A <code>pair</code><code>p</code> such that <code>p.first</code> is the end of the output range of keys, and such that <code>p.second</code> is the end of the output range of values."
      ],
      "see": [
        "<code>set&#95;symmetric&#95;difference&#95;by&#95;key</code>",
        "<code>set&#95;intersection&#95;by&#95;key</code>",
        "<code>set&#95;difference&#95;by&#95;key</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>is&#95;sorted</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename InputIterator4",
          "typePlain": "typename InputIterator4"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakCompare",
          "typePlain": "typename StrictWeakCompare"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator1</code> and <code>InputIterator2</code> have the same <code>value&#95;type</code>, <code>InputIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator1's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator1's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, <code>InputIterator2</code> and <code>InputIterator1</code> have the same <code>value&#95;type</code>, <code>InputIterator2's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, the ordering on <code>InputIterator2's</code><code>value&#95;type</code> is a strict weak ordering, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements, and <code>InputIterator2's</code><code>value&#95;type</code> is convertable to a type in <code>OutputIterator's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator3",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator3's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "InputIterator4",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator4's</code><code>value&#95;type</code> is convertible to a type in <code>OutputIterator2's</code> set of <code>value&#95;types</code>. "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "StrictWeakCompare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "set_union_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__set__operations.html#function-set-union-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-shuffle",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomIterator first, RandomIterator last, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle",
      "deleted": false,
      "details": "<code>shuffle</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle</code> to create a random permutation using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\n#include <thrust/execution_policy.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle(thrust::host, A, A + N, g);\n// A is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "thrust::shuffle",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 73
      },
      "name": "shuffle",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle",
      "refid": "group__shuffling_1ga7b5bab6de935c37b3acc18c991d22d30",
      "see": [
        "<code>shuffle&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-shuffle",
      "argsString": "(RandomIterator first, RandomIterator last, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle",
      "deleted": false,
      "details": "<code>shuffle</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle</code> to create a random permutation.\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle(A, A + N, g);\n// A is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "thrust::shuffle",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 102
      },
      "name": "shuffle",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle",
      "refid": "group__shuffling_1gaf169d14ea32c6d6b6ae96b43e695cb42",
      "see": [
        "<code>shuffle&#95;copy</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-shuffle-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomIterator first, RandomIterator last, OutputIterator result, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle_copy",
      "deleted": false,
      "details": "shuffle_copy differs from shuffle only in that the reordered sequence is written to different output sequences, rather than in place. <code>shuffle&#95;copy</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle&#95;copy</code> to create a random permutation.\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\n#include <thrust/execution_policy.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle_copy(thrust::host, A, A + N, result, g);\n// result is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "thrust::shuffle_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 140
      },
      "name": "shuffle_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "result",
          "text": "Destination of shuffled sequence "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle_copy",
      "refid": "group__shuffling_1gaa7e9ef2c184b27c93dbf76a5847a6cbc",
      "see": [
        "<code>shuffle</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle_copy",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-shuffle-copy",
      "argsString": "(RandomIterator first, RandomIterator last, OutputIterator result, URBG &&g)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::shuffle_copy",
      "deleted": false,
      "details": "shuffle_copy differs from shuffle only in that the reordered sequence is written to different output sequences, rather than in place. <code>shuffle&#95;copy</code> reorders the elements <code>[first, last)</code> by a uniform pseudorandom permutation, defined by random engine <code>g</code>.\n\n\nThe following code snippet demonstrates how to use <code>shuffle&#95;copy</code> to create a random permutation.\n\n\n\n```cpp\n#include <thrust/shuffle.h>\n#include <thrust/random.h>\nint A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint result[10];\nconst int N = sizeof(A)/sizeof(int);\nthrust::default_random_engine g;\nthrust::shuffle_copy(A, A + N, result, g);\n// result is now {6, 5, 8, 7, 2, 1, 4, 3, 10, 9}\n```",
      "explicit": false,
      "fullname": "thrust::shuffle_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 26,
        "file": "thrust/shuffle.h",
        "line": 173
      },
      "name": "shuffle_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence to shuffle. "
        },
        {
          "name": "last",
          "text": "The end of the sequence to shuffle. "
        },
        {
          "name": "result",
          "text": "Destination of shuffled sequence "
        },
        {
          "name": "g",
          "text": "A UniformRandomBitGenerator"
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "last",
          "type": "RandomIterator",
          "typePlain": "RandomIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "g",
          "type": "URBG &&",
          "typePlain": "URBG &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::shuffle_copy",
      "refid": "group__shuffling_1ga910781c28ec9c96cdd9c76167bf142dc",
      "see": [
        "<code>shuffle</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomIterator",
          "typePlain": "typename RandomIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename URBG",
          "typePlain": "typename URBG"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomIterator",
          "text": "is a random access iterator "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "URBG",
          "text": "is a uniform random bit generator"
        }
      ],
      "title": "shuffle_copy",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__shuffling.html#function-shuffle-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(thrust::host, A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "thrust::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 77
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort",
      "refid": "group__sorting_1ga1099d781e06c43805be06a918f7b7499",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort</code>",
        "<code>sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "thrust::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 118
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort",
      "refid": "group__sorting_1ga01621fff7b6eb24fb68944cc2f10af6a",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort</code>",
        "<code>sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "sort",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(thrust::host, A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "thrust::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 169
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort",
      "refid": "group__sorting_1ga3f47925d80f4970d5730051dba1c5603",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort</code>",
        "<code>sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sort",
      "deleted": false,
      "details": "<code>sort</code> sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>. Note: <code>sort</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two elements will be preserved by <code>sort</code>.\n\nThis version of <code>sort</code> compares objects using a function object <code>comp</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "thrust::sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 216
      },
      "name": "sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort",
      "refid": "group__sorting_1gaef9372b75a6920c67c43150627e74225",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort</code>",
        "<code>sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::stable_sort(thrust::host, A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 267
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort",
      "refid": "group__sorting_1ga703dbe25a420a7eef8d93a65f3588d96",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "stable_sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort</code> to sort a sequence of integers.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::stable_sort(A, A + N);\n// A is now {1, 2, 4, 5, 7, 8}\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 312
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort",
      "refid": "group__sorting_1ga1bf137e4504dab24744409b905350f7b",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "stable_sort",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 367
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort",
      "refid": "group__sorting_1ga7d9f0889aa9f87d237ca64d68b6b6d39",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort",
      "argsString": "(RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::stable_sort",
      "deleted": false,
      "details": "<code>stable&#95;sort</code> is much like <code>sort:</code> it sorts the elements in <code>[first, last)</code> into ascending order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code> such that <code>i</code> precedes <code>j</code>, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort</code> compares objects using a function object <code>comp</code>.\n\n\nThe following code demonstrates how to sort integers in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n...\nconst int N = 6;\nint A[N] = {1, 4, 2, 8, 5, 7};\nthrust::sort(A, A + N, thrust::greater<int>());\n// A is now {8, 7, 5, 4, 2, 1};\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 417
      },
      "name": "stable_sort",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "last",
          "type": "RandomAccessIterator",
          "typePlain": "RandomAccessIterator"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort",
      "refid": "group__sorting_1ga77581e28069f26d1c21fc6c3f9d35b25",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/stable_sort\">https://en.cppreference.com/w/cpp/algorithm/stable_sort</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator",
          "typePlain": "typename RandomAccessIterator"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator</code> is mutable, and <code>RandomAccessIterator's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(thrust::host, keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "thrust::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 485
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort_by_key",
      "refid": "group__sorting_1gabe038d6107f7c824cf74120500ef45ea",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort&#95;by&#95;key</code>",
        "<code>sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort-by-key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "thrust::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 541
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort_by_key",
      "refid": "group__sorting_1ga2bb765aeef19f6a04ca8b8ba11efff24",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort&#95;by&#95;key</code>",
        "<code>sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using a function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization.The keys are sorted in descending order using the <code>greater&lt;int&gt;</code> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(thrust::host, keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "thrust::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 607
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort_by_key",
      "refid": "group__sorting_1gaec4e3610a36062ee3e3d16607ce5ad80",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort&#95;by&#95;key</code>",
        "<code>sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-sort-by-key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::sort_by_key",
      "deleted": false,
      "details": "<code>sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nNote: <code>sort&#95;by&#95;key</code> is not guaranteed to be stable. That is, suppose that <code>&#42;i</code> and <code>&#42;j</code> are equivalent: neither one is less than the other. It is not guaranteed that the relative order of these two keys or the relative order of their corresponding values will be preserved by <code>sort&#95;by&#95;key</code>.\n\nThis version of <code>sort&#95;by&#95;key</code> compares key objects using a function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys. The keys are sorted in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::sort_by_key(keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "thrust::sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 668
      },
      "name": "sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::sort_by_key",
      "refid": "group__sorting_1ga99f37e94fdfaf47489ad35b62851d314",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>stable&#95;sort&#95;by&#95;key</code>",
        "<code>sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;sort&#95;by&#95;key</code> to sort an array of characters using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(thrust::host, keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 734
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort_by_key",
      "refid": "group__sorting_1gac6960b926c89bc29ffcfb4f451a4f2ef",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort-by-key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using <code>operator&lt;</code>.\n\n\nThe following code snippet demonstrates how to use <code>stable&#95;sort&#95;by&#95;key</code> to sort an array of characters using integers as sorting keys.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(keys, keys + N, values);\n// keys is now   {  1,   2,   4,   5,   7,   8}\n// values is now {'a', 'c', 'b', 'e', 'f', 'd'}\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 792
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort_by_key",
      "refid": "group__sorting_1gaf1fe1e4c1f203dd6a0c5deaab9dd8541",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering relation on <code>RandomAccessIterator1's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using the function object <code>comp</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys using the <code>thrust::host</code> execution policy for parallelization. The keys are sorted in descending order using the <code>greater&lt;int&gt;</code> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(thrust::host, keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 861
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort_by_key",
      "refid": "group__sorting_1gaee08ac5db848d5d3a8704bd6e7f3869b",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-stable-sort-by-key",
      "argsString": "(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first, StrictWeakOrdering comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::stable_sort_by_key",
      "deleted": false,
      "details": "<code>stable&#95;sort&#95;by&#95;key</code> performs a key-value sort. That is, <code>stable&#95;sort&#95;by&#95;key</code> sorts the elements in <code>[keys&#95;first, keys&#95;last)</code> and <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> into ascending key order, meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[keys&#95;first, keys&#95;last)</code> such that <code>i</code> precedes <code>j</code>, and <code>p</code> and <code>q</code> are iterators in <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> corresponding to <code>i</code> and <code>j</code> respectively, then <code>&#42;j</code> is not less than <code>&#42;i</code>.\n\nAs the name suggests, <code>stable&#95;sort&#95;by&#95;key</code> is stable: it preserves the relative ordering of equivalent elements. That is, if <code>x</code> and <code>y</code> are elements in <code>[keys&#95;first, keys&#95;last)</code> such that <code>x</code> precedes <code>y</code>, and if the two elements are equivalent (neither <code>x &lt; y</code> nor <code>y &lt; x</code>) then a postcondition of <code>stable&#95;sort&#95;by&#95;key</code> is that <code>x</code> still precedes <code>y</code>.\n\nThis version of <code>stable&#95;sort&#95;by&#95;key</code> compares key objects using the function object <code>comp</code>.\n\n\nThe following code snippet demonstrates how to use <code>sort&#95;by&#95;key</code> to sort an array of character values using integers as sorting keys. The keys are sorted in descending order using the greater<int> comparison operator.\n\n\n\n```cpp\n#include <thrust/sort.h>\n...\nconst int N = 6;\nint    keys[N] = {  1,   4,   2,   8,   5,   7};\nchar values[N] = {'a', 'b', 'c', 'd', 'e', 'f'};\nthrust::stable_sort_by_key(keys, keys + N, values, thrust::greater<int>());\n// keys is now   {  8,   7,   5,   4,   2,   1}\n// values is now {'d', 'f', 'e', 'b', 'c', 'a'}\n```",
      "explicit": false,
      "fullname": "thrust::stable_sort_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 925
      },
      "name": "stable_sort_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key sequence. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key sequence. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator."
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "keys_last",
          "type": "RandomAccessIterator1",
          "typePlain": "RandomAccessIterator1"
        },
        {
          "name": "values_first",
          "type": "RandomAccessIterator2",
          "typePlain": "RandomAccessIterator2"
        },
        {
          "name": "comp",
          "type": "StrictWeakOrdering",
          "typePlain": "StrictWeakOrdering"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last))</code> shall not overlap the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code>."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::stable_sort_by_key",
      "refid": "group__sorting_1gac0210e19d68263b648a5558c78ae61ee",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/sort\">https://en.cppreference.com/w/cpp/algorithm/sort</a>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename RandomAccessIterator1",
          "typePlain": "typename RandomAccessIterator1"
        },
        {
          "name": "",
          "type": "typename RandomAccessIterator2",
          "typePlain": "typename RandomAccessIterator2"
        },
        {
          "name": "",
          "type": "typename StrictWeakOrdering",
          "typePlain": "typename StrictWeakOrdering"
        }
      ],
      "templateParamsList": [
        {
          "name": "RandomAccessIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/random_access_iterator\">Random Access Iterator</a>, <code>RandomAccessIterator1</code> is mutable, and <code>RandomAccessIterator1's</code><code>value&#95;type</code> is convertible to <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "RandomAccessIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator\">Random Access Iterator</a>, and <code>RandomAccessIterator2</code> is mutable. "
        },
        {
          "name": "StrictWeakOrdering",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "stable_sort_by_key",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__sorting.html#function-stable-sort-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>&#42;(i + 1) &lt; &#42;i</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in ascending order using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/device_vector.h>\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nbool result = thrust::is_sorted(thrust::device, v.begin(), v.end());\n\n// result == false\n\nthrust::sort(v.begin(), v.end());\nresult = thrust::is_sorted(thrust::device, v.begin(), v.end());\n\n// result == true\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 999
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1ga1cf02f6a212f4f2e4998f517626e5e7c",
      "returns": [
        "<code>true</code>, if the sequence is sorted; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "is_sorted_until ",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering on objects of <code>ForwardIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "is_sorted",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>&#42;(i + 1) &lt; &#42;i</code> is <code>true</code>.\n\n\nThe following code demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in ascending order.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/device_vector.h>\n#include <thrust/sort.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nbool result = thrust::is_sorted(v.begin(), v.end());\n\n// result == false\n\nthrust::sort(v.begin(), v.end());\nresult = thrust::is_sorted(v.begin(), v.end());\n\n// result == true\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 1054
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1gaf221abd8c79d647c7957a66be19d68d6",
      "returns": [
        "<code>true</code>, if the sequence is sorted; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "is_sorted_until ",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>, and the ordering on objects of <code>ForwardIterator's</code><code>value&#95;type</code> is a _strict weak ordering_, as defined in the <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a> requirements."
        }
      ],
      "title": "is_sorted",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order accoring to a user-defined comparison operation, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>comp(&#42;(i + 1), &#42;i)</code> is <code>true</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in descending order using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nthrust::greater<int> comp;\nbool result = thrust::is_sorted(thrust::device, v.begin(), v.end(), comp);\n\n// result == false\n\nthrust::sort(v.begin(), v.end(), comp);\nresult = thrust::is_sorted(thrust::device, v.begin(), v.end(), comp);\n\n// result == true\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 1114
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1ga37d50b9c53e68645a139658a8865032f",
      "returns": [
        "<code>true</code>, if the sequence is sorted according to comp; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted",
      "type": "__host__ __device__ bool",
      "typePlain": "__host__ __device__ bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted",
      "argsString": "(ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool thrust::is_sorted",
      "deleted": false,
      "details": "<code>is&#95;sorted</code> returns <code>true</code> if the range <code>[first, last)</code> is sorted in ascending order accoring to a user-defined comparison operation, and <code>false</code> otherwise.\n\nSpecifically, this version of <code>is&#95;sorted</code> returns <code>false</code> if for some iterator <code>i</code> in the range <code>[first, last - 1)</code> the expression <code>comp(&#42;(i + 1), &#42;i)</code> is <code>true</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted</code> to test whether the contents of a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1device__vector.html\">device&#95;vector</a></code> are stored in descending order.\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> v(6);\nv[0] = 1;\nv[1] = 4;\nv[2] = 2;\nv[3] = 8;\nv[4] = 5;\nv[5] = 7;\n\nthrust::greater<int> comp;\nbool result = thrust::is_sorted(v.begin(), v.end(), comp);\n\n// result == false\n\nthrust::sort(v.begin(), v.end(), comp);\nresult = thrust::is_sorted(v.begin(), v.end(), comp);\n\n// result == true\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/sort.h",
        "line": 1169
      },
      "name": "is_sorted",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "comp",
          "text": "Comparison operator. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted",
      "refid": "group__predicates_1gaa45997c2cf929bf5ddce1ca2e33d4769",
      "returns": [
        "<code>true</code>, if the sequence is sorted according to comp; <code>false</code>, otherwise."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/is_sorted\">https://en.cppreference.com/w/cpp/algorithm/is_sorted</a>",
        "<code>sort</code>",
        "<code>stable&#95;sort</code>",
        "<code>less&lt;T&gt;</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to both <code>StrictWeakOrdering's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted",
      "type": "bool",
      "typePlain": "bool",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using <code>operator&lt;</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/execution_policy.h>\n\n...\n \nint A[8] = {0, 1, 2, 3, 0, 1, 2, 3};\n\nint * B = thrust::is_sorted_until(thrust::host, A, A + 8);\n\n// B - A is 4\n// [A, B) is sorted\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1215
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga781ed43754dbde1e48ad243a74f537a3",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using <code>operator&lt;</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted:\n\n\n\n```cpp\n#include <thrust/sort.h>\n\n...\n \nint A[8] = {0, 1, 2, 3, 0, 1, 2, 3};\n\nint * B = thrust::is_sorted_until(A, A + 8);\n\n// B - A is 4\n// [A, B) is sorted\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1254
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga2943fb1a51132798bb1b548a02874784",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/LessThanComparable\">LessThan Comparable</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using the function object <code>comp</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted in descending order using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n\n...\n \nint A[8] = {3, 2, 1, 0, 3, 2, 1, 0};\n\nthrust::greater<int> comp;\nint * B = thrust::is_sorted_until(thrust::host, A, A + 8, comp);\n\n// B - A is 4\n// [A, B) is sorted in descending order\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1303
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization: "
        },
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "comp",
          "text": "The function object to use for comparison. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga72698c011192fd7ecf3ea887545b678a",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Compare's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-is-sorted-until",
      "argsString": "(ForwardIterator first, ForwardIterator last, Compare comp)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::is_sorted_until",
      "deleted": false,
      "details": "This version of <code>is&#95;sorted&#95;until</code> returns the last iterator <code>i</code> in <code>[first,last]</code> for which the range <code>[first,last)</code> is sorted using the function object <code>comp</code>. If <code>distance(first,last) &lt; 2</code>, <code>is&#95;sorted&#95;until</code> simply returns <code>last</code>.\n\n\nThe following code snippet demonstrates how to use <code>is&#95;sorted&#95;until</code> to find the first position in an array where the data becomes unsorted in descending order:\n\n\n\n```cpp\n#include <thrust/sort.h>\n#include <thrust/functional.h>\n\n...\n \nint A[8] = {3, 2, 1, 0, 3, 2, 1, 0};\n\nthrust::greater<int> comp;\nint * B = thrust::is_sorted_until(A, A + 8, comp);\n\n// B - A is 4\n// [A, B) is sorted in descending order\n```",
      "explicit": false,
      "fullname": "thrust::is_sorted_until",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/sort.h",
        "line": 1347
      },
      "name": "is_sorted_until",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range of interest. "
        },
        {
          "name": "last",
          "text": "The end of the range of interest. "
        },
        {
          "name": "comp",
          "text": "The function object to use for comparison. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "comp",
          "type": "Compare",
          "typePlain": "Compare"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::is_sorted_until",
      "refid": "group__predicates_1ga5587ccf7ee81a0f591567a1ae14c967f",
      "returns": [
        "The last iterator in the input range for which it is sorted."
      ],
      "see": [
        "<code>is&#95;sorted</code>",
        "<code>sort</code>",
        "<code>sort&#95;by&#95;key</code>",
        "<code>stable&#95;sort</code>",
        "<code>stable&#95;sort&#95;by&#95;key</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Compare",
          "typePlain": "typename Compare"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a> and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>Compare's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "Compare",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/strict_weak_order\">Strict Weak Ordering</a>."
        }
      ],
      "title": "is_sorted_until",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__predicates.html#function-is-sorted-until",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap",
      "argsString": "(Assignable1 &a, Assignable2 &b)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::swap",
      "deleted": false,
      "details": "<code>swap</code> assigns the contents of <code>a</code> to <code>b</code> and the contents of <code>b</code> to <code>a</code>. This is used as a primitive operation by many other algorithms.\n\n\nThe following code snippet demonstrates how to use <code>swap</code> to swap the contents of two variables.\n\n\n\n```cpp\n#include <thrust/swap.h>\n...\nint x = 1;\nint y = 2;\nthrust::swap(x,h);\n\n// x == 2, y == 1\n```",
      "explicit": false,
      "fullname": "thrust::swap",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 13,
        "file": "thrust/swap.h",
        "line": 62
      },
      "name": "swap",
      "override": false,
      "paramList": [
        {
          "name": "a",
          "text": "The first value of interest. After completion, the value of b will be returned here. "
        },
        {
          "name": "b",
          "text": "The second value of interest. After completion, the value of a will be returned here."
        }
      ],
      "params": [
        {
          "name": "a",
          "type": "Assignable1 &",
          "typePlain": "Assignable1 &"
        },
        {
          "name": "b",
          "type": "Assignable2 &",
          "typePlain": "Assignable2 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap",
      "refid": "group__swap_1ga843afbedc50bd5da1eefd2bc0c17b000",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename Assignable1",
          "typePlain": "typename Assignable1"
        },
        {
          "name": "",
          "type": "typename Assignable2",
          "typePlain": "typename Assignable2"
        }
      ],
      "templateParamsList": [
        {
          "name": "Assignable",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>."
        }
      ],
      "title": "swap",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__swap.html#function-swap",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap-ranges",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator2 thrust::swap_ranges",
      "deleted": false,
      "details": "<code>swap&#95;ranges</code> swaps each of the elements in the range <code>[first1, last1)</code> with the corresponding element in the range <code>[first2, first2 + (last1 - first1))</code>. That is, for each integer <code>n</code> such that <code>0 &lt;= n &lt; (last1 - first1)</code>, it swaps <code>&#42;(first1 + n)</code> and <code>&#42;(first2 + n)</code>. The return value is <code>first2 + (last1 - first1)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>swap&#95;ranges</code> to swap the contents of two <code>thrust::device&#95;vectors</code> using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/swap.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n...\nthrust::device_vector<int> v1(2), v2(2);\nv1[0] = 1;\nv1[1] = 2;\nv2[0] = 3;\nv2[1] = 4;\n\nthrust::swap_ranges(thrust::device, v1.begin(), v1.end(), v2.begin());\n\n// v1[0] == 3, v1[1] == 4, v2[0] == 1, v2[1] == 2\n```",
      "explicit": false,
      "fullname": "thrust::swap_ranges",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 20,
        "file": "thrust/swap.h",
        "line": 126
      },
      "name": "swap_ranges",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first sequence to swap. "
        },
        {
          "name": "last1",
          "text": "One position past the last element of the first sequence to swap. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence to swap. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "last1",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "first2",
          "type": "ForwardIterator2",
          "typePlain": "ForwardIterator2"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>first2</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[first2, first2 + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap_ranges",
      "refid": "group__copying_1gabdc9834367c0e681aa1b5aac3bc02245",
      "returns": [
        "An iterator pointing to one position past the last element of the second sequence to swap."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/swap_ranges\">https://en.cppreference.com/w/cpp/algorithm/swap_ranges</a>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__swap.html\">Swap</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator1",
          "typePlain": "typename ForwardIterator1"
        },
        {
          "name": "",
          "type": "typename ForwardIterator2",
          "typePlain": "typename ForwardIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator1's</code><code>value&#95;type</code> must be convertible to <code>ForwardIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "ForwardIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator2's</code><code>value&#95;type</code> must be convertible to <code>ForwardIterator1's</code><code>value&#95;type</code>."
        }
      ],
      "title": "swap_ranges",
      "type": "__host__ __device__ ForwardIterator2",
      "typePlain": "__host__ __device__ ForwardIterator2",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-swap-ranges",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap-ranges",
      "argsString": "(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator2 thrust::swap_ranges",
      "deleted": false,
      "details": "<code>swap&#95;ranges</code> swaps each of the elements in the range <code>[first1, last1)</code> with the corresponding element in the range <code>[first2, first2 + (last1 - first1))</code>. That is, for each integer <code>n</code> such that <code>0 &lt;= n &lt; (last1 - first1)</code>, it swaps <code>&#42;(first1 + n)</code> and <code>&#42;(first2 + n)</code>. The return value is <code>first2 + (last1 - first1)</code>.\n\n\nThe following code snippet demonstrates how to use <code>swap&#95;ranges</code> to swap the contents of two <code>thrust::device&#95;vectors</code>.\n\n\n\n```cpp\n#include <thrust/swap.h>\n#include <thrust/device_vector.h>\n...\nthrust::device_vector<int> v1(2), v2(2);\nv1[0] = 1;\nv1[1] = 2;\nv2[0] = 3;\nv2[1] = 4;\n\nthrust::swap_ranges(v1.begin(), v1.end(), v2.begin());\n\n// v1[0] == 3, v1[1] == 4, v2[0] == 1, v2[1] == 2\n```",
      "explicit": false,
      "fullname": "thrust::swap_ranges",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 20,
        "file": "thrust/swap.h",
        "line": 174
      },
      "name": "swap_ranges",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first sequence to swap. "
        },
        {
          "name": "last1",
          "text": "One position past the last element of the first sequence to swap. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second sequence to swap. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "last1",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "first2",
          "type": "ForwardIterator2",
          "typePlain": "ForwardIterator2"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>first2</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[first2, first2 + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap_ranges",
      "refid": "group__copying_1ga24337437822d9f7ca85f0c48b9248f6e",
      "returns": [
        "An iterator pointing to one position past the last element of the second sequence to swap."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/swap_ranges\">https://en.cppreference.com/w/cpp/algorithm/swap_ranges</a>",
        "<code><a href=\"{{ site.baseurl }}/api/groups/group__swap.html\">Swap</a></code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator1",
          "typePlain": "typename ForwardIterator1"
        },
        {
          "name": "",
          "type": "typename ForwardIterator2",
          "typePlain": "typename ForwardIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator1's</code><code>value&#95;type</code> must be convertible to <code>ForwardIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "ForwardIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator2's</code><code>value&#95;type</code> must be convertible to <code>ForwardIterator1's</code><code>value&#95;type</code>."
        }
      ],
      "title": "swap_ranges",
      "type": "ForwardIterator2",
      "typePlain": "ForwardIterator2",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-swap-ranges",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-eager-event-type",
      "argsString": "(thrust::cuda::execution_policy< DerivedPolicy > const &) noexcept",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ thrust::cuda::unique_eager_event thrust::unique_eager_event_type",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::unique_eager_event_type",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/system/cuda/future.h",
        "line": 57
      },
      "name": "unique_eager_event_type",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "thrust::cuda::execution_policy< DerivedPolicy > const &",
          "typePlain": "thrust::cuda::execution_policy< DerivedPolicy > const &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_eager_event_type",
      "refid": "system_2cuda_2future_8h_1a0a3f0ef6d31d43957641f297041bd7b3",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        }
      ],
      "title": "unique_eager_event_type",
      "type": "__host__ thrust::cuda::unique_eager_event",
      "typePlain": "__host__ thrust::cuda::unique_eager_event",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-unique-eager-event-type",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-eager-future-type",
      "argsString": "(thrust::cuda::execution_policy< DerivedPolicy > const &) noexcept",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ thrust::cuda::unique_eager_future< T > thrust::unique_eager_future_type",
      "deleted": false,
      "explicit": false,
      "fullname": "thrust::unique_eager_future_type",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/system/cuda/future.h",
        "line": 64
      },
      "name": "unique_eager_future_type",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "thrust::cuda::execution_policy< DerivedPolicy > const &",
          "typePlain": "thrust::cuda::execution_policy< DerivedPolicy > const &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_eager_future_type",
      "refid": "system_2cuda_2future_8h_1af46bac9335972420fe0d039a04a08418",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        }
      ],
      "title": "unique_eager_future_type",
      "type": "__host__ thrust::cuda::unique_eager_future< T >",
      "typePlain": "__host__ thrust::cuda::unique_eager_future< T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#function-unique-eager-future-type",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tabulate",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, UnaryOperation unary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::tabulate",
      "deleted": false,
      "details": "<code>tabulate</code> fills the range <code>[first, last)</code> with the value of a function applied to each element's index.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, <code>tabulate</code> performs the assignment <code>&#42;i = unary&#95;op(i - first)</code>.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>tabulate</code> to generate the first <code>n</code> non-positive integers using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/tabulate.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 10;\nint A[N];\nthrust::tabulate(thrust::host, A, A + 10, thrust::negate<int>());\n// A is now {0, -1, -2, -3, -4, -5, -6, -7, -8, -9}\n```",
      "explicit": false,
      "fullname": "thrust::tabulate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/tabulate.h",
        "line": 75
      },
      "name": "tabulate",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the range. "
        },
        {
          "name": "last",
          "text": "The end of the range. "
        },
        {
          "name": "unary_op",
          "text": "The unary operation to apply."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryOperation",
          "typePlain": "UnaryOperation"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tabulate",
      "refid": "group__transformations_1ga0408227dba108ecd776cf306106c58a3",
      "see": [
        "thrust::fill ",
        "thrust::generate ",
        "thrust::sequence "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryOperation",
          "typePlain": "typename UnaryOperation"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "UnaryOperation",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "tabulate",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-tabulate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tabulate",
      "argsString": "(ForwardIterator first, ForwardIterator last, UnaryOperation unary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::tabulate",
      "deleted": false,
      "details": "<code>tabulate</code> fills the range <code>[first, last)</code> with the value of a function applied to each element's index.\n\nFor each iterator <code>i</code> in the range <code>[first, last)</code>, <code>tabulate</code> performs the assignment <code>&#42;i = unary&#95;op(i - first)</code>.\n\n\nThe following code snippet demonstrates how to use <code>tabulate</code> to generate the first <code>n</code> non-positive integers:\n\n\n\n```cpp\n#include <thrust/tabulate.h>\n#include <thrust/functional.h>\n...\nconst int N = 10;\nint A[N];\nthrust::tabulate(A, A + 10, thrust::negate<int>());\n// A is now {0, -1, -2, -3, -4, -5, -6, -7, -8, -9}\n```",
      "explicit": false,
      "fullname": "thrust::tabulate",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/tabulate.h",
        "line": 115
      },
      "name": "tabulate",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the range. "
        },
        {
          "name": "last",
          "text": "The end of the range. "
        },
        {
          "name": "unary_op",
          "text": "The unary operation to apply."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryOperation",
          "typePlain": "UnaryOperation"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tabulate",
      "refid": "group__transformations_1ga0ddf108cc4d1109addeed3251824f951",
      "see": [
        "thrust::fill ",
        "thrust::generate ",
        "thrust::sequence "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryOperation",
          "typePlain": "typename UnaryOperation"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and if <code>x</code> and <code>y</code> are objects of <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>x + y</code> is defined, and if <code>T</code> is <code>ForwardIterator's</code><code>value&#95;type</code>, then <code>T(0)</code> is defined. "
        },
        {
          "name": "UnaryOperation",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "tabulate",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-tabulate",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, UnaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first</code>, <code>last</code>) the operation <code>op(&#42;i)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform</code> to negate a range in-place using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::negate<int> op;\n\nthrust::transform(thrust::host, data, data + 10, data, op); // in-place transformation\n\n// data is now {5, 0, -2, 3, -2, -4, 0, 1, -2, -8};\n```",
      "explicit": false,
      "fullname": "thrust::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 90
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The transformation operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1ga281b2e453bfa53807eda1d71614fb504",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first</code>, <code>last</code>) the operation <code>op(&#42;i)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint data[10] = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nthrust::negate<int> op;\n\nthrust::transform(data, data + 10, data, op); // in-place transformation\n\n// data is now {5, 0, -2, 3, -2, -4, 0, 1, -2, -8};\n```",
      "explicit": false,
      "fullname": "thrust::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 139
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1gacbd546527729f24f27dc44e34a5b8f73",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first1</code>, <code>last1</code>) and <code>j = first + (i - first1)</code> in the range [<code>first2</code>, <code>last2</code>) the operation <code>op(&#42;i,&#42;j)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform</code> to compute the sum of two ranges using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint input1[6] = {-5,  0,  2,  3,  2,  4};\nint input2[6] = { 3,  6, -2,  1,  2,  3};\nint output[6];\n\nthrust::plus<int> op;\n\nthrust::transform(thrust::host, input1, input1 + 6, input2, output, op);\n\n// output is now {-2,  6,  0,  4,  4,  7};\n```",
      "explicit": false,
      "fullname": "thrust::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 205
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1gacca2dd17ae9de2f7bcbb8da6d6f6fce4",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryFunction op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform",
      "deleted": false,
      "details": "This version of <code>transform</code> applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence. Specifically, for each iterator <code>i</code> in the range [<code>first1</code>, <code>last1</code>) and <code>j = first + (i - first1)</code> in the range [<code>first2</code>, <code>last2</code>) the operation <code>op(&#42;i,&#42;j)</code> is performed and the result is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range [<code>result</code>, <code>result</code> + (<code>last</code> - <code>first</code>) ). The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint input1[6] = {-5,  0,  2,  3,  2,  4};\nint input2[6] = { 3,  6, -2,  1,  2,  3};\nint output[6];\n\nthrust::plus<int> op;\n\nthrust::transform(input1, input1 + 6, input2, output, op);\n\n// output is now {-2,  6,  0,  4,  4,  7};\n```",
      "explicit": false,
      "fullname": "thrust::transform",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform.h",
        "line": 264
      },
      "name": "transform",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform",
      "refid": "group__transformations_1ga68a3ba7d332887f1332ca3bc04453792",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/transform\">https://en.cppreference.com/w/cpp/algorithm/transform</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in the input sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;i)</code> is evaluated. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if</code> to negate the odd-valued elements of a range using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nstruct is_odd\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x % 2;\n  }\n};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\n// negate odd elements\nthrust::transform_if(thrust::host, data, data + 10, data, op, is_odd()); // in-place transformation\n\n// data is now {5, 0, 2, 3, 2, 4, 0, 1, 2, 8};\n```",
      "explicit": false,
      "fullname": "thrust::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 342
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1gaaf162576bd1daef87b80ea82bfbf8558",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(InputIterator first, InputIterator last, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in the input sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;i)</code> is evaluated. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if:</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\n\nstruct is_odd\n{\n  __host__ __device__\n  bool operator()(int x)\n  {\n    return x % 2;\n  }\n};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\n// negate odd elements\nthrust::transform_if(data, data + 10, data, op, is_odd()); // in-place transformation\n\n// data is now {5, 0, 2, 3, 2, 4, 0, 1, 2, 8};\n```",
      "explicit": false,
      "fullname": "thrust::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 412
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga7a231d3ed7e33397e36a20f788a0548c",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first, InputIterator1 last, InputIterator2 stencil, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satisfies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last - first) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\nint stencil[10] = { 1, 0, 1,  0, 1, 0, 1,  0, 1, 0};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(thrust::host, data, data + 10, stencil, data, op, identity); // in-place transformation\n\n// data is now {5, 0, -2, -3, -2,  4, 0, -1, -2,  8};\n```",
      "explicit": false,
      "fullname": "thrust::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 486
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga9db3a1a18f443a8d1bcc4132d8d03e15",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(InputIterator1 first, InputIterator1 last, InputIterator2 stencil, ForwardIterator result, UnaryFunction op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a unary function to each element of an input sequence and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satisfies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first, last)</code> the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last - first) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>op(&#42;i)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last - first) )</code>. Otherwise, <code>op(&#42;i)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if:</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint data[10]    = {-5, 0, 2, -3, 2, 4, 0, -1, 2, 8};\nint stencil[10] = { 1, 0, 1,  0, 1, 0, 1,  0, 1, 0};\n\nthrust::negate<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(data, data + 10, stencil, data, op, identity); // in-place transformation\n\n// data is now {5, 0, -2, -3, -2,  4, 0, -1, -2,  8};\n```",
      "explicit": false,
      "fullname": "thrust::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 553
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "op",
          "text": "The tranformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "stencil",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last - first))</code> shall not overlap the range <code>[result, result + (last - first))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga4bee9c11e0802a939496b1a1dd048244",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>Predicate's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator3 stencil, ForwardIterator result, BinaryFunction binary_op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first1, last1)</code> and <code>j = first2 + (i - first1)</code> in the range <code>[first2, first2 + (last1 - first1) )</code>, the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last1 - first1) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>binary&#95;op(&#42;i,&#42;j)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last1 - first1) )</code>. Otherwise, <code>binary&#95;op(&#42;i,&#42;j)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n...\n\nint input1[6]  = {-5,  0,  2,  3,  2,  4};\nint input2[6]  = { 3,  6, -2,  1,  2,  3};\nint stencil[8] = { 1,  0,  1,  0,  1,  0};\nint output[6];\n\nthrust::plus<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(thrust::host, input1, input1 + 6, input2, stencil, output, op, identity);\n\n// output is now {-2,  0,  0,  3,  4,  4};\n```",
      "explicit": false,
      "fullname": "thrust::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 634
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "binary_op",
          "text": "The transformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga37362347fdbe0d2bfeea1ef9a84a6aeb",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-if",
      "argsString": "(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator3 stencil, ForwardIterator result, BinaryFunction binary_op, Predicate pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::transform_if",
      "deleted": false,
      "details": "This version of <code>transform&#95;if</code> conditionally applies a binary function to each pair of elements from two input sequences and stores the result in the corresponding position in an output sequence if the corresponding position in a stencil sequence satifies a predicate. Otherwise, the corresponding position in the output sequence is not modified.\n\nSpecifically, for each iterator <code>i</code> in the range <code>[first1, last1)</code> and <code>j = first2 + (i - first1)</code> in the range <code>[first2, first2 + (last1 - first1) )</code>, the predicate <code>pred(&#42;s)</code> is evaluated, where <code>s</code> is the corresponding input iterator in the range <code>[stencil, stencil + (last1 - first1) )</code>. If this predicate evaluates to <code>true</code>, the result of <code>binary&#95;op(&#42;i,&#42;j)</code> is assigned to <code>&#42;o</code>, where <code>o</code> is the corresponding output iterator in the range <code>[result, result + (last1 - first1) )</code>. Otherwise, <code>binary&#95;op(&#42;i,&#42;j)</code> is not evaluated and no assignment occurs. The input and output sequences may coincide, resulting in an in-place transformation.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;if:</code>\n\n\n\n```cpp\n#include <thrust/transform.h>\n#include <thrust/functional.h>\n\nint input1[6]  = {-5,  0,  2,  3,  2,  4};\nint input2[6]  = { 3,  6, -2,  1,  2,  3};\nint stencil[8] = { 1,  0,  1,  0,  1,  0};\nint output[6];\n\nthrust::plus<int> op;\nthrust::identity<int> identity;\n\nthrust::transform_if(input1, input1 + 6, input2, stencil, output, op, identity);\n\n// output is now {-2,  0,  0,  3,  4,  4};\n```",
      "explicit": false,
      "fullname": "thrust::transform_if",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/transform.h",
        "line": 708
      },
      "name": "transform_if",
      "override": false,
      "paramList": [
        {
          "name": "first1",
          "text": "The beginning of the first input sequence. "
        },
        {
          "name": "last1",
          "text": "The end of the first input sequence. "
        },
        {
          "name": "first2",
          "text": "The beginning of the second input sequence. "
        },
        {
          "name": "stencil",
          "text": "The beginning of the stencil sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "binary_op",
          "text": "The transformation operation. "
        },
        {
          "name": "pred",
          "text": "The predicate operation. "
        }
      ],
      "params": [
        {
          "name": "first1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "last1",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "first2",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "stencil",
          "type": "InputIterator3",
          "typePlain": "InputIterator3"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        },
        {
          "name": "pred",
          "type": "Predicate",
          "typePlain": "Predicate"
        }
      ],
      "pre": [
        "<code>first1</code> may equal <code>result</code>, but the range <code>[first1, last1)</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>first2</code> may equal <code>result</code>, but the range <code>[first2, first2 + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise. ",
        "<code>stencil</code> may equal <code>result</code>, but the range <code>[stencil, stencil + (last1 - first1))</code> shall not overlap the range <code>[result, result + (last1 - first1))</code> otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_if",
      "refid": "group__transformations_1ga4cace41496814acafa048ff5e14034d1",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "thrust::transform "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename InputIterator3",
          "typePlain": "typename InputIterator3"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        },
        {
          "name": "",
          "type": "typename Predicate",
          "typePlain": "typename Predicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code>. "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>BinaryFunction's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "Predicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/predicate\">Predicate</a>."
        }
      ],
      "title": "transform_if",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformations.html#function-transform-if",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-reduce",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, UnaryFunction unary_op, OutputType init, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputType thrust::transform_reduce",
      "deleted": false,
      "details": "<code>transform&#95;reduce</code> fuses the <code>transform</code> and <code>reduce</code> operations. <code>transform&#95;reduce</code> is equivalent to performing a transformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing <code>reduce</code> on the transformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required.\n\n<code>transform&#95;reduce</code> performs a reduction on the transformation of the sequence <code>[first, last)</code> according to <code>unary&#95;op</code>. Specifically, <code>unary&#95;op</code> is applied to each element of the sequence and then the result is reduced to a single value with <code>binary&#95;op</code> using the initial value <code>init</code>. Note that the transformation <code>unary&#95;op</code> is not applied to the initial value <code>init</code>. The order of reduction is not specified, so <code>binary&#95;op</code> must be both commutative and associative.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;reduce</code> to compute the maximum value of the absolute value of the elements of a range using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform_reduce.h>\n#include <thrust/functional.h>\n#include <thrust/execution_policy.h>\n\ntemplate<typename T>\nstruct absolute_value : public unary_function<T,T>\n{\n  __host__ __device__ T operator()(const T &x) const\n  {\n    return x < T(0) ? -x : x;\n  }\n};\n\n...\n\nint data[6] = {-1, 0, -2, -2, 1, -3};\nint result = thrust::transform_reduce(thrust::host,\n                                      data, data + 6,\n                                      absolute_value<int>(),\n                                      0,\n                                      thrust::maximum<int>());\n// result == 3\n```",
      "explicit": false,
      "fullname": "thrust::transform_reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/transform_reduce.h",
        "line": 109
      },
      "name": "transform_reduce",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function to apply to each element of the input sequence. "
        },
        {
          "name": "init",
          "text": "The result is initialized to this value. "
        },
        {
          "name": "binary_op",
          "text": "The reduction operation. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "init",
          "type": "OutputType",
          "typePlain": "OutputType"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_reduce",
      "refid": "group__transformed__reductions_1gaba339b23d412c93369720f2df77914ed",
      "returns": [
        "The result of the transformed reduction."
      ],
      "see": [
        "<code>transform</code>",
        "<code>reduce</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename OutputType",
          "typePlain": "typename OutputType"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a>, and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputType</code>. "
        },
        {
          "name": "OutputType",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputType</code>."
        }
      ],
      "title": "transform_reduce",
      "type": "__host__ __device__ OutputType",
      "typePlain": "__host__ __device__ OutputType",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__reductions.html#function-transform-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-reduce",
      "argsString": "(InputIterator first, InputIterator last, UnaryFunction unary_op, OutputType init, BinaryFunction binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputType thrust::transform_reduce",
      "deleted": false,
      "details": "<code>transform&#95;reduce</code> fuses the <code>transform</code> and <code>reduce</code> operations. <code>transform&#95;reduce</code> is equivalent to performing a transformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing <code>reduce</code> on the transformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required.\n\n<code>transform&#95;reduce</code> performs a reduction on the transformation of the sequence <code>[first, last)</code> according to <code>unary&#95;op</code>. Specifically, <code>unary&#95;op</code> is applied to each element of the sequence and then the result is reduced to a single value with <code>binary&#95;op</code> using the initial value <code>init</code>. Note that the transformation <code>unary&#95;op</code> is not applied to the initial value <code>init</code>. The order of reduction is not specified, so <code>binary&#95;op</code> must be both commutative and associative.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;reduce</code> to compute the maximum value of the absolute value of the elements of a range.\n\n\n\n```cpp\n#include <thrust/transform_reduce.h>\n#include <thrust/functional.h>\n\ntemplate<typename T>\nstruct absolute_value : public unary_function<T,T>\n{\n  __host__ __device__ T operator()(const T &x) const\n  {\n    return x < T(0) ? -x : x;\n  }\n};\n\n...\n\nint data[6] = {-1, 0, -2, -2, 1, -3};\nint result = thrust::transform_reduce(data, data + 6,\n                                      absolute_value<int>(),\n                                      0,\n                                      thrust::maximum<int>());\n// result == 3\n```",
      "explicit": false,
      "fullname": "thrust::transform_reduce",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "thrust/transform_reduce.h",
        "line": 181
      },
      "name": "transform_reduce",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the sequence. "
        },
        {
          "name": "last",
          "text": "The end of the sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function to apply to each element of the input sequence. "
        },
        {
          "name": "init",
          "text": "The result is initialized to this value. "
        },
        {
          "name": "binary_op",
          "text": "The reduction operation. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "init",
          "type": "OutputType",
          "typePlain": "OutputType"
        },
        {
          "name": "binary_op",
          "type": "BinaryFunction",
          "typePlain": "BinaryFunction"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_reduce",
      "refid": "group__transformed__reductions_1ga0d4232a9685675f488c3cc847111e48d",
      "returns": [
        "The result of the transformed reduction."
      ],
      "see": [
        "<code>transform</code>",
        "<code>reduce</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename OutputType",
          "typePlain": "typename OutputType"
        },
        {
          "name": "",
          "type": "typename BinaryFunction",
          "typePlain": "typename BinaryFunction"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>UnaryFunction's</code><code>argument&#95;type</code>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a>, and <code>UnaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputType</code>. "
        },
        {
          "name": "OutputType",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/CopyAssignable\">Assignable</a>, and is convertible to <code>BinaryFunction's</code><code>first&#95;argument&#95;type</code> and <code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a>, and <code>BinaryFunction's</code><code>result&#95;type</code> is convertible to <code>OutputType</code>."
        }
      ],
      "title": "transform_reduce",
      "type": "OutputType",
      "typePlain": "OutputType",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__reductions.html#function-transform-reduce",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-inclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform_inclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;inclusive&#95;scan</code> fuses the <code>transform</code> and <code>inclusive&#95;scan</code> operations. <code>transform&#95;inclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>inclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;inclusive&#95;scan</code>, <code>unary&#95;op(&#42;first)</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(unary&#95;op(&#42;first), unary&#95;op(&#42;(first + 1)))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;inclusive&#95;scan</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_inclusive_scan(thrust::host, data, data + 6, data, unary_op, binary_op); // in-place scan\n\n// data is now {-1, -1, -3, -5, -6, -9}\n```",
      "explicit": false,
      "fullname": "thrust::transform_inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 105
      },
      "name": "transform_inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_inclusive_scan",
      "refid": "group__transformed__prefixsums_1ga88fdc1014d4c4a23995d1730e24ef919",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>inclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_inclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-inclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform_inclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;inclusive&#95;scan</code> fuses the <code>transform</code> and <code>inclusive&#95;scan</code> operations. <code>transform&#95;inclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>inclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;inclusive&#95;scan</code>, <code>unary&#95;op(&#42;first)</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(unary&#95;op(&#42;first), unary&#95;op(&#42;(first + 1)))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;inclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_inclusive_scan(data, data + 6, data, unary_op, binary_op); // in-place scan\n\n// data is now {-1, -1, -3, -5, -6, -9}\n```",
      "explicit": false,
      "fullname": "thrust::transform_inclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 166
      },
      "name": "transform_inclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_inclusive_scan",
      "refid": "group__transformed__prefixsums_1ga43b2cc02bd9eb63380268d37d53f8d89",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>inclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_inclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-inclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-exclusive-scan",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, T init, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::transform_exclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;exclusive&#95;scan</code> fuses the <code>transform</code> and <code>exclusive&#95;scan</code> operations. <code>transform&#95;exclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>exclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;exclusive&#95;scan</code>, <code>init</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(init, unary&#95;op(&#42;first))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;exclusive&#95;scan</code> using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n#include <thrust/execution_policy.h>\n...\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_exclusive_scan(thrust::host, data, data + 6, data, unary_op, 4, binary_op); // in-place scan\n\n// data is now {4, 3, 3, 1, -1, -2}\n```",
      "explicit": false,
      "fullname": "thrust::transform_exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 238
      },
      "name": "transform_exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value of the <code>exclusive&#95;scan</code>"
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_exclusive_scan",
      "refid": "group__transformed__prefixsums_1gaf67d66dbbff500349ff56671b9ee9c4b",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>exclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_exclusive_scan",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-transform-exclusive-scan",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction unary_op, T init, AssociativeOperator binary_op)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::transform_exclusive_scan",
      "deleted": false,
      "details": "<code>transform&#95;exclusive&#95;scan</code> fuses the <code>transform</code> and <code>exclusive&#95;scan</code> operations. <code>transform&#95;exclusive&#95;scan</code> is equivalent to performing a tranformation defined by <code>unary&#95;op</code> into a temporary sequence and then performing an <code>exclusive&#95;scan</code> on the tranformed sequence. In most cases, fusing these two operations together is more efficient, since fewer memory reads and writes are required. In <code>transform&#95;exclusive&#95;scan</code>, <code>init</code> is assigned to <code>&#42;result</code> and the result of <code>binary&#95;op(init, unary&#95;op(&#42;first))</code> is assigned to <code>&#42;(result + 1)</code>, and so on. The transform scan operation is permitted to be in-place.\n\n\nThe following code snippet demonstrates how to use <code>transform&#95;exclusive&#95;scan</code>\n\n\n\n```cpp\n#include <thrust/transform_scan.h>\n\nint data[6] = {1, 0, 2, 2, 1, 3};\n\nthrust::negate<int> unary_op;\nthrust::plus<int> binary_op;\n\nthrust::transform_exclusive_scan(data, data + 6, data, unary_op, 4, binary_op); // in-place scan\n\n// data is now {4, 3, 3, 1, -1, -2}\n```",
      "explicit": false,
      "fullname": "thrust::transform_exclusive_scan",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 18,
        "file": "thrust/transform_scan.h",
        "line": 303
      },
      "name": "transform_exclusive_scan",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input sequence. "
        },
        {
          "name": "last",
          "text": "The end of the input sequence. "
        },
        {
          "name": "result",
          "text": "The beginning of the output sequence. "
        },
        {
          "name": "unary_op",
          "text": "The function used to tranform the input sequence. "
        },
        {
          "name": "init",
          "text": "The initial value of the <code>exclusive&#95;scan</code>"
        },
        {
          "name": "binary_op",
          "text": "The associatve operator used to 'sum' transformed values. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "unary_op",
          "type": "UnaryFunction",
          "typePlain": "UnaryFunction"
        },
        {
          "name": "init",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "binary_op",
          "type": "AssociativeOperator",
          "typePlain": "AssociativeOperator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::transform_exclusive_scan",
      "refid": "group__transformed__prefixsums_1ga2a7806bd3beb7530adefab85d3e3c587",
      "returns": [
        "The end of the output sequence."
      ],
      "see": [
        "<code>transform</code>",
        "<code>exclusive&#95;scan</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename UnaryFunction",
          "typePlain": "typename UnaryFunction"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename AssociativeOperator",
          "typePlain": "typename AssociativeOperator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a> and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>unary&#95;op's</code> input type. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a>. "
        },
        {
          "name": "UnaryFunction",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/unary_function\">Unary Function</a> and accepts inputs of <code>InputIterator's</code><code>value&#95;type</code>. <code>UnaryFunction's</code> result_type is convertable to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "T",
          "text": "is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "AssociativeOperator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/utility/functional/binary_function\">Binary Function</a> and <code>AssociativeOperator's</code><code>result&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "transform_exclusive_scan",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__transformed__prefixsums.html#function-transform-exclusive-scan",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-get",
      "argsString": "(detail::cons< HT, TT > &t)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ access_traits< typenametuple_element< N, detail::cons< HT, TT > >::type >::non_const_type thrust::get",
      "deleted": false,
      "details": "The <code>get</code> function returns a reference to a <code>tuple</code> element of interest.\n\n\nThe following code snippet demonstrates how to use <code>get</code> to print the value of a <code>tuple</code> element.\n\n\n\n```cpp\n#include <thrust/tuple.h>\n#include <iostream>\n...\nthrust::tuple<int, const char *> t(13, \"thrust\");\n\nstd::cout << \"The 1st value of t is \" << thrust::get<0>(t) << std::endl;\n```",
      "explicit": false,
      "fullname": "thrust::get",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/tuple.h",
        "line": 107
      },
      "name": "get",
      "override": false,
      "paramList": [
        {
          "name": "t",
          "text": "A reference to a <code>tuple</code> of interest. "
        }
      ],
      "params": [
        {
          "name": "t",
          "type": "detail::cons< HT, TT > &",
          "typePlain": "detail::cons< HT, TT > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::get",
      "refid": "group__tuple_1gac48449da61b5067a2feb2bc138c3917f",
      "returns": [
        "A reference to <code>t's</code><code>N</code>th element."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>",
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">tuple</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "N",
          "type": "int",
          "typePlain": "int"
        },
        {
          "name": "",
          "type": "class HT",
          "typePlain": "class HT"
        },
        {
          "name": "",
          "type": "class TT",
          "typePlain": "class TT"
        }
      ],
      "templateParamsList": [
        {
          "name": "N",
          "text": "The index of the element of interest."
        }
      ],
      "title": "get",
      "type": "__host__ __device__ access_traits< typenametuple_element< N, detail::cons< HT, TT > >::type >::non_const_type",
      "typePlain": "__host__ __device__ access_traits< typenametuple_element< N, detail::cons< HT, TT > >::type >::non_const_type",
      "url": "{{ site.baseurl }}/api/groups/group__tuple.html#function-get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-get",
      "argsString": "(const detail::cons< HT, TT > &t)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ access_traits< typenametuple_element< N, detail::cons< HT, TT > >::type >::const_type thrust::get",
      "deleted": false,
      "details": "The <code>get</code> function returns a <code>const</code> reference to a <code>tuple</code> element of interest.\n\n\nThe following code snippet demonstrates how to use <code>get</code> to print the value of a <code>tuple</code> element.\n\n\n\n```cpp\n#include <thrust/tuple.h>\n#include <iostream>\n...\nthrust::tuple<int, const char *> t(13, \"thrust\");\n\nstd::cout << \"The 1st value of t is \" << thrust::get<0>(t) << std::endl;\n```",
      "explicit": false,
      "fullname": "thrust::get",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 1,
        "file": "thrust/tuple.h",
        "line": 138
      },
      "name": "get",
      "override": false,
      "paramList": [
        {
          "name": "t",
          "text": "A reference to a <code>tuple</code> of interest. "
        }
      ],
      "params": [
        {
          "name": "t",
          "type": "const detail::cons< HT, TT > &",
          "typePlain": "const detail::cons< HT, TT > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::get",
      "refid": "group__tuple_1ga07538bc1313d4bd564d6c06084a8ecbf",
      "returns": [
        "A <code>const</code> reference to <code>t's</code><code>N</code>th element."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">pair</a>",
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">tuple</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "N",
          "type": "int",
          "typePlain": "int"
        },
        {
          "name": "",
          "type": "class HT",
          "typePlain": "class HT"
        },
        {
          "name": "",
          "type": "class TT",
          "typePlain": "class TT"
        }
      ],
      "templateParamsList": [
        {
          "name": "N",
          "text": "The index of the element of interest."
        }
      ],
      "title": "get",
      "type": "__host__ __device__ access_traits< typenametuple_element< N, detail::cons< HT, TT > >::type >::const_type",
      "typePlain": "__host__ __device__ access_traits< typenametuple_element< N, detail::cons< HT, TT > >::type >::const_type",
      "url": "{{ site.baseurl }}/api/groups/group__tuple.html#function-get",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-tuple",
      "argsString": "(const T0 &t0)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ detail::make_tuple_mapper< T0 >::type thrust::make_tuple",
      "deleted": false,
      "details": "This version of <code>make&#95;tuple</code> creates a new <code>tuple</code> object from a single object.",
      "explicit": false,
      "fullname": "thrust::make_tuple",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/tuple.h",
        "line": 414
      },
      "name": "make_tuple",
      "override": false,
      "paramList": [
        {
          "name": "t0",
          "text": "The object to copy from. "
        }
      ],
      "params": [
        {
          "name": "t0",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_tuple",
      "refid": "group__tuple_1gacfc5034da62bff5809d499d54639f759",
      "returns": [
        "A <code>tuple</code> object with a single member which is a copy of <code>t0</code>. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class T0",
          "typePlain": "class T0"
        }
      ],
      "title": "make_tuple",
      "type": "__host__ __device__ detail::make_tuple_mapper< T0 >::type",
      "typePlain": "__host__ __device__ detail::make_tuple_mapper< T0 >::type",
      "url": "{{ site.baseurl }}/api/groups/group__tuple.html#function-make-tuple",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-tuple",
      "argsString": "(const T0 &t0, const T1 &t1)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ detail::make_tuple_mapper< T0, T1 >::type thrust::make_tuple",
      "deleted": false,
      "details": "This version of <code>make&#95;tuple</code> creates a new <code>tuple</code> object from two objects.",
      "explicit": false,
      "fullname": "thrust::make_tuple",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/tuple.h",
        "line": 430
      },
      "name": "make_tuple",
      "note": [
        "<code>make&#95;tuple</code> has ten variants, the rest of which are omitted here for brevity. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "t0",
          "text": "The first object to copy from. "
        },
        {
          "name": "t1",
          "text": "The second object to copy from. "
        }
      ],
      "params": [
        {
          "name": "t0",
          "type": "const T0 &",
          "typePlain": "const T0 &"
        },
        {
          "name": "t1",
          "type": "const T1 &",
          "typePlain": "const T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_tuple",
      "refid": "group__tuple_1ga42f3a8f78456baaf51bd3bae6664d28f",
      "returns": [
        "A <code>tuple</code> object with two members which are copies of <code>t0</code> and <code>t1</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "class T0",
          "typePlain": "class T0"
        },
        {
          "name": "",
          "type": "class T1",
          "typePlain": "class T1"
        }
      ],
      "title": "make_tuple",
      "type": "__host__ __device__ detail::make_tuple_mapper< T0, T1 >::type",
      "typePlain": "__host__ __device__ detail::make_tuple_mapper< T0, T1 >::type",
      "url": "{{ site.baseurl }}/api/groups/group__tuple.html#function-make-tuple",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tie",
      "argsString": "(T0 &t0)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ tuple< T0 & > thrust::tie",
      "deleted": false,
      "details": "This version of <code>tie</code> creates a new <code>tuple</code> whose single element is a reference which refers to this function's argument.",
      "explicit": false,
      "fullname": "thrust::tie",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 7,
        "file": "thrust/tuple.h",
        "line": 440
      },
      "name": "tie",
      "override": false,
      "paramList": [
        {
          "name": "t0",
          "text": "The object to reference. "
        }
      ],
      "params": [
        {
          "name": "t0",
          "type": "T0 &",
          "typePlain": "T0 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tie",
      "refid": "group__tuple_1gad566b7568ed9a302cf73afaf64284c62",
      "returns": [
        "A <code>tuple</code> object with one member which is a reference to <code>t0</code>. "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        }
      ],
      "title": "tie",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">tuple</a>< T0 & >",
      "typePlain": "__host__ __device__ tuple< T0 & >",
      "url": "{{ site.baseurl }}/api/groups/group__tuple.html#function-tie",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-tie",
      "argsString": "(T0 &t0, T1 &t1)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ tuple< T0 &, T1 & > thrust::tie",
      "deleted": false,
      "details": "This version of <code>tie</code> creates a new <code>tuple</code> of references object which refers to this function's arguments.",
      "explicit": false,
      "fullname": "thrust::tie",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 7,
        "file": "thrust/tuple.h",
        "line": 455
      },
      "name": "tie",
      "note": [
        "<code>tie</code> has ten variants, the rest of which are omitted here for brevity. "
      ],
      "override": false,
      "paramList": [
        {
          "name": "t0",
          "text": "The first object to reference. "
        },
        {
          "name": "t1",
          "text": "The second object to reference. "
        }
      ],
      "params": [
        {
          "name": "t0",
          "type": "T0 &",
          "typePlain": "T0 &"
        },
        {
          "name": "t1",
          "type": "T1 &",
          "typePlain": "T1 &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::tie",
      "refid": "group__tuple_1gaae469d53a3e3825d8ad3d08fdb09de95",
      "returns": [
        "A <code>tuple</code> object with two members which are references to <code>t0</code> and <code>t1</code>."
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        }
      ],
      "title": "tie",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">tuple</a>< T0 &, T1 & >",
      "typePlain": "__host__ __device__ tuple< T0 &, T1 & >",
      "url": "{{ site.baseurl }}/api/groups/group__tuple.html#function-tie",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-swap",
      "argsString": "(tuple< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 > &x, tuple< U0, U1, U2, U3, U4, U5, U6, U7, U8, U9 > &y)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::swap",
      "deleted": false,
      "details": "<code>swap</code> swaps the contents of two <code>tuple</code>s.",
      "explicit": false,
      "fullname": "thrust::swap",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 6,
        "file": "thrust/tuple.h",
        "line": 467
      },
      "name": "swap",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The first <code>tuple</code> to swap. "
        },
        {
          "name": "y",
          "text": "The second <code>tuple</code> to swap. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">tuple</a>< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 > &",
          "typePlain": "tuple< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9 > &"
        },
        {
          "name": "y",
          "type": "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1tuple.html\">tuple</a>< U0, U1, U2, U3, U4, U5, U6, U7, U8, U9 > &",
          "typePlain": "tuple< U0, U1, U2, U3, U4, U5, U6, U7, U8, U9 > &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::swap",
      "refid": "group__tuple_1gab9893725c2bd9ae1971e7eb8ef061792",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T0",
          "typePlain": "typename T0"
        },
        {
          "name": "",
          "type": "typename T1",
          "typePlain": "typename T1"
        },
        {
          "name": "",
          "type": "typename T2",
          "typePlain": "typename T2"
        },
        {
          "name": "",
          "type": "typename T3",
          "typePlain": "typename T3"
        },
        {
          "name": "",
          "type": "typename T4",
          "typePlain": "typename T4"
        },
        {
          "name": "",
          "type": "typename T5",
          "typePlain": "typename T5"
        },
        {
          "name": "",
          "type": "typename T6",
          "typePlain": "typename T6"
        },
        {
          "name": "",
          "type": "typename T7",
          "typePlain": "typename T7"
        },
        {
          "name": "",
          "type": "typename T8",
          "typePlain": "typename T8"
        },
        {
          "name": "",
          "type": "typename T9",
          "typePlain": "typename T9"
        },
        {
          "name": "",
          "type": "typename U0",
          "typePlain": "typename U0"
        },
        {
          "name": "",
          "type": "typename U1",
          "typePlain": "typename U1"
        },
        {
          "name": "",
          "type": "typename U2",
          "typePlain": "typename U2"
        },
        {
          "name": "",
          "type": "typename U3",
          "typePlain": "typename U3"
        },
        {
          "name": "",
          "type": "typename U4",
          "typePlain": "typename U4"
        },
        {
          "name": "",
          "type": "typename U5",
          "typePlain": "typename U5"
        },
        {
          "name": "",
          "type": "typename U6",
          "typePlain": "typename U6"
        },
        {
          "name": "",
          "type": "typename U7",
          "typePlain": "typename U7"
        },
        {
          "name": "",
          "type": "typename U8",
          "typePlain": "typename U8"
        },
        {
          "name": "",
          "type": "typename U9",
          "typePlain": "typename U9"
        }
      ],
      "title": "swap",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__tuple.html#function-swap",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, ForwardIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::uninitialized_copy",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[result, result + (last - first))</code> points to uninitialized memory, then <code>uninitialized&#95;copy</code> creates a copy of <code>[first, last)</code> in that range. That is, for each iterator <code>i</code> in the input, <code>uninitialized&#95;copy</code> creates a copy of <code>&#42;i</code> in the location pointed to by the corresponding iterator in the output range by <code>ForwardIterator's</code><code>value&#95;type's</code> copy constructor with *i as its argument.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;copy</code> to initialize a range of uninitialized memory using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/uninitialized_copy.h>\n#include <thrust/device_malloc.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_vector<Int> input(N, val);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_copy(thrust::device, input.begin(), input.end(), array);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/uninitialized_copy.h",
        "line": 96
      },
      "name": "uninitialized_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the input range to copy from. "
        },
        {
          "name": "last",
          "text": "The last element of the input range to copy from. "
        },
        {
          "name": "result",
          "text": "The first element of the output range to copy to. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_copy",
      "refid": "group__copying_1ga3e4b76ea19fd71cc22906f094953807c",
      "returns": [
        "An iterator pointing to the last element of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_copy\">https://en.cppreference.com/w/cpp/memory/uninitialized_copy</a>",
        "<code>copy</code>",
        "<code>uninitialized&#95;fill</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument whose type is <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "uninitialized_copy",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-uninitialized-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-copy",
      "argsString": "(InputIterator first, InputIterator last, ForwardIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::uninitialized_copy",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[result, result + (last - first))</code> points to uninitialized memory, then <code>uninitialized&#95;copy</code> creates a copy of <code>[first, last)</code> in that range. That is, for each iterator <code>i</code> in the input, <code>uninitialized&#95;copy</code> creates a copy of <code>&#42;i</code> in the location pointed to by the corresponding iterator in the output range by <code>ForwardIterator's</code><code>value&#95;type's</code> copy constructor with *i as its argument.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;copy</code> to initialize a range of uninitialized memory.\n\n\n\n```cpp\n#include <thrust/uninitialized_copy.h>\n#include <thrust/device_malloc.h>\n#include <thrust/device_vector.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_vector<Int> input(N, val);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_copy(input.begin(), input.end(), array);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/uninitialized_copy.h",
        "line": 157
      },
      "name": "uninitialized_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the input range to copy from. "
        },
        {
          "name": "last",
          "text": "The last element of the input range to copy from. "
        },
        {
          "name": "result",
          "text": "The first element of the output range to copy to. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_copy",
      "refid": "group__copying_1ga50ecdff4f2b8c7606f837e1cfeb70f24",
      "returns": [
        "An iterator pointing to the last element of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_copy\">https://en.cppreference.com/w/cpp/memory/uninitialized_copy</a>",
        "<code>copy</code>",
        "<code>uninitialized&#95;fill</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument whose type is <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "uninitialized_copy",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-uninitialized-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-copy-n",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, Size n, ForwardIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::uninitialized_copy_n",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[result, result + n)</code> points to uninitialized memory, then <code>uninitialized&#95;copy&#95;n</code> creates a copy of <code>[first, first + n)</code> in that range. That is, for each iterator <code>i</code> in the input, <code>uninitialized&#95;copy&#95;n</code> creates a copy of <code>&#42;i</code> in the location pointed to by the corresponding iterator in the output range by <code>InputIterator's</code><code>value&#95;type's</code> copy constructor with *i as its argument.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;copy</code> to initialize a range of uninitialized memory using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/uninitialized_copy.h>\n#include <thrust/device_malloc.h>\n#include <thrust/device_vector.h>\n#include <thrust/execution_policy.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_vector<Int> input(N, val);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_copy_n(thrust::device, input.begin(), N, array);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_copy_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/uninitialized_copy.h",
        "line": 226
      },
      "name": "uninitialized_copy_n",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the input range to copy from. "
        },
        {
          "name": "n",
          "text": "The number of elements to copy. "
        },
        {
          "name": "result",
          "text": "The first element of the output range to copy to. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, first + n)</code> and the range <code>[result, result + n)</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_copy_n",
      "refid": "group__copying_1ga3d4e850ab7bb9a11c47d171137da9d69",
      "returns": [
        "An iterator pointing to the last element of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_copy\">https://en.cppreference.com/w/cpp/memory/uninitialized_copy</a>",
        "<code>uninitialized&#95;copy</code>",
        "<code>copy</code>",
        "<code>uninitialized&#95;fill</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Size",
          "text": "is an integral type. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument whose type is <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "uninitialized_copy_n",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-uninitialized-copy-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-copy-n",
      "argsString": "(InputIterator first, Size n, ForwardIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::uninitialized_copy_n",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[result, result + n)</code> points to uninitialized memory, then <code>uninitialized&#95;copy&#95;n</code> creates a copy of <code>[first, first + n)</code> in that range. That is, for each iterator <code>i</code> in the input, <code>uninitialized&#95;copy&#95;n</code> creates a copy of <code>&#42;i</code> in the location pointed to by the corresponding iterator in the output range by <code>InputIterator's</code><code>value&#95;type's</code> copy constructor with *i as its argument.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;copy</code> to initialize a range of uninitialized memory.\n\n\n\n```cpp\n#include <thrust/uninitialized_copy.h>\n#include <thrust/device_malloc.h>\n#include <thrust/device_vector.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_vector<Int> input(N, val);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_copy_n(input.begin(), N, array);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_copy_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/uninitialized_copy.h",
        "line": 289
      },
      "name": "uninitialized_copy_n",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the input range to copy from. "
        },
        {
          "name": "n",
          "text": "The number of elements to copy. "
        },
        {
          "name": "result",
          "text": "The first element of the output range to copy to. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "result",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pre": [
        "<code>first</code> may equal <code>result</code>, but the range <code>[first, first + n)</code> and the range <code>[result, result + n)</code> shall not overlap otherwise."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_copy_n",
      "refid": "group__copying_1gabe36cff9b0dcf6a52869a725379eb726",
      "returns": [
        "An iterator pointing to the last element of the output range."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_copy\">https://en.cppreference.com/w/cpp/memory/uninitialized_copy</a>",
        "<code>uninitialized&#95;copy</code>",
        "<code>copy</code>",
        "<code>uninitialized&#95;fill</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>. "
        },
        {
          "name": "Size",
          "text": "is an integral type. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument whose type is <code>InputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "uninitialized_copy_n",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__copying.html#function-uninitialized-copy-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-fill",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, const T &x)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ void thrust::uninitialized_fill",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[first, last)</code> points to uninitialized memory, then <code>uninitialized&#95;fill</code> creates copies of <code>x</code> in that range. That is, for each iterator <code>i</code> in the range <code>[first, last)</code>, <code>uninitialized&#95;fill</code> creates a copy of <code>x</code> in the location pointed to <code>i</code> by calling <code>ForwardIterator's</code><code>value&#95;type's</code> copy constructor.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;fill</code> to initialize a range of uninitialized memory using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/uninitialized_fill.h>\n#include <thrust/device_malloc.h>\n#include <thrust/execution_policy.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_fill(thrust::device, array, array + N, val);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_fill",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/uninitialized_fill.h",
        "line": 90
      },
      "name": "uninitialized_fill",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the range of interest. "
        },
        {
          "name": "last",
          "text": "The last element of the range of interest. "
        },
        {
          "name": "x",
          "text": "The value to use as the exemplar of the copy constructor."
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "x",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_fill",
      "refid": "group__filling_1ga7afcf37f1bd2799befe7e93aae7b43a1",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_fill\">https://en.cppreference.com/w/cpp/memory/uninitialized_fill</a>",
        "<code>uninitialized&#95;fill&#95;n</code>",
        "<code>fill</code>",
        "<code>uninitialized&#95;copy</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument of type <code>T</code>."
        }
      ],
      "title": "uninitialized_fill",
      "type": "__host__ __device__ void",
      "typePlain": "__host__ __device__ void",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-uninitialized-fill",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-fill",
      "argsString": "(ForwardIterator first, ForwardIterator last, const T &x)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void thrust::uninitialized_fill",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[first, last)</code> points to uninitialized memory, then <code>uninitialized&#95;fill</code> creates copies of <code>x</code> in that range. That is, for each iterator <code>i</code> in the range <code>[first, last)</code>, <code>uninitialized&#95;fill</code> creates a copy of <code>x</code> in the location pointed to <code>i</code> by calling <code>ForwardIterator's</code><code>value&#95;type's</code> copy constructor.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;fill</code> to initialize a range of uninitialized memory.\n\n\n\n```cpp\n#include <thrust/uninitialized_fill.h>\n#include <thrust/device_malloc.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_fill(array, array + N, val);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_fill",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 8,
        "file": "thrust/uninitialized_fill.h",
        "line": 145
      },
      "name": "uninitialized_fill",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the range of interest. "
        },
        {
          "name": "last",
          "text": "The last element of the range of interest. "
        },
        {
          "name": "x",
          "text": "The value to use as the exemplar of the copy constructor."
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "x",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_fill",
      "refid": "group__filling_1ga5037eb05758b347f7b376f50b78f187e",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_fill\">https://en.cppreference.com/w/cpp/memory/uninitialized_fill</a>",
        "<code>uninitialized&#95;fill&#95;n</code>",
        "<code>fill</code>",
        "<code>uninitialized&#95;copy</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument of type <code>T</code>."
        }
      ],
      "title": "uninitialized_fill",
      "type": "void",
      "typePlain": "void",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-uninitialized-fill",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-fill-n",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, Size n, const T &x)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::uninitialized_fill_n",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[first, first+n)</code> points to uninitialized memory, then <code>uninitialized&#95;fill</code> creates copies of <code>x</code> in that range. That is, for each iterator <code>i</code> in the range <code>[first, first+n)</code>, <code>uninitialized&#95;fill</code> creates a copy of <code>x</code> in the location pointed to <code>i</code> by calling <code>ForwardIterator's</code><code>value&#95;type's</code> copy constructor.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;fill</code> to initialize a range of uninitialized memory using the <code>thrust::device</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/uninitialized_fill.h>\n#include <thrust/device_malloc.h>\n#include <thrust/execution_policy.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_fill_n(thrust::device, array, N, val);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_fill_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/uninitialized_fill.h",
        "line": 206
      },
      "name": "uninitialized_fill_n",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The first element of the range of interest. "
        },
        {
          "name": "n",
          "text": "The size of the range of interest. "
        },
        {
          "name": "x",
          "text": "The value to use as the exemplar of the copy constructor. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "x",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_fill_n",
      "refid": "group__filling_1ga65fd6694fb8020b83e652e34c479f90e",
      "returns": [
        "<code>first+n</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_fill\">https://en.cppreference.com/w/cpp/memory/uninitialized_fill</a>",
        "<code>uninitialized&#95;fill</code>",
        "<code>fill</code>",
        "<code>uninitialized&#95;copy&#95;n</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument of type <code>T</code>."
        }
      ],
      "title": "uninitialized_fill_n",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-uninitialized-fill-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-uninitialized-fill-n",
      "argsString": "(ForwardIterator first, Size n, const T &x)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::uninitialized_fill_n",
      "deleted": false,
      "details": "In <code>thrust</code>, the function <code>thrust::device&#95;new</code> allocates memory for an object and then creates an object at that location by calling a constructor. Occasionally, however, it is useful to separate those two operations. If each iterator in the range <code>[first, first+n)</code> points to uninitialized memory, then <code>uninitialized&#95;fill</code> creates copies of <code>x</code> in that range. That is, for each iterator <code>i</code> in the range <code>[first, first+n)</code>, <code>uninitialized&#95;fill</code> creates a copy of <code>x</code> in the location pointed to <code>i</code> by calling <code>ForwardIterator's</code><code>value&#95;type's</code> copy constructor.\n\n\nThe following code snippet demonstrates how to use <code>uninitialized&#95;fill</code> to initialize a range of uninitialized memory.\n\n\n\n```cpp\n#include <thrust/uninitialized_fill.h>\n#include <thrust/device_malloc.h>\n\nstruct Int\n{\n  __host__ __device__\n  Int(int x) : val(x) {}\n  int val;\n};  \n...\nconst int N = 137;\n\nInt val(46);\nthrust::device_ptr<Int> array = thrust::device_malloc<Int>(N);\nthrust::uninitialized_fill_n(array, N, val);\n\n// Int x = array[i];\n// x.val == 46 for all 0 <= i < N\n```",
      "explicit": false,
      "fullname": "thrust::uninitialized_fill_n",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 19,
        "file": "thrust/uninitialized_fill.h",
        "line": 262
      },
      "name": "uninitialized_fill_n",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The first element of the range of interest. "
        },
        {
          "name": "n",
          "text": "The size of the range of interest. "
        },
        {
          "name": "x",
          "text": "The value to use as the exemplar of the copy constructor. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "n",
          "type": "Size",
          "typePlain": "Size"
        },
        {
          "name": "x",
          "type": "const T &",
          "typePlain": "const T &"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::uninitialized_fill_n",
      "refid": "group__filling_1ga337355b88a0110cd88b29571f59af76b",
      "returns": [
        "<code>first+n</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/memory/uninitialized_fill\">https://en.cppreference.com/w/cpp/memory/uninitialized_fill</a>",
        "<code>uninitialized&#95;fill</code>",
        "<code>fill</code>",
        "<code>uninitialized&#95;copy&#95;n</code>",
        "<code>device&#95;new</code>",
        "<code>device&#95;malloc</code>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename Size",
          "typePlain": "typename Size"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> has a constructor that takes a single argument of type <code>T</code>."
        }
      ],
      "title": "uninitialized_fill_n",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__filling.html#function-uninitialized-fill-n",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::unique",
      "deleted": false,
      "details": "For each group of consecutive elements in the range <code>[first, last)</code> with the same value, <code>unique</code> removes all but the first element of the group. The return value is an iterator <code>new&#95;last</code> such that no two consecutive elements in the range <code>[first, new&#95;last)</code> are equal. The iterators in the range <code>[new&#95;last, last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>unique</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\nThis version of <code>unique</code> uses <code>operator==</code> to test for equality.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique</code> to compact a sequence of numbers to remove consecutive duplicates using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint *new_end = thrust::unique(thrust::host, A, A + N);\n// The first four values of A are now {1, 3, 2, 1}\n// Values beyond new_end are unspecified.\n```",
      "explicit": false,
      "fullname": "thrust::unique",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/unique.h",
        "line": 80
      },
      "name": "unique",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique",
      "refid": "group__stream__compaction_1gae5a90c7aa7c2370087c142936d405e8c",
      "returns": [
        "The end of the unique range <code>[first, new&#95;last)</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique\">https://en.cppreference.com/w/cpp/algorithm/unique</a>",
        "unique_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>."
        }
      ],
      "title": "unique",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::unique",
      "deleted": false,
      "details": "For each group of consecutive elements in the range <code>[first, last)</code> with the same value, <code>unique</code> removes all but the first element of the group. The return value is an iterator <code>new&#95;last</code> such that no two consecutive elements in the range <code>[first, new&#95;last)</code> are equal. The iterators in the range <code>[new&#95;last, last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>unique</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\nThis version of <code>unique</code> uses <code>operator==</code> to test for equality.\n\n\nThe following code snippet demonstrates how to use <code>unique</code> to compact a sequence of numbers to remove consecutive duplicates.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint *new_end = thrust::unique(A, A + N);\n// The first four values of A are now {1, 3, 2, 1}\n// Values beyond new_end are unspecified.\n```",
      "explicit": false,
      "fullname": "thrust::unique",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/unique.h",
        "line": 121
      },
      "name": "unique",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique",
      "refid": "group__stream__compaction_1gaccf33f1e24f8526b003f8a679591ad65",
      "returns": [
        "The end of the unique range <code>[first, new&#95;last)</code>."
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique\">https://en.cppreference.com/w/cpp/algorithm/unique</a>",
        "unique_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>."
        }
      ],
      "title": "unique",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ ForwardIterator thrust::unique",
      "deleted": false,
      "details": "For each group of consecutive elements in the range <code>[first, last)</code> with the same value, <code>unique</code> removes all but the first element of the group. The return value is an iterator <code>new&#95;last</code> such that no two consecutive elements in the range <code>[first, new&#95;last)</code> are equal. The iterators in the range <code>[new&#95;last, last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>unique</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\nThis version of <code>unique</code> uses the function object <code>binary&#95;pred</code> to test for equality.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique</code> to compact a sequence of numbers to remove consecutive duplicates using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint *new_end = thrust::unique(thrust::host, A, A + N, thrust::equal_to<int>());\n// The first four values of A are now {1, 3, 2, 1}\n// Values beyond new_end are unspecified.\n```",
      "explicit": false,
      "fullname": "thrust::unique",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/unique.h",
        "line": 173
      },
      "name": "unique",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique",
      "refid": "group__stream__compaction_1ga76d09b803bb439fa86b12de43d4fdcf8",
      "returns": [
        "The end of the unique range <code>[first, new&#95;last)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique\">https://en.cppreference.com/w/cpp/algorithm/unique</a>",
        "unique_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code> and to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique",
      "type": "__host__ __device__ ForwardIterator",
      "typePlain": "__host__ __device__ ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique",
      "argsString": "(ForwardIterator first, ForwardIterator last, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "ForwardIterator thrust::unique",
      "deleted": false,
      "details": "For each group of consecutive elements in the range <code>[first, last)</code> with the same value, <code>unique</code> removes all but the first element of the group. The return value is an iterator <code>new&#95;last</code> such that no two consecutive elements in the range <code>[first, new&#95;last)</code> are equal. The iterators in the range <code>[new&#95;last, last)</code> are all still dereferenceable, but the elements that they point to are unspecified. <code>unique</code> is stable, meaning that the relative order of elements that are not removed is unchanged.\n\nThis version of <code>unique</code> uses the function object <code>binary&#95;pred</code> to test for equality.\n\n\nThe following code snippet demonstrates how to use <code>unique</code> to compact a sequence of numbers to remove consecutive duplicates.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint *new_end = thrust::unique(A, A + N, thrust::equal_to<int>());\n// The first four values of A are now {1, 3, 2, 1}\n// Values beyond new_end are unspecified.\n```",
      "explicit": false,
      "fullname": "thrust::unique",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 17,
        "file": "thrust/unique.h",
        "line": 219
      },
      "name": "unique",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique",
      "refid": "group__stream__compaction_1gacc951d5d2780083d91639e6d98b8cd4b",
      "returns": [
        "The end of the unique range <code>[first, new&#95;last)</code>"
      ],
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique\">https://en.cppreference.com/w/cpp/algorithm/unique</a>",
        "unique_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code> and to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique",
      "type": "ForwardIterator",
      "typePlain": "ForwardIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::unique_copy",
      "deleted": false,
      "details": "<code>unique&#95;copy</code> copies elements from the range <code>[first, last)</code> to a range beginning with <code>result</code>, except that in a consecutive group of duplicate elements only the first one is copied. The return value is the end of the range to which the elements are copied.\n\nThe reason there are two different versions of unique_copy is that there are two different definitions of what it means for a consecutive group of elements to be duplicates. In the first version, the test is simple equality: the elements in a range <code>[f, l)</code> are duplicates if, for every iterator <code>i</code> in the range, either <code>i == f</code> or else <code>&#42;i == &#42;(i-1)</code>. In the second, the test is an arbitrary <code>BinaryPredicate</code><code>binary&#95;pred:</code> the elements in <code>[f, l)</code> are duplicates if, for every iterator <code>i</code> in the range, either <code>i == f</code> or else <code>binary&#95;pred(&#42;i, &#42;(i-1))</code> is <code>true</code>.\n\nThis version of <code>unique&#95;copy</code> uses <code>operator==</code> to test for equality.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;copy</code> to compact a sequence of numbers to remove consecutive duplicates using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint B[N];\nint *result_end = thrust::unique_copy(thrust::host, A, A + N, B);\n// The first four values of B are now {1, 3, 2, 1} and (result_end - B) is 4\n// Values beyond result_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::unique_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/unique.h",
        "line": 280
      },
      "name": "unique_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[first,last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_copy",
      "refid": "group__stream__compaction_1gaf9e6d5b2043121f4b680d3ea0d69c7a4",
      "returns": [
        "The end of the unique range <code>[result, result&#95;end)</code>."
      ],
      "see": [
        "unique ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique_copy\">https://en.cppreference.com/w/cpp/algorithm/unique_copy</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "unique_copy",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::unique_copy",
      "deleted": false,
      "details": "<code>unique&#95;copy</code> copies elements from the range <code>[first, last)</code> to a range beginning with <code>result</code>, except that in a consecutive group of duplicate elements only the first one is copied. The return value is the end of the range to which the elements are copied.\n\nThe reason there are two different versions of unique_copy is that there are two different definitions of what it means for a consecutive group of elements to be duplicates. In the first version, the test is simple equality: the elements in a range <code>[f, l)</code> are duplicates if, for every iterator <code>i</code> in the range, either <code>i == f</code> or else <code>&#42;i == &#42;(i-1)</code>. In the second, the test is an arbitrary <code>BinaryPredicate</code><code>binary&#95;pred:</code> the elements in <code>[f, l)</code> are duplicates if, for every iterator <code>i</code> in the range, either <code>i == f</code> or else <code>binary&#95;pred(&#42;i, &#42;(i-1))</code> is <code>true</code>.\n\nThis version of <code>unique&#95;copy</code> uses <code>operator==</code> to test for equality.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;copy</code> to compact a sequence of numbers to remove consecutive duplicates.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint B[N];\nint *result_end = thrust::unique_copy(A, A + N, B);\n// The first four values of B are now {1, 3, 2, 1} and (result_end - B) is 4\n// Values beyond result_end are unspecified\n```",
      "explicit": false,
      "fullname": "thrust::unique_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/unique.h",
        "line": 334
      },
      "name": "unique_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        }
      ],
      "pre": [
        "The range <code>[first,last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_copy",
      "refid": "group__stream__compaction_1gae51a1d24941cd0667e5d8b831dda3f90",
      "returns": [
        "The end of the unique range <code>[result, result&#95;end)</code>."
      ],
      "see": [
        "unique ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique_copy\">https://en.cppreference.com/w/cpp/algorithm/unique_copy</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>."
        }
      ],
      "title": "unique_copy",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator first, InputIterator last, OutputIterator result, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ OutputIterator thrust::unique_copy",
      "deleted": false,
      "details": "<code>unique&#95;copy</code> copies elements from the range <code>[first, last)</code> to a range beginning with <code>result</code>, except that in a consecutive group of duplicate elements only the first one is copied. The return value is the end of the range to which the elements are copied.\n\nThis version of <code>unique&#95;copy</code> uses the function object <code>binary&#95;pred</code> to test for equality.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;copy</code> to compact a sequence of numbers to remove consecutive duplicates using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint B[N];\nint *result_end = thrust::unique_copy(thrust::host, A, A + N, B, thrust::equal_to<int>());\n// The first four values of B are now {1, 3, 2, 1} and (result_end - B) is 4\n// Values beyond result_end are unspecified.\n```",
      "explicit": false,
      "fullname": "thrust::unique_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/unique.h",
        "line": 389
      },
      "name": "unique_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The range <code>[first,last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_copy",
      "refid": "group__stream__compaction_1ga31abf57faf11245ce1bc3d94ccebebaf",
      "returns": [
        "The end of the unique range <code>[result, result&#95;end)</code>."
      ],
      "see": [
        "unique ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique_copy\">https://en.cppreference.com/w/cpp/algorithm/unique_copy</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_copy",
      "type": "__host__ __device__ OutputIterator",
      "typePlain": "__host__ __device__ OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-copy",
      "argsString": "(InputIterator first, InputIterator last, OutputIterator result, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "OutputIterator thrust::unique_copy",
      "deleted": false,
      "details": "<code>unique&#95;copy</code> copies elements from the range <code>[first, last)</code> to a range beginning with <code>result</code>, except that in a consecutive group of duplicate elements only the first one is copied. The return value is the end of the range to which the elements are copied.\n\nThis version of <code>unique&#95;copy</code> uses the function object <code>binary&#95;pred</code> to test for equality.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;copy</code> to compact a sequence of numbers to remove consecutive duplicates.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint B[N];\nint *result_end = thrust::unique_copy(A, A + N, B, thrust::equal_to<int>());\n// The first four values of B are now {1, 3, 2, 1} and (result_end - B) is 4\n// Values beyond result_end are unspecified.\n```",
      "explicit": false,
      "fullname": "thrust::unique_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 16,
        "file": "thrust/unique.h",
        "line": 438
      },
      "name": "unique_copy",
      "override": false,
      "paramList": [
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "result",
          "text": "The beginning of the output range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "last",
          "type": "InputIterator",
          "typePlain": "InputIterator"
        },
        {
          "name": "result",
          "type": "OutputIterator",
          "typePlain": "OutputIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The range <code>[first,last)</code> and the range <code>[result, result + (last - first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_copy",
      "refid": "group__stream__compaction_1ga155c8c6cf6f1b282a3db3d5d376d4ed2",
      "returns": [
        "The end of the unique range <code>[result, result&#95;end)</code>."
      ],
      "see": [
        "unique ",
        "<a href=\"https://en.cppreference.com/w/cpp/algorithm/unique_copy\">https://en.cppreference.com/w/cpp/algorithm/unique_copy</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator",
          "typePlain": "typename InputIterator"
        },
        {
          "name": "",
          "type": "typename OutputIterator",
          "typePlain": "typename OutputIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, and <code>InputIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "OutputIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator's</code><code>value&#95;type</code> is convertible to <code>OutputIterator's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_copy",
      "type": "OutputIterator",
      "typePlain": "OutputIterator",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator1 keys_first, ForwardIterator1 keys_last, ForwardIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator1, ForwardIterator2 > thrust::unique_by_key",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key</code> is a generalization of <code>unique</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key</code> removes all but the first element of the group. Similarly, the corresponding values in the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are also removed.\n\nThe return value is a <code>pair</code> of iterators <code>(new&#95;keys&#95;last,new&#95;values&#95;last)</code> such that no two consecutive elements in the range <code>[keys&#95;first, new&#95;keys&#95;last)</code> are equal.\n\nThis version of <code>unique&#95;by&#95;key</code> uses <code>operator==</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key</code> to compact a sequence of key/value pairs to remove consecutive duplicates using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // values\n\nthrust::pair<int*,int*> new_end;\nnew_end = thrust::unique_by_key(thrust::host, A, A + N, B);\n\n// The first four keys in A are now {1, 3, 2, 1} and new_end.first - A is 4.\n// The first four values in B are now {9, 8, 5, 3} and new_end.second - B is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/unique.h",
        "line": 503
      },
      "name": "unique_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "keys_last",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "values_first",
          "type": "ForwardIterator2",
          "typePlain": "ForwardIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last)</code> and the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key",
      "refid": "group__stream__compaction_1gaab1568defb3c937cb1bb438ca1099ed4",
      "returns": [
        "A pair of iterators at end of the ranges <code>[key&#95;first, keys&#95;new&#95;last)</code> and <code>[values&#95;first, values&#95;new&#95;last)</code>."
      ],
      "see": [
        "unique ",
        "unique_by_key_copy ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator1",
          "typePlain": "typename ForwardIterator1"
        },
        {
          "name": "",
          "type": "typename ForwardIterator2",
          "typePlain": "typename ForwardIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator1</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "ForwardIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator2</code> is mutable."
        }
      ],
      "title": "unique_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator1, ForwardIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator1, ForwardIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key",
      "argsString": "(ForwardIterator1 keys_first, ForwardIterator1 keys_last, ForwardIterator2 values_first)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator1, ForwardIterator2 > thrust::unique_by_key",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key</code> is a generalization of <code>unique</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key</code> removes all but the first element of the group. Similarly, the corresponding values in the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are also removed.\n\nThe return value is a <code>pair</code> of iterators <code>(new&#95;keys&#95;last,new&#95;values&#95;last)</code> such that no two consecutive elements in the range <code>[keys&#95;first, new&#95;keys&#95;last)</code> are equal.\n\nThis version of <code>unique&#95;by&#95;key</code> uses <code>operator==</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key</code> to compact a sequence of key/value pairs to remove consecutive duplicates.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // values\n\nthrust::pair<int*,int*> new_end;\nnew_end = thrust::unique_by_key(A, A + N, B);\n\n// The first four keys in A are now {1, 3, 2, 1} and new_end.first - A is 4.\n// The first four values in B are now {9, 8, 5, 3} and new_end.second - B is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/unique.h",
        "line": 560
      },
      "name": "unique_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value range. "
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "keys_last",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "values_first",
          "type": "ForwardIterator2",
          "typePlain": "ForwardIterator2"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last)</code> and the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key",
      "refid": "group__stream__compaction_1ga94a71d9ea40c94489e180474ce8e245d",
      "returns": [
        "A pair of iterators at end of the ranges <code>[key&#95;first, keys&#95;new&#95;last)</code> and <code>[values&#95;first, values&#95;new&#95;last)</code>."
      ],
      "see": [
        "unique ",
        "unique_by_key_copy ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator1",
          "typePlain": "typename ForwardIterator1"
        },
        {
          "name": "",
          "type": "typename ForwardIterator2",
          "typePlain": "typename ForwardIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator1</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "ForwardIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator2</code> is mutable."
        }
      ],
      "title": "unique_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator1, ForwardIterator2 >",
      "typePlain": "thrust::pair< ForwardIterator1, ForwardIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator1 keys_first, ForwardIterator1 keys_last, ForwardIterator2 values_first, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< ForwardIterator1, ForwardIterator2 > thrust::unique_by_key",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key</code> is a generalization of <code>unique</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key</code> removes all but the first element of the group. Similarly, the corresponding values in the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are also removed.\n\nThis version of <code>unique&#95;by&#95;key</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key</code> to compact a sequence of key/value pairs to remove consecutive duplicates using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nnew_end = thrust::unique_by_key(thrust::host, keys, keys + N, values, binary_pred);\n\n// The first four keys in A are now {1, 3, 2, 1} and new_end.first - A is 4.\n// The first four values in B are now {9, 8, 5, 3} and new_end.second - B is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/unique.h",
        "line": 624
      },
      "name": "unique_by_key",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "keys_last",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "values_first",
          "type": "ForwardIterator2",
          "typePlain": "ForwardIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last)</code> and the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key",
      "refid": "group__stream__compaction_1ga284188014e6d81b4ab23ec88a005205d",
      "returns": [
        "The end of the unique range <code>[first, new&#95;last)</code>."
      ],
      "see": [
        "unique ",
        "unique_by_key_copy ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator1",
          "typePlain": "typename ForwardIterator1"
        },
        {
          "name": "",
          "type": "typename ForwardIterator2",
          "typePlain": "typename ForwardIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator1</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "ForwardIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator2</code> is mutable. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_by_key",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator1, ForwardIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< ForwardIterator1, ForwardIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key",
      "argsString": "(ForwardIterator1 keys_first, ForwardIterator1 keys_last, ForwardIterator2 values_first, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< ForwardIterator1, ForwardIterator2 > thrust::unique_by_key",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key</code> is a generalization of <code>unique</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key</code> removes all but the first element of the group. Similarly, the corresponding values in the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are also removed.\n\nThis version of <code>unique&#95;by&#95;key</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key</code> to compact a sequence of key/value pairs to remove consecutive duplicates.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nnew_end = thrust::unique_by_key(keys, keys + N, values, binary_pred);\n\n// The first four keys in A are now {1, 3, 2, 1} and new_end.first - A is 4.\n// The first four values in B are now {9, 8, 5, 3} and new_end.second - B is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/unique.h",
        "line": 682
      },
      "name": "unique_by_key",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "keys_last",
          "type": "ForwardIterator1",
          "typePlain": "ForwardIterator1"
        },
        {
          "name": "values_first",
          "type": "ForwardIterator2",
          "typePlain": "ForwardIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The range <code>[keys&#95;first, keys&#95;last)</code> and the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> shall not overlap."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key",
      "refid": "group__stream__compaction_1gab232924f9217f26f58668a80b6fe590d",
      "returns": [
        "The end of the unique range <code>[first, new&#95;last)</code>."
      ],
      "see": [
        "unique ",
        "unique_by_key_copy ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator1",
          "typePlain": "typename ForwardIterator1"
        },
        {
          "name": "",
          "type": "typename ForwardIterator2",
          "typePlain": "typename ForwardIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "ForwardIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator1</code> is mutable, and <code>ForwardIterator's</code><code>value&#95;type</code> is a model of <a href=\"https://en.cppreference.com/w/cpp/concepts/equality_comparable\">Equality Comparable</a>. "
        },
        {
          "name": "ForwardIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator2</code> is mutable. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_by_key",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< ForwardIterator1, ForwardIterator2 >",
      "typePlain": "thrust::pair< ForwardIterator1, ForwardIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::unique_by_key_copy",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key&#95;copy</code> is a generalization of <code>unique&#95;copy</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key&#95;copy</code> copies the first element of the group to a range beginning with <code>keys&#95;result</code> and the corresponding values from the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are copied to a range beginning with <code>values&#95;result</code>.\n\nThis version of <code>unique&#95;by&#95;key&#95;copy</code> uses <code>operator==</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key&#95;copy</code> to compact a sequence of key/value pairs and with equal keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nnew_end = thrust::unique_by_key_copy(thrust::host, A, A + N, B, C, D);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 8, 5, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/unique.h",
        "line": 750
      },
      "name": "unique_by_key_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output value range. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key_copy",
      "refid": "group__stream__compaction_1ga8c5288a398bacebc3c5659eedcbe0b91",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;result, keys&#95;result&#95;last)</code> and <code>[values&#95;result, values&#95;result&#95;last)</code>."
      ],
      "see": [
        "unique_copy ",
        "unique_by_key ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>."
        }
      ],
      "title": "unique_by_key_copy",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key-copy",
      "argsString": "(InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_result, OutputIterator2 values_result)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::unique_by_key_copy",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key&#95;copy</code> is a generalization of <code>unique&#95;copy</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key&#95;copy</code> copies the first element of the group to a range beginning with <code>keys&#95;result</code> and the corresponding values from the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are copied to a range beginning with <code>values&#95;result</code>.\n\nThis version of <code>unique&#95;by&#95;key&#95;copy</code> uses <code>operator==</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key&#95;copy</code> to compact a sequence of key/value pairs and with equal keys.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nnew_end = thrust::unique_by_key_copy(A, A + N, B, C, D);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 8, 5, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/unique.h",
        "line": 812
      },
      "name": "unique_by_key_copy",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output value range. "
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key_copy",
      "refid": "group__stream__compaction_1ga838bce66b72eed718ee0e8adc2826c02",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;result, keys&#95;result&#95;last)</code> and <code>[values&#95;result, values&#95;result&#95;last)</code>."
      ],
      "see": [
        "unique_copy ",
        "unique_by_key ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>."
        }
      ],
      "title": "unique_by_key_copy",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key-copy",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_result, OutputIterator2 values_result, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 > thrust::unique_by_key_copy",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key&#95;copy</code> is a generalization of <code>unique&#95;copy</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key&#95;copy</code> copies the first element of the group to a range beginning with <code>keys&#95;result</code> and the corresponding values from the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are copied to a range beginning with <code>values&#95;result</code>.\n\nThis version of <code>unique&#95;by&#95;key&#95;copy</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key&#95;copy</code> to compact a sequence of key/value pairs and with equal keys using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nnew_end = thrust::unique_by_key_copy(thrust::host, A, A + N, B, C, D, binary_pred);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 8, 5, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/unique.h",
        "line": 885
      },
      "name": "unique_by_key_copy",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key_copy",
      "refid": "group__stream__compaction_1gaadbb5997f7576e6706cc8e8fe91441e0",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;result, keys&#95;result&#95;last)</code> and <code>[values&#95;result, values&#95;result&#95;last)</code>."
      ],
      "see": [
        "unique_copy ",
        "unique_by_key ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_by_key_copy",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "__host__ __device__ thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-by-key-copy",
      "argsString": "(InputIterator1 keys_first, InputIterator1 keys_last, InputIterator2 values_first, OutputIterator1 keys_result, OutputIterator2 values_result, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "thrust::pair< OutputIterator1, OutputIterator2 > thrust::unique_by_key_copy",
      "deleted": false,
      "details": "<code>unique&#95;by&#95;key&#95;copy</code> is a generalization of <code>unique&#95;copy</code> to key-value pairs. For each group of consecutive keys in the range <code>[keys&#95;first, keys&#95;last)</code> that are equal, <code>unique&#95;by&#95;key&#95;copy</code> copies the first element of the group to a range beginning with <code>keys&#95;result</code> and the corresponding values from the range <code>[values&#95;first, values&#95;first + (keys&#95;last - keys&#95;first))</code> are copied to a range beginning with <code>values&#95;result</code>.\n\nThis version of <code>unique&#95;by&#95;key&#95;copy</code> uses the function object <code>binary&#95;pred</code> to test for equality and <code><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1project1st.html\">project1st</a></code> to reduce values with equal keys.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;by&#95;key&#95;copy</code> to compact a sequence of key/value pairs and with equal keys.\n\n\n\n```cpp\n#include <thrust/unique.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1}; // input keys\nint B[N] = {9, 8, 7, 6, 5, 4, 3}; // input values\nint C[N];                         // output keys\nint D[N];                         // output values\n\nthrust::pair<int*,int*> new_end;\nthrust::equal_to<int> binary_pred;\nnew_end = thrust::unique_by_key_copy(A, A + N, B, C, D, binary_pred);\n\n// The first four keys in C are now {1, 3, 2, 1} and new_end.first - C is 4.\n// The first four values in D are now {9, 8, 5, 3} and new_end.second - D is 4.\n```",
      "explicit": false,
      "fullname": "thrust::unique_by_key_copy",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 3,
        "file": "thrust/unique.h",
        "line": 952
      },
      "name": "unique_by_key_copy",
      "override": false,
      "paramList": [
        {
          "name": "keys_first",
          "text": "The beginning of the input key range. "
        },
        {
          "name": "keys_last",
          "text": "The end of the input key range. "
        },
        {
          "name": "values_first",
          "text": "The beginning of the input value range. "
        },
        {
          "name": "keys_result",
          "text": "The beginning of the output key range. "
        },
        {
          "name": "values_result",
          "text": "The beginning of the output value range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "keys_first",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "keys_last",
          "type": "InputIterator1",
          "typePlain": "InputIterator1"
        },
        {
          "name": "values_first",
          "type": "InputIterator2",
          "typePlain": "InputIterator2"
        },
        {
          "name": "keys_result",
          "type": "OutputIterator1",
          "typePlain": "OutputIterator1"
        },
        {
          "name": "values_result",
          "type": "OutputIterator2",
          "typePlain": "OutputIterator2"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pre": [
        "The input ranges shall not overlap either output range."
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_by_key_copy",
      "refid": "group__stream__compaction_1gaabc023568688210d8aa70e97d161a8b8",
      "returns": [
        "A pair of iterators at end of the ranges <code>[keys&#95;result, keys&#95;result&#95;last)</code> and <code>[values&#95;result, values&#95;result&#95;last)</code>."
      ],
      "see": [
        "unique_copy ",
        "unique_by_key ",
        "reduce_by_key "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename InputIterator1",
          "typePlain": "typename InputIterator1"
        },
        {
          "name": "",
          "type": "typename InputIterator2",
          "typePlain": "typename InputIterator2"
        },
        {
          "name": "",
          "type": "typename OutputIterator1",
          "typePlain": "typename OutputIterator1"
        },
        {
          "name": "",
          "type": "typename OutputIterator2",
          "typePlain": "typename OutputIterator2"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "InputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "InputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/input_iterator\">Input Iterator</a>, "
        },
        {
          "name": "OutputIterator1",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator1's</code><code>value&#95;type</code> is convertible to <code>OutputIterator1's</code><code>value&#95;type</code>. "
        },
        {
          "name": "OutputIterator2",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/output_iterator\">Output Iterator</a> and and <code>InputIterator2's</code><code>value&#95;type</code> is convertible to <code>OutputIterator2's</code><code>value&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_by_key_copy",
      "type": "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1pair.html\">thrust::pair</a>< OutputIterator1, OutputIterator2 >",
      "typePlain": "thrust::pair< OutputIterator1, OutputIterator2 >",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-by-key-copy",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-count",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type thrust::unique_count",
      "deleted": false,
      "details": "<code>unique&#95;count</code> counts runs of equal elements in the range <code>[first, last)</code> with the same value,\n\nThis version of <code>unique&#95;count</code> uses the function object <code>binary&#95;pred</code> to test for equality.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;count</code> to determine a number of runs of equal elements using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint count = thrust::unique_count(thrust::host, A, A + N, thrust::equal_to<int>());\n// count is now 4\n```",
      "explicit": false,
      "fullname": "thrust::unique_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/unique.h",
        "line": 1001
      },
      "name": "unique_count",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_count",
      "refid": "group__stream__compaction_1ga17c527c27c10d1bf67814181d30d66ef",
      "returns": [
        "The number of runs of equal elements in <code>[first, new&#95;last)</code>"
      ],
      "see": [
        "unique_copy ",
        "unique_by_key_copy ",
        "reduce_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code> and to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_count",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< ForwardIterator >::difference_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-count",
      "argsString": "(const thrust::detail::execution_policy_base< DerivedPolicy > &exec, ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type thrust::unique_count",
      "deleted": false,
      "details": "<code>unique&#95;count</code> counts runs of equal elements in the range <code>[first, last)</code> with the same value,\n\nThis version of <code>unique&#95;count</code> uses <code>operator==</code> to test for equality.\n\nThe algorithm's execution is parallelized as determined by <code>exec</code>.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;count</code> to determine the number of runs of equal elements using the <code>thrust::host</code> execution policy for parallelization:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint count = thrust::unique_count(thrust::host, A, A + N);\n// count is now 4\n```",
      "explicit": false,
      "fullname": "thrust::unique_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/unique.h",
        "line": 1047
      },
      "name": "unique_count",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "exec",
          "type": "const thrust::detail::execution_policy_base< DerivedPolicy > &",
          "typePlain": "const thrust::detail::execution_policy_base< DerivedPolicy > &"
        },
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_count",
      "refid": "group__stream__compaction_1ga6f75f3371cf91c3ac81d2c6f9a2fdee8",
      "returns": [
        "The number of runs of equal elements in <code>[first, new&#95;last)</code>"
      ],
      "see": [
        "unique_copy ",
        "unique_by_key_copy ",
        "reduce_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename DerivedPolicy",
          "typePlain": "typename DerivedPolicy"
        },
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code> and to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_count",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< ForwardIterator >::difference_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-count",
      "argsString": "(ForwardIterator first, ForwardIterator last, BinaryPredicate binary_pred)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type thrust::unique_count",
      "deleted": false,
      "details": "<code>unique&#95;count</code> counts runs of equal elements in the range <code>[first, last)</code> with the same value,\n\nThis version of <code>unique&#95;count</code> uses the function object <code>binary&#95;pred</code> to test for equality.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;count</code> to determine the number of runs of equal elements:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint count = thrust::unique_count(A, A + N, thrust::equal_to<int>());\n// count is now 4\n```",
      "explicit": false,
      "fullname": "thrust::unique_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/unique.h",
        "line": 1089
      },
      "name": "unique_count",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "binary_pred",
          "type": "BinaryPredicate",
          "typePlain": "BinaryPredicate"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_count",
      "refid": "group__stream__compaction_1gaf93e0693e7768a0cd968a6278501b063",
      "returns": [
        "The number of runs of equal elements in <code>[first, new&#95;last)</code>"
      ],
      "see": [
        "unique_copy ",
        "unique_by_key_copy ",
        "reduce_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        },
        {
          "name": "",
          "type": "typename BinaryPredicate",
          "typePlain": "typename BinaryPredicate"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code> and to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_count",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< ForwardIterator >::difference_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-unique-count",
      "argsString": "(ForwardIterator first, ForwardIterator last)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type thrust::unique_count",
      "deleted": false,
      "details": "<code>unique&#95;count</code> counts runs of equal elements in the range <code>[first, last)</code> with the same value,\n\nThis version of <code>unique&#95;count</code> uses <code>operator==</code> to test for equality.\n\n\nThe following code snippet demonstrates how to use <code>unique&#95;count</code> to determine the number of runs of equal elements:\n\n\n\n```cpp\n#include <thrust/unique.h>\n#include <thrust/execution_policy.h>\n...\nconst int N = 7;\nint A[N] = {1, 3, 3, 3, 2, 2, 1};\nint count = thrust::unique_count(thrust::host, A, A + N);\n// count is now 4\n```",
      "explicit": false,
      "fullname": "thrust::unique_count",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "thrust/unique.h",
        "line": 1130
      },
      "name": "unique_count",
      "override": false,
      "paramList": [
        {
          "name": "exec",
          "text": "The execution policy to use for parallelization. "
        },
        {
          "name": "first",
          "text": "The beginning of the input range. "
        },
        {
          "name": "last",
          "text": "The end of the input range. "
        },
        {
          "name": "binary_pred",
          "text": "The binary predicate used to determine equality. "
        }
      ],
      "params": [
        {
          "name": "first",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        },
        {
          "name": "last",
          "type": "ForwardIterator",
          "typePlain": "ForwardIterator"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::unique_count",
      "refid": "group__stream__compaction_1ga2aa6edabfabf1613ca8ccc9fdf211ffa",
      "returns": [
        "The number of runs of equal elements in <code>[first, new&#95;last)</code>"
      ],
      "see": [
        "unique_copy ",
        "unique_by_key_copy ",
        "reduce_by_key_copy "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename ForwardIterator",
          "typePlain": "typename ForwardIterator"
        }
      ],
      "templateParamsList": [
        {
          "name": "DerivedPolicy",
          "text": "The name of the derived execution policy. "
        },
        {
          "name": "ForwardIterator",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/iterator/forward_iterator\">Forward Iterator</a>, and <code>ForwardIterator's</code><code>value&#95;type</code> is convertible to <code>BinaryPredicate's</code><code>first&#95;argument&#95;type</code> and to <code>BinaryPredicate's</code><code>second&#95;argument&#95;type</code>. "
        },
        {
          "name": "BinaryPredicate",
          "text": "is a model of <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">Binary Predicate</a>."
        }
      ],
      "title": "unique_count",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">thrust::iterator_traits</a>< ForwardIterator >::difference_type",
      "typePlain": "__host__ __device__ thrust::iterator_traits< ForwardIterator >::difference_type",
      "url": "{{ site.baseurl }}/api/groups/group__stream__compaction.html#function-unique-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-make-zip-function",
      "argsString": "(Function &&fun)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "__host__ __device__ zip_function< typename std::decay< Function >::type > thrust::make_zip_function",
      "deleted": false,
      "details": "<code>make&#95;zip&#95;function</code> creates a <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__function.html\">zip&#95;function</a></code> from a function object.",
      "explicit": false,
      "fullname": "thrust::make_zip_function",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 202,
        "bodyFile": "thrust/zip_function.h",
        "bodyStart": 198,
        "column": 1,
        "file": "thrust/zip_function.h",
        "line": 198
      },
      "name": "make_zip_function",
      "override": false,
      "paramList": [
        {
          "name": "fun",
          "text": "The N-ary function object. "
        }
      ],
      "params": [
        {
          "name": "fun",
          "type": "Function &&",
          "typePlain": "Function &&"
        }
      ],
      "pureVirtual": false,
      "qualifiedname": "thrust::make_zip_function",
      "refid": "group__function__object__adaptors_1ga8cd591269af974c75e8b86c8d98b2fac",
      "returns": [
        "A <code><a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__function.html\">zip&#95;function</a></code> that takes a N-tuple."
      ],
      "see": [
        "<a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__function.html\">zip_function</a>"
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename Function",
          "typePlain": "typename Function"
        }
      ],
      "title": "make_zip_function",
      "type": "__host__ __device__ <a href=\"{{ site.baseurl }}/api/classes/classthrust_1_1zip__function.html\">zip_function</a>< typename std::decay< Function >::type >",
      "typePlain": "__host__ __device__ zip_function< typename std::decay< Function >::type >",
      "url": "{{ site.baseurl }}/api/groups/group__function__object__adaptors.html#function-make-zip-function",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#using-uninitialized-allocator-delete",
      "category": "types",
      "const": false,
      "definition": "using thrust::uninitialized_allocator_delete = typedef allocator_delete<T, Allocator, true>",
      "explicit": false,
      "fullname": "thrust::uninitialized_allocator_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/allocate_unique.h",
        "bodyStart": 136,
        "column": 1,
        "file": "thrust/allocate_unique.h",
        "line": 136
      },
      "name": "uninitialized_allocator_delete",
      "override": false,
      "qualifiedname": "thrust::uninitialized_allocator_delete",
      "refid": "allocate__unique_8h_1a10d1145183f4acb796aebc6146b13220",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Allocator",
          "typePlain": "typename Allocator"
        }
      ],
      "title": "uninitialized_allocator_delete",
      "type": "allocator_delete< T, Allocator, true >",
      "typePlain": "allocator_delete< T, Allocator, true >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-uninitialized-allocator-delete",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-uninitialized-array-allocator-delete",
      "category": "types",
      "const": false,
      "definition": "using thrust::uninitialized_array_allocator_delete = typedef array_allocator_delete<T, Allocator, true>",
      "explicit": false,
      "fullname": "thrust::uninitialized_array_allocator_delete",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/allocate_unique.h",
        "bodyStart": 251,
        "column": 1,
        "file": "thrust/allocate_unique.h",
        "line": 250
      },
      "name": "uninitialized_array_allocator_delete",
      "override": false,
      "qualifiedname": "thrust::uninitialized_array_allocator_delete",
      "refid": "allocate__unique_8h_1a8d7250260cdf48a33bf78f84e71db061",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "",
          "type": "typename Allocator",
          "typePlain": "typename Allocator"
        }
      ],
      "title": "uninitialized_array_allocator_delete",
      "type": "array_allocator_delete< T, Allocator, true >",
      "typePlain": "array_allocator_delete< T, Allocator, true >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-uninitialized-array-allocator-delete",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-unique-eager-event",
      "category": "types",
      "const": false,
      "definition": "using thrust::unique_eager_event = typedef unique_eager_event_type_detail::select<System>",
      "explicit": false,
      "fullname": "thrust::unique_eager_event",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 113,
        "column": 1,
        "file": "thrust/future.h",
        "line": 113
      },
      "name": "unique_eager_event",
      "override": false,
      "qualifiedname": "thrust::unique_eager_event",
      "refid": "future_8h_1a0480a5e16a7015d988a77777e01f74e8",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename System",
          "typePlain": "typename System"
        }
      ],
      "title": "unique_eager_event",
      "type": "unique_eager_event_type_detail::select< System >",
      "typePlain": "unique_eager_event_type_detail::select< System >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-unique-eager-event",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-event",
      "category": "types",
      "const": false,
      "definition": "using thrust::event = typedef unique_eager_event<System>",
      "explicit": false,
      "fullname": "thrust::event",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 116,
        "column": 1,
        "file": "thrust/future.h",
        "line": 116
      },
      "name": "event",
      "override": false,
      "qualifiedname": "thrust::event",
      "refid": "future_8h_1a80efe727db88f7d9321c16ec0cddaa33",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename System",
          "typePlain": "typename System"
        }
      ],
      "title": "event",
      "type": "unique_eager_event< System >",
      "typePlain": "unique_eager_event< System >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-event",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-unique-eager-future",
      "category": "types",
      "const": false,
      "definition": "using thrust::unique_eager_future = typedef unique_eager_future_type_detail::select<System, T>",
      "explicit": false,
      "fullname": "thrust::unique_eager_future",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 121,
        "column": 1,
        "file": "thrust/future.h",
        "line": 121
      },
      "name": "unique_eager_future",
      "override": false,
      "qualifiedname": "thrust::unique_eager_future",
      "refid": "future_8h_1a0e2fb4d79c43dcf2d4e942f1d9be6609",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename System",
          "typePlain": "typename System"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "unique_eager_future",
      "type": "unique_eager_future_type_detail::select< System, T >",
      "typePlain": "unique_eager_future_type_detail::select< System, T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-unique-eager-future",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-future",
      "category": "types",
      "const": false,
      "definition": "using thrust::future = typedef unique_eager_future<System, T>",
      "explicit": false,
      "fullname": "thrust::future",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 124,
        "column": 1,
        "file": "thrust/future.h",
        "line": 124
      },
      "name": "future",
      "override": false,
      "qualifiedname": "thrust::future",
      "refid": "future_8h_1aef884068cb1f530925347b894805a5de",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename System",
          "typePlain": "typename System"
        },
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "future",
      "type": "unique_eager_future< System, T >",
      "typePlain": "unique_eager_future< System, T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-future",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-device-unique-eager-event",
      "category": "types",
      "const": false,
      "definition": "using thrust::device_unique_eager_event = typedef unique_eager_event_type_detail::select< thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::tag >",
      "explicit": false,
      "fullname": "thrust::device_unique_eager_event",
      "hasDetails": false,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 148,
        "column": 1,
        "file": "thrust/future.h",
        "line": 146
      },
      "name": "device_unique_eager_event",
      "override": false,
      "qualifiedname": "thrust::device_unique_eager_event",
      "refid": "future_8h_1a9f17a9e95f4c927e9875b1b77b97d848",
      "static": false,
      "strong": false,
      "title": "device_unique_eager_event",
      "type": "unique_eager_event_type_detail::select< thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::tag >",
      "typePlain": "unique_eager_event_type_detail::select< thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::tag >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-device-unique-eager-event",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-device-event",
      "category": "types",
      "const": false,
      "definition": "using thrust::device_event = typedef device_unique_eager_event",
      "explicit": false,
      "fullname": "thrust::device_event",
      "hasDetails": false,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 150,
        "column": 1,
        "file": "thrust/future.h",
        "line": 150
      },
      "name": "device_event",
      "override": false,
      "qualifiedname": "thrust::device_event",
      "refid": "future_8h_1ab60a8711e145fd5b53e183f42d481785",
      "static": false,
      "strong": false,
      "title": "device_event",
      "type": "device_unique_eager_event",
      "typePlain": "device_unique_eager_event",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-device-event",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-device-unique-eager-future",
      "category": "types",
      "const": false,
      "definition": "using thrust::device_unique_eager_future = typedef unique_eager_future_type_detail::select< thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::tag, T >",
      "explicit": false,
      "fullname": "thrust::device_unique_eager_future",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 157,
        "column": 1,
        "file": "thrust/future.h",
        "line": 155
      },
      "name": "device_unique_eager_future",
      "override": false,
      "qualifiedname": "thrust::device_unique_eager_future",
      "refid": "future_8h_1a886860ed77d7fea230fc5a12024fae7c",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_unique_eager_future",
      "type": "unique_eager_future_type_detail::select< thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::tag, T >",
      "typePlain": "unique_eager_future_type_detail::select< thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::tag, T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-device-unique-eager-future",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-device-future",
      "category": "types",
      "const": false,
      "definition": "using thrust::device_future = typedef device_unique_eager_future<T>",
      "explicit": false,
      "fullname": "thrust::device_future",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/future.h",
        "bodyStart": 160,
        "column": 1,
        "file": "thrust/future.h",
        "line": 160
      },
      "name": "device_future",
      "override": false,
      "qualifiedname": "thrust::device_future",
      "refid": "future_8h_1aa38076dfdaf36a7883f5df1360658946",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "device_future",
      "type": "device_unique_eager_future< T >",
      "typePlain": "device_unique_eager_future< T >",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#using-device-future",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-input-host-iterator-tag",
      "category": "types",
      "const": false,
      "definition": "typedef std::input_iterator_tag thrust::input_host_iterator_tag",
      "details": "<code>input&#95;host&#95;iterator&#95;tag</code> is an empty class: it has no member functions, member variables, or nested types. It is used solely as a \"tag\": a representation of the Input Host Iterator concept within the C++ type system.",
      "explicit": false,
      "fullname": "thrust::input_host_iterator_tag",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/iterator/iterator_categories.h",
        "bodyStart": 159,
        "column": 33,
        "file": "thrust/iterator/iterator_categories.h",
        "line": 159
      },
      "name": "input_host_iterator_tag",
      "override": false,
      "qualifiedname": "thrust::input_host_iterator_tag",
      "refid": "group__iterator__tag__classes_1ga9c81b5a0793b7ab5164138cf90bc4467",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/iterator/iterator_tags\">https://en.cppreference.com/w/cpp/iterator/iterator_tags</a><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">iterator_traits</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1input__device__iterator__tag.html\">input_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1output__device__iterator__tag.html\">output_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1forward__device__iterator__tag.html\">forward_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1bidirectional__device__iterator__tag.html\">bidirectional_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1random__access__device__iterator__tag.html\">random_access_device_iterator_tag</a>, output_host_iterator_tag, forward_host_iterator_tag, bidirectional_host_iterator_tag, random_access_host_iterator_tag "
      ],
      "static": false,
      "strong": false,
      "title": "input_host_iterator_tag",
      "type": "std::input_iterator_tag",
      "typePlain": "std::input_iterator_tag",
      "url": "{{ site.baseurl }}/api/groups/group__iterator__tag__classes.html#typedef-input-host-iterator-tag",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-output-host-iterator-tag",
      "category": "types",
      "const": false,
      "definition": "typedef std::output_iterator_tag thrust::output_host_iterator_tag",
      "details": "<code>output&#95;host&#95;iterator&#95;tag</code> is an empty class: it has no member functions, member variables, or nested types. It is used solely as a \"tag\": a representation of the Output Host Iterator concept within the C++ type system.",
      "explicit": false,
      "fullname": "thrust::output_host_iterator_tag",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/iterator/iterator_categories.h",
        "bodyStart": 173,
        "column": 34,
        "file": "thrust/iterator/iterator_categories.h",
        "line": 173
      },
      "name": "output_host_iterator_tag",
      "override": false,
      "qualifiedname": "thrust::output_host_iterator_tag",
      "refid": "group__iterator__tag__classes_1ga1a68f19231a55966d6ccbbeb0143fc78",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/iterator/iterator_tags\">https://en.cppreference.com/w/cpp/iterator/iterator_tags</a><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">iterator_traits</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1input__device__iterator__tag.html\">input_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1output__device__iterator__tag.html\">output_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1forward__device__iterator__tag.html\">forward_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1bidirectional__device__iterator__tag.html\">bidirectional_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1random__access__device__iterator__tag.html\">random_access_device_iterator_tag</a>, input_host_iterator_tag, forward_host_iterator_tag, bidirectional_host_iterator_tag, random_access_host_iterator_tag "
      ],
      "static": false,
      "strong": false,
      "title": "output_host_iterator_tag",
      "type": "std::output_iterator_tag",
      "typePlain": "std::output_iterator_tag",
      "url": "{{ site.baseurl }}/api/groups/group__iterator__tag__classes.html#typedef-output-host-iterator-tag",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-forward-host-iterator-tag",
      "category": "types",
      "const": false,
      "definition": "typedef std::forward_iterator_tag thrust::forward_host_iterator_tag",
      "details": "<code>forward&#95;host&#95;iterator&#95;tag</code> is an empty class: it has no member functions, member variables, or nested types. It is used solely as a \"tag\": a representation of the Forward Host Iterator concept within the C++ type system.",
      "explicit": false,
      "fullname": "thrust::forward_host_iterator_tag",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/iterator/iterator_categories.h",
        "bodyStart": 187,
        "column": 35,
        "file": "thrust/iterator/iterator_categories.h",
        "line": 187
      },
      "name": "forward_host_iterator_tag",
      "override": false,
      "qualifiedname": "thrust::forward_host_iterator_tag",
      "refid": "group__iterator__tag__classes_1ga3e917ce7912b40457dc8bf8eac3f63c4",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/iterator/iterator_tags\">https://en.cppreference.com/w/cpp/iterator/iterator_tags</a><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">iterator_traits</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1input__device__iterator__tag.html\">input_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1output__device__iterator__tag.html\">output_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1forward__device__iterator__tag.html\">forward_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1bidirectional__device__iterator__tag.html\">bidirectional_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1random__access__device__iterator__tag.html\">random_access_device_iterator_tag</a>, input_host_iterator_tag, output_host_iterator_tag, bidirectional_host_iterator_tag, random_access_host_iterator_tag "
      ],
      "static": false,
      "strong": false,
      "title": "forward_host_iterator_tag",
      "type": "std::forward_iterator_tag",
      "typePlain": "std::forward_iterator_tag",
      "url": "{{ site.baseurl }}/api/groups/group__iterator__tag__classes.html#typedef-forward-host-iterator-tag",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-bidirectional-host-iterator-tag",
      "category": "types",
      "const": false,
      "definition": "typedef std::bidirectional_iterator_tag thrust::bidirectional_host_iterator_tag",
      "details": "<code>bidirectional&#95;host&#95;iterator&#95;tag</code> is an empty class: it has no member functions, member variables, or nested types. It is used solely as a \"tag\": a representation of the Forward Host Iterator concept within the C++ type system.",
      "explicit": false,
      "fullname": "thrust::bidirectional_host_iterator_tag",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/iterator/iterator_categories.h",
        "bodyStart": 201,
        "column": 41,
        "file": "thrust/iterator/iterator_categories.h",
        "line": 201
      },
      "name": "bidirectional_host_iterator_tag",
      "override": false,
      "qualifiedname": "thrust::bidirectional_host_iterator_tag",
      "refid": "group__iterator__tag__classes_1ga4fc4cba5e02678c694d1e2c38ecc97ac",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/iterator/iterator_tags\">https://en.cppreference.com/w/cpp/iterator/iterator_tags</a><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">iterator_traits</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1input__device__iterator__tag.html\">input_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1output__device__iterator__tag.html\">output_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1forward__device__iterator__tag.html\">forward_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1bidirectional__device__iterator__tag.html\">bidirectional_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1random__access__device__iterator__tag.html\">random_access_device_iterator_tag</a>, input_host_iterator_tag, output_host_iterator_tag, forward_host_iterator_tag, random_access_host_iterator_tag "
      ],
      "static": false,
      "strong": false,
      "title": "bidirectional_host_iterator_tag",
      "type": "std::bidirectional_iterator_tag",
      "typePlain": "std::bidirectional_iterator_tag",
      "url": "{{ site.baseurl }}/api/groups/group__iterator__tag__classes.html#typedef-bidirectional-host-iterator-tag",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-random-access-host-iterator-tag",
      "category": "types",
      "const": false,
      "definition": "typedef std::random_access_iterator_tag thrust::random_access_host_iterator_tag",
      "details": "<code>random&#95;access&#95;host&#95;iterator&#95;tag</code> is an empty class: it has no member functions, member variables, or nested types. It is used solely as a \"tag\": a representation of the Forward Host Iterator concept within the C++ type system.",
      "explicit": false,
      "fullname": "thrust::random_access_host_iterator_tag",
      "hasDetails": true,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/iterator/iterator_categories.h",
        "bodyStart": 215,
        "column": 41,
        "file": "thrust/iterator/iterator_categories.h",
        "line": 215
      },
      "name": "random_access_host_iterator_tag",
      "override": false,
      "qualifiedname": "thrust::random_access_host_iterator_tag",
      "refid": "group__iterator__tag__classes_1ga80a4b8250e3322344767a6b417e72256",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/iterator/iterator_tags\">https://en.cppreference.com/w/cpp/iterator/iterator_tags</a><a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1iterator__traits.html\">iterator_traits</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1input__device__iterator__tag.html\">input_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1output__device__iterator__tag.html\">output_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1forward__device__iterator__tag.html\">forward_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1bidirectional__device__iterator__tag.html\">bidirectional_device_iterator_tag</a>, <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1random__access__device__iterator__tag.html\">random_access_device_iterator_tag</a>, input_host_iterator_tag, output_host_iterator_tag, forward_host_iterator_tag, bidirectional_host_iterator_tag "
      ],
      "static": false,
      "strong": false,
      "title": "random_access_host_iterator_tag",
      "type": "std::random_access_iterator_tag",
      "typePlain": "std::random_access_iterator_tag",
      "url": "{{ site.baseurl }}/api/groups/group__iterator__tag__classes.html#typedef-random-access-host-iterator-tag",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-device-memory-resource",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::memory_resource thrust::device_memory_resource",
      "explicit": false,
      "fullname": "thrust::device_memory_resource",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/device_memory_resource.h",
        "bodyStart": 30,
        "column": 5,
        "file": "thrust/mr/device_memory_resource.h",
        "line": 30
      },
      "name": "device_memory_resource",
      "override": false,
      "qualifiedname": "thrust::device_memory_resource",
      "refid": "device__memory__resource_8h_1a7b52b58ba349544e66d198908c5647aa",
      "static": false,
      "strong": false,
      "title": "device_memory_resource",
      "type": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::memory_resource",
      "typePlain": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::memory_resource",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#typedef-device-memory-resource",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-universal-memory-resource",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_memory_resource thrust::universal_memory_resource",
      "explicit": false,
      "fullname": "thrust::universal_memory_resource",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/device_memory_resource.h",
        "bodyStart": 32,
        "column": 5,
        "file": "thrust/mr/device_memory_resource.h",
        "line": 32
      },
      "name": "universal_memory_resource",
      "override": false,
      "qualifiedname": "thrust::universal_memory_resource",
      "refid": "device__memory__resource_8h_1a2a02d93d7cae2884de61719cbecc3c4d",
      "static": false,
      "strong": false,
      "title": "universal_memory_resource",
      "type": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_memory_resource",
      "typePlain": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_memory_resource",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#typedef-universal-memory-resource",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-universal-host-pinned-memory-resource",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_host_pinned_memory_resource thrust::universal_host_pinned_memory_resource",
      "explicit": false,
      "fullname": "thrust::universal_host_pinned_memory_resource",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/device_memory_resource.h",
        "bodyStart": 34,
        "column": 5,
        "file": "thrust/mr/device_memory_resource.h",
        "line": 34
      },
      "name": "universal_host_pinned_memory_resource",
      "override": false,
      "qualifiedname": "thrust::universal_host_pinned_memory_resource",
      "refid": "device__memory__resource_8h_1a318bcd2c96845ad606092bcbe5a0fceb",
      "static": false,
      "strong": false,
      "title": "universal_host_pinned_memory_resource",
      "type": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_host_pinned_memory_resource",
      "typePlain": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_host_pinned_memory_resource",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#typedef-universal-host-pinned-memory-resource",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#typedef-host-memory-resource",
      "category": "types",
      "const": false,
      "definition": "typedef thrust::system::__THRUST_HOST_SYSTEM_NAMESPACE::memory_resource thrust::host_memory_resource",
      "explicit": false,
      "fullname": "thrust::host_memory_resource",
      "hasDetails": false,
      "inline": false,
      "kind": "typedef",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/mr/host_memory_resource.h",
        "bodyStart": 29,
        "column": 5,
        "file": "thrust/mr/host_memory_resource.h",
        "line": 29
      },
      "name": "host_memory_resource",
      "override": false,
      "qualifiedname": "thrust::host_memory_resource",
      "refid": "host__memory__resource_8h_1a8539467c672f08e5484b559061ebf887",
      "static": false,
      "strong": false,
      "title": "host_memory_resource",
      "type": "thrust::system::__THRUST_HOST_SYSTEM_NAMESPACE::memory_resource",
      "typePlain": "thrust::system::__THRUST_HOST_SYSTEM_NAMESPACE::memory_resource",
      "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html#typedef-host-memory-resource",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-integer-sequence",
      "brief": "A compile-time sequence of <a href=\"https://en.cppreference.com/w/cpp/language/constant_expression#Integral_constant_expression\">_integral constants_</a> of type <code>T</code> with values <code>Is...</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::integer_sequence = typedef std::integer_sequence<T, Is...>",
      "explicit": false,
      "fullname": "thrust::integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 61,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 61
      },
      "name": "integer_sequence",
      "override": false,
      "qualifiedname": "thrust::integer_sequence",
      "refid": "group__type__traits_1ga6c50c39a0607c7530a6e81ab2a796c4e",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/language/constant_expression#Integral_constant_expression\">_integral constants_</a>",
        "index_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence ",
        "integer_sequence_push_front ",
        "integer_sequence_push_back ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::integer&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "A compile-time sequence of integral constants of type T with values Is.... ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Is",
          "type": "T...",
          "typePlain": "T..."
        }
      ],
      "title": "integer_sequence",
      "type": "std::integer_sequence< T, Is... >",
      "typePlain": "std::integer_sequence< T, Is... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-integer-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-index-sequence",
      "brief": "A compile-time sequence of type <a href=\"https://en.cppreference.com/w/cpp/types/size_t\">std::size_t</a> with values <code>Is...</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::index_sequence = typedef std::index_sequence<Is...>",
      "explicit": false,
      "fullname": "thrust::index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 95,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 95
      },
      "name": "index_sequence",
      "override": false,
      "qualifiedname": "thrust::index_sequence",
      "refid": "group__type__traits_1gafbf6877cf7c76f7a9797c15e46ec126a",
      "see": [
        "integer_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence ",
        "integer_sequence_push_front ",
        "integer_sequence_push_back ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::index&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "A compile-time sequence of type std::size_t with values Is.... ",
      "templateParams": [
        {
          "name": "Is",
          "type": "std::size_t...",
          "typePlain": "std::size_t..."
        }
      ],
      "title": "index_sequence",
      "type": "std::index_sequence< Is... >",
      "typePlain": "std::index_sequence< Is... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-index-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-integer-sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>0, 1, 2, ..., N - 1</code> of type <code>T</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_integer_sequence = typedef std::make_integer_sequence<T, N>",
      "explicit": false,
      "fullname": "thrust::make_integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 148,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 148
      },
      "name": "make_integer_sequence",
      "override": false,
      "qualifiedname": "thrust::make_integer_sequence",
      "refid": "group__type__traits_1ga0b61df4c9a80875b3f7aaa3ba0b09592",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_reversed_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::make&#95;integer&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements 0, 1, 2, ..., N - 1 of type T. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_integer_sequence",
      "type": "std::make_integer_sequence< T, N >",
      "typePlain": "std::make_integer_sequence< T, N >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-integer-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-index-sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>0, 1, 2, ..., N - 1</code> of type <a href=\"https://en.cppreference.com/w/cpp/types/size_t\">std::size_t</a>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_index_sequence = typedef std::make_index_sequence<N>",
      "explicit": false,
      "fullname": "thrust::make_index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 210,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 210
      },
      "name": "make_index_sequence",
      "override": false,
      "qualifiedname": "thrust::make_index_sequence",
      "refid": "group__type__traits_1ga7208a6310979d8c3e642756cc88dba97",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_reversed_index_sequence ",
        "<a href=\"https://en.cppreference.com/w/cpp/utility/integer_sequence\"><code>std::make&#95;index&#95;sequence</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements 0, 1, 2, ..., N - 1 of type std::size_t. ",
      "templateParams": [
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_index_sequence",
      "type": "std::make_index_sequence< N >",
      "typePlain": "std::make_index_sequence< N >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-index-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-reversed-integer-sequence",
      "brief": "Create a new <code>integer&#95;sequence</code> with elements <code>N - 1, N - 2, N - 3, ..., 0</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_reversed_integer_sequence = typedef typename detail::make_reversed_integer_sequence_impl<T, N>::type",
      "explicit": false,
      "fullname": "thrust::make_reversed_integer_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 281,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 280
      },
      "name": "make_reversed_integer_sequence",
      "override": false,
      "qualifiedname": "thrust::make_reversed_integer_sequence",
      "refid": "group__type__traits_1ga902b3a0313d9d2dffe1b71785fbc17f7",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_index_sequence ",
        "make_reversed_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new integer_sequence with elements N - 1, N - 2, N - 3, ..., 0. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_reversed_integer_sequence",
      "type": "typename detail::make_reversed_integer_sequence_impl< T, N >::type",
      "typePlain": "typename detail::make_reversed_integer_sequence_impl< T, N >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-reversed-integer-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-make-reversed-index-sequence",
      "brief": "Create a new <code>index&#95;sequence</code> with elements <code>N - 1, N - 2, N - 3, ..., 0</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::make_reversed_index_sequence = typedef make_reversed_integer_sequence<std::size_t, N>",
      "explicit": false,
      "fullname": "thrust::make_reversed_index_sequence",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 294,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 293
      },
      "name": "make_reversed_index_sequence",
      "override": false,
      "qualifiedname": "thrust::make_reversed_index_sequence",
      "refid": "group__type__traits_1gacd17444a4ddc93798cd0970207e2c1bc",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_reversed_integer_sequence ",
        "make_reversed_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Create a new index_sequence with elements N - 1, N - 2, N - 3, ..., 0. ",
      "templateParams": [
        {
          "name": "N",
          "type": "std::size_t",
          "typePlain": "std::size_t"
        }
      ],
      "title": "make_reversed_index_sequence",
      "type": "<a href=\"{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-reversed-integer-sequence\">make_reversed_integer_sequence</a>< std::size_t, N >",
      "typePlain": "make_reversed_integer_sequence< std::size_t, N >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-make-reversed-index-sequence",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-integer-sequence-push-front",
      "brief": "Add a new element to the front of an <code>integer&#95;sequence</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::integer_sequence_push_front = typedef typename detail::integer_sequence_push_front_impl<T, Value, Sequence>::type",
      "explicit": false,
      "fullname": "thrust::integer_sequence_push_front",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 305,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 304
      },
      "name": "integer_sequence_push_front",
      "override": false,
      "qualifiedname": "thrust::integer_sequence_push_front",
      "refid": "group__type__traits_1ga30dd0858022330597b14a4c034e1936d",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Add a new element to the front of an integer_sequence. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Value",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "",
          "type": "typename Sequence",
          "typePlain": "typename Sequence"
        }
      ],
      "title": "integer_sequence_push_front",
      "type": "typename detail::integer_sequence_push_front_impl< T, Value, Sequence >::type",
      "typePlain": "typename detail::integer_sequence_push_front_impl< T, Value, Sequence >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-integer-sequence-push-front",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-integer-sequence-push-back",
      "brief": "Add a new element to the back of an <code>integer&#95;sequence</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::integer_sequence_push_back = typedef typename detail::integer_sequence_push_back_impl<T, Value, Sequence>::type",
      "explicit": false,
      "fullname": "thrust::integer_sequence_push_back",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/integer_sequence.h",
        "bodyStart": 316,
        "column": 1,
        "file": "thrust/type_traits/integer_sequence.h",
        "line": 315
      },
      "name": "integer_sequence_push_back",
      "override": false,
      "qualifiedname": "thrust::integer_sequence_push_back",
      "refid": "group__type__traits_1ga9a0f2c1da32b7b14180366265894c192",
      "see": [
        "integer_sequence ",
        "index_sequence ",
        "make_integer_sequence ",
        "make_index_sequence "
      ],
      "static": false,
      "strong": false,
      "summary": "Add a new element to the back of an integer_sequence. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        },
        {
          "name": "Value",
          "type": "T",
          "typePlain": "T"
        },
        {
          "name": "",
          "type": "typename Sequence",
          "typePlain": "typename Sequence"
        }
      ],
      "title": "integer_sequence_push_back",
      "type": "typename detail::integer_sequence_push_back_impl< T, Value, Sequence >::type",
      "typePlain": "typename detail::integer_sequence_push_back_impl< T, Value, Sequence >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-integer-sequence-push-back",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-contiguous-iterator",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>Iterator</code> satisfies <a href=\"https://en.cppreference.com/w/cpp/named_req/ContiguousIterator\">ContiguousIterator</a>, aka it points to elements that are contiguous in memory, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_contiguous_iterator = typedef detail::is_contiguous_iterator_impl<Iterator>",
      "explicit": false,
      "fullname": "thrust::is_contiguous_iterator",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_contiguous_iterator.h",
        "bodyStart": 88,
        "column": 1,
        "file": "thrust/type_traits/is_contiguous_iterator.h",
        "line": 80
      },
      "name": "is_contiguous_iterator",
      "override": false,
      "qualifiedname": "thrust::is_contiguous_iterator",
      "refid": "group__type__traits_1gadb26491471e3c992c0872345ca374505",
      "see": [
        "is_contiguous_iterator_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1proclaim__contiguous__iterator.html\">proclaim_contiguous_iterator</a>",
        "<a href=\"{{ site.baseurl }}/api/groups/group__type__traits.html#define-thrust-proclaim-contiguous-iterator\">THRUST_PROCLAIM_CONTIGUOUS_ITERATOR</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if Iterator satisfies ContiguousIterator, aka it points to elements that are contiguous in memory, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Iterator",
          "typePlain": "typename Iterator"
        }
      ],
      "title": "is_contiguous_iterator",
      "type": "detail::is_contiguous_iterator_impl< Iterator >",
      "typePlain": "detail::is_contiguous_iterator_impl< Iterator >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-contiguous-iterator",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-execution-policy",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is an _ExecutionPolicy_ and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_execution_policy = typedef detail::is_base_of<detail::execution_policy_marker, T>",
      "explicit": false,
      "fullname": "thrust::is_execution_policy",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_execution_policy.h",
        "bodyStart": 52,
        "column": 1,
        "file": "thrust/type_traits/is_execution_policy.h",
        "line": 44
      },
      "name": "is_execution_policy",
      "override": false,
      "qualifiedname": "thrust::is_execution_policy",
      "refid": "group__type__traits_1ga57dfd45858e619c47e025ed4951f28e8",
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is an ExecutionPolicy and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_execution_policy",
      "type": "detail::is_base_of< detail::execution_policy_marker, T >",
      "typePlain": "detail::is_base_of< detail::execution_policy_marker, T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-execution-policy",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-less-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_less_function_object = typedef detail::is_operator_less_function_object_impl<T>",
      "explicit": false,
      "fullname": "thrust::is_operator_less_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 77,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 69
      },
      "name": "is_operator_less_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_function_object",
      "refid": "group__type__traits_1ga89fa2cd21cf618ac3f6742e015347bd4",
      "see": [
        "is_operator_less_function_object_v ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator<, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_function_object",
      "type": "detail::is_operator_less_function_object_impl< T >",
      "typePlain": "detail::is_operator_less_function_object_impl< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-less-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-greater-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&gt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_greater_function_object = typedef detail::is_operator_greater_function_object_impl<T>",
      "explicit": false,
      "fullname": "thrust::is_operator_greater_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 114,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 106
      },
      "name": "is_operator_greater_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_greater_function_object",
      "refid": "group__type__traits_1ga80899866447b02e95640aa86cb3b9d5b",
      "see": [
        "is_operator_greater_function_object_v ",
        "is_operator_less_function_object ",
        "is_operator_less_or_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator>, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_greater_function_object",
      "type": "detail::is_operator_greater_function_object_impl< T >",
      "typePlain": "detail::is_operator_greater_function_object_impl< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-greater-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-less-or-greater-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/BinaryPredicate\">BinaryPredicate</a> equivalent to <code>operator&lt;</code> or <code>operator&gt;</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_less_or_greater_function_object = typedef integral_constant< bool , detail::is_operator_less_function_object_impl<T>::value || detail::is_operator_greater_function_object_impl<T>::value >",
      "explicit": false,
      "fullname": "thrust::is_operator_less_or_greater_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "bodyStart": 155,
        "column": 1,
        "file": "thrust/type_traits/is_operator_less_or_greater_function_object.h",
        "line": 143
      },
      "name": "is_operator_less_or_greater_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_less_or_greater_function_object",
      "refid": "group__type__traits_1ga04754b3985cf345f47aaca8068ca5d58",
      "see": [
        "is_operator_less_or_greater_function_object_v ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_plus_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a BinaryPredicate equivalent to operator< or operator>, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_less_or_greater_function_object",
      "type": "integral_constant< bool, detail::is_operator_less_function_object_impl< T >::value||detail::is_operator_greater_function_object_impl< T >::value >",
      "typePlain": "integral_constant< bool, detail::is_operator_less_function_object_impl< T >::value||detail::is_operator_greater_function_object_impl< T >::value >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-less-or-greater-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-is-operator-plus-function-object",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/named_req/UnaryTypeTrait\">_UnaryTypeTrait_</a> that returns <code>true&#95;type</code> if <code>T</code> is a <a href=\"https://en.cppreference.com/w/cpp/named_req/FunctionObject\">FunctionObject</a> equivalent to <code>operator+</code>, and <code>false&#95;type</code> otherwise. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::is_operator_plus_function_object = typedef detail::is_operator_plus_function_object_impl<T>",
      "explicit": false,
      "fullname": "thrust::is_operator_plus_function_object",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/is_operator_plus_function_object.h",
        "bodyStart": 74,
        "column": 1,
        "file": "thrust/type_traits/is_operator_plus_function_object.h",
        "line": 66
      },
      "name": "is_operator_plus_function_object",
      "override": false,
      "qualifiedname": "thrust::is_operator_plus_function_object",
      "refid": "group__type__traits_1ga4951501a3c7337be79222a966d1f9d73",
      "see": [
        "is_operator_plus_function_object_v ",
        "is_operator_less_function_object ",
        "is_operator_greater_function_object ",
        "is_operator_less_or_greater_function_object "
      ],
      "static": false,
      "strong": false,
      "summary": "UnaryTypeTrait that returns true_type if T is a FunctionObject equivalent to operator+, and false_type otherwise. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "is_operator_plus_function_object",
      "type": "detail::is_operator_plus_function_object_impl< T >",
      "typePlain": "detail::is_operator_plus_function_object_impl< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-is-operator-plus-function-object",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-conjunction",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... && Ts::value)</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::conjunction = typedef std::conjunction<Ts...>",
      "explicit": false,
      "fullname": "thrust::conjunction",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 53,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 53
      },
      "name": "conjunction",
      "override": false,
      "qualifiedname": "thrust::conjunction",
      "refid": "group__type__traits_1gaa0ef198acfe55f8943097b334760c0f2",
      "see": [
        "conjunction_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1conjunction__value.html\">conjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/conjunction\"><code>std::conjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is (... && Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "conjunction",
      "type": "std::conjunction< Ts... >",
      "typePlain": "std::conjunction< Ts... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-conjunction",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-disjunction",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>(... || Ts::value)</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::disjunction = typedef std::disjunction<Ts...>",
      "explicit": false,
      "fullname": "thrust::disjunction",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 98,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 98
      },
      "name": "disjunction",
      "override": false,
      "qualifiedname": "thrust::disjunction",
      "refid": "group__type__traits_1ga9e44a8f527a2ce294a8b2d9e825482a7",
      "see": [
        "disjunction_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1disjunction__value.html\">disjunction_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/disjunction\"><code>std::disjunction</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is (... || Ts::value). ",
      "templateParams": [
        {
          "name": "Ts",
          "type": "typename...",
          "typePlain": "typename..."
        }
      ],
      "title": "disjunction",
      "type": "std::disjunction< Ts... >",
      "typePlain": "std::disjunction< Ts... >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-disjunction",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-negation",
      "brief": "<a href=\"https://en.cppreference.com/w/cpp/types/integral_constant\"><code>std::integral&#95;constant</code></a> whose value is <code>!Ts::value</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::negation = typedef std::negation<T>",
      "explicit": false,
      "fullname": "thrust::negation",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/logical_metafunctions.h",
        "bodyStart": 140,
        "column": 1,
        "file": "thrust/type_traits/logical_metafunctions.h",
        "line": 140
      },
      "name": "negation",
      "override": false,
      "qualifiedname": "thrust::negation",
      "refid": "group__type__traits_1gabfb73a9048bbc5df1d3e362259815d16",
      "see": [
        "negation_v ",
        "<a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1negation__value.html\">negation_value</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/negation\"><code>std::negation</code></a>"
      ],
      "static": false,
      "strong": false,
      "summary": "std::integral_constant whose value is !Ts::value. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "negation",
      "type": "std::negation< T >",
      "typePlain": "std::negation< T >",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-negation",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-remove-cvref-t",
      "brief": "Type alias that removes <a href=\"https://en.cppreference.com/w/cpp/language/cv\">const-volatile qualifiers</a> and <a href=\"https://en.cppreference.com/w/cpp/language/reference\">references</a> from <code>T</code>. Equivalent to <code>remove&#95;cv&#95;t&lt;remove&#95;reference&#95;t&lt;T&gt;&gt;</code>. ",
      "category": "types",
      "const": false,
      "definition": "using thrust::remove_cvref_t = typedef typename remove_cvref<T>::type",
      "explicit": false,
      "fullname": "thrust::remove_cvref_t",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/type_traits/remove_cvref.h",
        "bodyStart": 87,
        "column": 1,
        "file": "thrust/type_traits/remove_cvref.h",
        "line": 87
      },
      "name": "remove_cvref_t",
      "override": false,
      "qualifiedname": "thrust::remove_cvref_t",
      "refid": "group__type__traits_1gaf0390a4006fdd059c926b129db486c4c",
      "see": [
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cvref\">std::remove_cvref</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_cv</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_const</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_volatile</a>",
        "<a href=\"https://en.cppreference.com/w/cpp/types/remove_cv\">std::remove_reference</a>"
      ],
      "static": false,
      "strong": false,
      "summary": "Type alias that removes const-volatile qualifiers and references from T. Equivalent to remove_cv_t<remove_reference_t<T>>. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "remove_cvref_t",
      "type": "typename <a href=\"{{ site.baseurl }}/api/classes/structthrust_1_1remove__cvref.html\">remove_cvref</a>< T >::type",
      "typePlain": "typename remove_cvref< T >::type",
      "url": "{{ site.baseurl }}/api/groups/group__type__traits.html#using-remove-cvref-t",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-universal-ptr",
      "category": "types",
      "const": false,
      "definition": "using thrust::universal_ptr = typedef thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_pointer<T>",
      "details": "<code>universal&#95;ptr</code> stores a pointer to an object allocated in memory accessible to both hosts and devices.\n\nAlgorithms dispatched with this type of pointer will be dispatched to either host or device, depending on which backend you are using. Explicit policies (<code>thrust::device</code>, etc) can be used to specify where an algorithm should be run.\n\n<code>universal&#95;ptr</code> has pointer semantics: it may be dereferenced safely from both hosts and devices and may be manipulated with pointer arithmetic.\n\n<code>universal&#95;ptr</code> can be created with <code>universal&#95;allocator</code> or by explicitly calling its constructor with a raw pointer.\n\nThe raw pointer encapsulated by a <code>universal&#95;ptr</code> may be obtained by either its <code>get</code> method or the <code>raw&#95;pointer&#95;cast</code> free function.",
      "explicit": false,
      "fullname": "thrust::universal_ptr",
      "hasDetails": true,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "thrust/universal_allocator.h",
        "bodyStart": 72,
        "column": 1,
        "file": "thrust/universal_allocator.h",
        "line": 71
      },
      "name": "universal_ptr",
      "note": [
        "<code>universal&#95;ptr</code> is not a smart pointer; it is the programmer's responsibility to deallocate memory pointed to by <code>universal&#95;ptr</code>."
      ],
      "override": false,
      "qualifiedname": "thrust::universal_ptr",
      "refid": "group__memory__resources_1gac349015c75728ebc709912a192d2ec55",
      "see": [
        "host_ptr For the documentation of the complete interface which is shared by <code>universal&#95;ptr</code>. ",
        "raw_pointer_cast "
      ],
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename T",
          "typePlain": "typename T"
        }
      ],
      "title": "universal_ptr",
      "type": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_pointer< T >",
      "typePlain": "thrust::system::__THRUST_DEVICE_SYSTEM_NAMESPACE::universal_pointer< T >",
      "url": "{{ site.baseurl }}/api/groups/group__memory__resources.html#using-universal-ptr",
      "visibility": "public"
    }
  ],
  "qualifiedname": "thrust",
  "refid": "namespacethrust",
  "static": false,
  "strong": false,
  "title": "thrust",
  "url": "{{ site.baseurl }}/api/namespaces/namespacethrust.html",
  "visibility": "public"
}